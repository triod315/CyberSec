<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Noemax.Compression.Trial</name>
    </assembly>
    <members>
        <member name="T:Noemax.BZip2.BZip2Constants">
             Base class for both the compress and decompress classes.
             Holds common arrays, and static data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="T:Noemax.BZip2.BZip2InputStream">
            <summary>
            Provides methods and properties for decompressing BZIP2 format.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.BZip2.BZip2InputStream">BZip2InputStream Class</see> with the specified file path.
            </summary>
            <param name="filename"> 
            The path to the file containing the BZip2 compressed data. 
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.BZip2.BZip2InputStream">BZip2InputStream</see> with the specified stream.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <overloads>
            Initialize a new instance of <see cref="T:Noemax.BZip2.BZip2InputStream"/>.
            </overloads>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.BZip2.BZip2InputStream">BZip2InputStream</see> with the specified stream.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.ReadByte">
            <summary>
            Reads a byte from the compressed stream.
            </summary>
            <value>
            The unsigned byte cast to an <b>Int32</b>, or -1 if at the end of the stream.
            </value>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Flush">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
            <remarks>        
            Reading decompressed bytes from the stream does not always result in reading compressed bytes from the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.ReadTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.WriteTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.BZip2.BZip2OutputStream">
            <summary>
            Provides methods and properties for compressing data using the BZIP2 format.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.BZip2.BZip2OutputStream"/> class. 
            </summary>
            <param name="filename">
            The path to the file to which the compressed data will be written.
            </param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.BZip2.BZip2OutputStream"/> class. 
            </summary>        
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.BZip2.BZip2OutputStream"/> class. 
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying 
            stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.WriteByte(System.Byte)">
            <summary>
            Write a single byte into the stream.
            </summary>
            <param name="bv">A byte to write.</param>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Finish">
            <summary>
            Finalizes the compression and flushes the compressed data into stream.  
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.BZip2.BZip2OutputStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="T:Noemax.BZip2.CRC">
             A simple class the hold and calculate the CRC for sanity checking
             of the data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="T:Noemax.GZip.Core.Hp.Deflate">
            <summary>
            Provides methods and properties for compressing data using ZStream like API similar to the original Zlib library. 
            </summary>
        </member>
        <member name="T:Noemax.GZip.Core.DeflateBase">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.Core.ZStream">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.ZLIB_VERSION">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.MIN_MATCH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.MAX_MATCH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.PRESET_DICT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_FILTERED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_HUFFMAN_ONLY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_RLE">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_FIXED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_DEFAULT_STRATEGY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_NULL">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_OK">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_STREAM_END">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_NEED_DICT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_ERRNO">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_STREAM_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_DATA_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_MEM_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_BUF_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_VERSION_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_NO_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_PARTIAL_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_SYNC_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_FULL_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_FINISH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_BLOCK">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_TREES">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_DEFLATED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.next_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.next_in_index">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.avail_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.total_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.next_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.next_out_index">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.avail_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.total_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.msg">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.data_type">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.adler">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.ZStream.ERR_MSG(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.ZStream.ERR_RETURN(Noemax.GZip.Core.ZStream,System.Int32)">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.Core.ZStream.ZStreamDataType">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.ZStreamDataType.Z_BINARY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.ZStreamDataType.Z_TEXT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.ZStreamDataType.Z_ASCII">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.ZStreamDataType.Z_UNKNOWN">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflate(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflateEnd">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflateInit(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflateInit(System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflateInit(System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflateInit(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.FlushOutput(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflate(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflateEnd">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.Core.Hp.Inflate">
            <summary>
            Provides methods and properties for decompressing data using ZStream like API similar to the original Zlib library. 
            </summary>
        </member>
        <member name="T:Noemax.GZip.Core.InflateBase">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.InflateBase.inflate(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.InflateBase.inflateInit">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.InflateBase.inflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.InflateBase.inflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Inflate.inflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Inflate.inflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Inflate.inflateInit">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Inflate.inflate(System.Int32)">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.Core.Deflate">
            <summary/>    
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflateInit(System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflateInit(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.FlushOutput(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflate(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflateEnd">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.ZlibInputStream">
            <summary>
            Provides methods and properties for decompressing ZLIB format.
            </summary>
        </member>
        <member name="T:Noemax.GZip.DeflateInputStream">
            <summary>
            Provides methods and properties for decompressing DEFLATE format.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateInputStream"/> class.
            </summary>   
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            The base two logarithm of the size of the window buffer. This should be an integer from 8 to 15. Higher values give better compression, but use more memory. 
            </param>        
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="windowBits">The base two logarithm of the size of the window buffer. This should be an integer from 8 to 15. Higher values give better compression, but use more memory. </param>        
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.GZip.DeflateInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed data.</param> 
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Restart">
            <summary>
            Restarts the decompression starting from current position of the underlying stream.
            </summary>        
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Flush">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Initiates asynchronous read operation which reads and decompresses data from the compressed stream and stores it into the specified buffer.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <param name="callback">An optional asynchronous callback, to be called when the operation is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An object that represents the asynchronous read operation, which could still be pending.</returns>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete. 
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanWrite">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream.
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.BytesBuffered">
            <summary>
            Returns the number of compressed bytes buffered.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.HasBuffered">
            <summary>
            Gets whether the stream have buffered bytes available to read.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.ForceBuffering">
            <summary>
            Gets and sets whether read operation must not complete until a requested amount of bytes is decompressed; 
            If set to False operation completes as soon as any amount of decompressed bytes available. Default value is True.        
            </summary>  
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.ZlibInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibInputStream"/> class.
            </summary>   
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.GZip.ZlibInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
        </member>
        <member name="M:Noemax.GZip.ZlibInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.ZlibInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when decompressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
        </member>
        <member name="M:Noemax.GZip.ZlibInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying
            stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when decompressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="T:Noemax.GZip.ZlibOutputStream">
            <summary>
            Provides methods and properties for compressing data into a stream using the ZLIB format.
            </summary> 
        </member>
        <member name="T:Noemax.GZip.DeflateOutputStream">
            <summary>
            Provides methods and properties for compressing data using the DEFLATE format.
            </summary>    
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateOutputStream"/> class.
            </summary>
            <param name="fileName">The path to the file to which compressed data will be written.</param> 
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param> 
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param> 
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:System.IO.Stream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Flush">
            <summary>
            Flushes the content of the internal buffers into the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Finish">
            <summary>
            Concludes compression and flushes the content of the internal buffer to the
            underlying stream.
            </summary>
            <remarks>
            	<para><strong>Finish</strong> concludes compression by writing the markup
                indicating the end of compressed data and flushing the content of the internal
                buffer.</para>
            	<para>After this method has been called, no more data can be written to this
                stream.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Close">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            <para>If this stream had been initialized with <strong>leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para>
            </remarks>        
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Restart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanRead">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the stream supports writing.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.ZlibOutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibOutputStream"/> class.
            </summary>
            <param name="fileName">The path to the file to which compressed data will be written.</param> 
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.ZlibOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibOutputStream"/> class.
            </summary>  
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.ZlibOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibOutputStream"/> class.
            </summary>  
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying
            stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.ZlibOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibOutputStream"/> class.
            </summary>        
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally,
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying
            stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param> 
        </member>
        <member name="M:Noemax.GZip.ZlibOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibOutputStream"/> class.
            </summary>        
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally,
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream 
            is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param> 
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="T:Noemax.GZip.DeflateStream">
            <summary>
            Provides methods and properties for compressing and decompressing data using the DEFLATE format.
            </summary>    
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.String,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateStream"/> class.
            </summary>        
            <param name="fileName">The path to the file where to write compressed data or read compressed data from.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateStream"/> class.
            </summary>        
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateStream"/> class.
            </summary>
            <remarks>
            	<para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
                stream also closes the underlying stream. Note that the state of the underlying
                stream can affect the usability of the stream. Also, no explicit checks are
                performed, so no additional exceptions are thrown when the new instance is
                created.</para>
            	<para>If an instance of the <b>DeflateStream</b> class is created with the
                <b>mode</b> parameter equal to <b>Compress</b>, header
                information is inserted immediately. If no further action occurs, the stream
                appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateStream"/> class.
            </summary>
            <remarks>
            <para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
            stream also closes the underlying stream. Note that the state of the underlying
            stream can affect the usability of the stream. Also, no explicit checks are
            performed, so no additional exceptions are thrown when the new instance is
            created.</para>
            <para>If an instance of the <b>DeflateStream</b> class is created with the
            <b>mode</b> parameter equal to <b>Compress</b>, header
            information is inserted immediately. If no further action occurs, the stream
            appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">
            One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression.
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateStream"/> class.
            </summary>
            <remarks>
            <para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
            stream also closes the underlying stream. Note that the state of the underlying
            stream can affect the usability of the stream. Also, no explicit checks are
            performed, so no additional exceptions are thrown when the new instance is
            created.</para>
            <para>If an instance of the <b>DeflateStream</b> class is created with the
            <b>mode</b> parameter equal to <b>Compress</b>, header
            information is inserted immediately. If no further action occurs, the stream
            appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Flush">
            <summary>
            Flushes the content of the internal buffer to the underlying stream.
            </summary>      
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.GZip.DeflateStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Close">
            <summary>
            Flushes the content of internal buffer and closes the current stream.
            </summary>
            <remarks>
            <para>If this stream had been initialized with <strong>leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanWrite">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanWrite"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.GZip.ExtraFieldCollection">
            <summary>Represents a collection of GZip header fields.</summary>
            
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Add(System.Int32,System.Byte[])">
            <summary>Adds the header to the list of GZip headers.</summary>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and ID2),
                which can be represented as a single 16-bit unsigned integer where ID1 is the most
                significant 8 bits and ID2 is the less significant 8 bits of its binary
                representation.</para>
            	<para>Use this method if it's more comfortable to provide the ID as a single
                <strong>Int16</strong> value. To provide the ID as two 8-bit fields use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Add(System.Byte,System.Byte,System.Byte[])">Add(Byte,
                Byte, Byte[])</see> overload.</para>
            </remarks>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
            <param name="data">The array of bytes to be stored in header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Add(System.Byte,System.Byte,System.Byte[])">
            <summary>Adds the header to the list of GZip headers.</summary>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and
                ID2).</para>
            	<para>Use this method if it's more comfortable to provide the ID as two 8-bit
                values. To provide the ID as a single 16-bit unsigned integer use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Add(System.Int32,System.Byte[])">Add(Int32,
                Byte[])</see> overload.</para>
            </remarks>
            <param name="id1">The 8-bit ID1 value.</param>
            <param name="id2">The 8-bit ID2 value.</param>
            <param name="data">The array of bytes to be stored in the header field.</param>
            <overloads>
            Adds the header to the list of GZip headers.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.GetByID(System.Int32)">
            <summary>
            Gets the header associated with the ID represented as a 16-bit unsigned
            integer.
            </summary>
            <returns>The array of bytes stored in the header field.</returns>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and ID2),
                which can be represented as a single 16-bit unsigned integer where ID1 is the most
                significant 8 bits and ID2 is the less significant 8 bits of its binary
                representation.</para>
            	<para>Use this method if it's more comfortable to provide the ID as a single
                <strong>Int16</strong> value. To provide the ID as two 8-bit fields use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Get(System.Byte,System.Byte)">Get(Byte,
                Byte)</see> overload.</para>
            </remarks>
            <overloads>Gets the header.</overloads>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Get(System.Byte,System.Byte)">
            <summary>
            Gets the GZip header associated with the ID represented as two ANSI character
            octet.
            </summary>
            <returns>The array of bytes stored in the header field.</returns>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and
                ID2).</para>
            	<para>Use this method if it's more comfortable to provide the ID as two 8-bit
                values. To provide the ID as a single 16-bit unsigned integer use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Get(System.Int32)">Get(Int32)</see>
                overload.</para>
            </remarks>
            <param name="id1">The 8-bit ID1 value.</param>
            <param name="id2">The 8-bit ID2 value.</param>
            <overloads>
            Gets the GZip header.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Get(System.Int32)">
            <summary>Gets the GZip header specified by its index in the list of headers.</summary>
            <returns>The array of bytes stored in the header field.</returns>
            <param name="index">The index of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Remove(System.Int32)">
            <summary>Removes the header with the specified index.</summary>
            <param name="index">The index of header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.RemoveById(System.Int32)">
            <summary><para>Removes the header specified by the 16-bit unsigned integer ID.</para></summary>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Clear">
            <summary>Clears the list of GZip headers.</summary>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.CopyTo(Noemax.GZip.GZipHeaderField[],System.Int32)">
            <summary>
            Copies the content of the collection into an array of
            <see cref="T:Noemax.GZip.GZipHeaderField">GZipHeaderField</see>.
            </summary>
            <param name="array">
            The destination array of
            <see cref="T:Noemax.GZip.GZipHeaderField">GZipHeaderField</see>.
            </param>
            <param name="arrayIndex">
            	<para>The index in the destination <b>array</b> at which to
                begin copying .</para>
            </param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.GetEnumerator">
            <summary>Gets a list of items in a collection.</summary>
            <returns>
            An <strong>IEnumerator</strong> object that can be used to iterate through the
            collection.
            </returns>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.Count">
            <summary>Gets the number of contained headers.</summary>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.Item(System.Int32)">
            <summary>Gets the header at the specified index.</summary>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.IsReadOnly">
            <summary>Gets a value indicating whether the collection is read-only.</summary>
        </member>
        <member name="T:Noemax.GZip.GZipHeaderField">
            <summary>Represents a GZip header field.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.Id">
            <summary>The 16-bit identifier of the header field (concatenated ID1 and ID2).</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.Id1">
            <summary>The 8-bit ID1 identifier.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.Id2">
            <summary>The 8-bit ID2 identifier.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.Data">
            <summary>The data contained in the header field.</summary>
        </member>
        <member name="T:Noemax.GZip.GZipInputStream">
            <summary>
            Provides methods and properties for decompressing GZIP format.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipInputStream"/> class.
            </summary>
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipInputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipInputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipInputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name=" windowBits">
            Specifies the window size to be used when compressing (FOR DECOMPRESSION CHANGE TO: decompressing). It may be set to an integer from 8 to 15.
            Generally, lower values result in lower memory usage while higher values result in better compression. The windowBits used when decompressing
            must be the same as or higher than the windowBits used when compressing.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
             <summary> 
             Initializes a new instance of the <see cref="T:Noemax.GZip.GZipInputStream"/> class.
             </summary>
             <param name="input">The underlying stream from which to read compressed bytes.</param>
             <param name="leaveOpen">
             If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
             </param>
             <param name="windowBits">
             Specifies the window size to be used when decompressing. It may be set to an integer from 8 to 15. Generally, lower values 
             result in lower memory usage while higher values result in better compression. The windowBits used when decompressing
             must be the same as or higher than the windowBits used when compressing.
            </param>
             <param name="disableManagedPointers">
             If set to <strong>True</strong> then the compression method implementation will not use any managed pointers. 
             Otherwise implementation is selected automatically depending on whether current process allows managed pointers.
             </param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.ReadHeader">
            <summary>
            Reads the GZIP header from the stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Flush">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanWrite">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream.
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ExtraFields">
            <summary>The collection of extra-fields read from the GZip header.</summary>
            <remarks>
            If the GZip header does not contain any extra-fields this property returns an
            empty
            <see cref="T:Noemax.GZip.ExtraFieldCollection">ExtraFieldCollection</see>.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ParseExtraFields">
            <summary>
            Gets and sets whether the reader should parse the extra-fields stored in the GZip
            header.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CheckCRC">
            <summary>
            Gets and sets whether to check CRC of the decompressed data.
            </summary>
            <value>
             <b>true</b> if CRC of decompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CheckLength">
            <summary>
            Gets and sets whether to check the length of uncompressed data.
            </summary>
            <remarks>  
            The length check can fail on the files that are bigger than 4GB, since GZIP header does not support 
            serializing bigger number. For this reason it's recommended to set this property to <strong>false</strong> 
            in cases when original data might exceed the 4294967295 bytes.
            </remarks> 
            <value>
             <b>true</b> if the length of uncompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Filename">
            <summary>Gets the filename specified in the GZip header.</summary>
            <remarks>
            If the filename is not present in the GZip header it returns
            <strong>null</strong> (<strong>Nothing</strong> for Visual Basic).
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.FileComments">
            <summary>
            Gets the comments specified in the GZip header.  
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.FileTime">
            <summary>
            Gets an original file last modified time.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.GZip.GZipOutputStream">
            <summary>
            Provides methods and properties for compressing data into a stream using the GZIP format.
            </summary> 
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.String,System.Int32)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream"/> class.
            </summary>
            <param name="fileName">The path to the file to which the compressed data will be written.</param>        
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>        
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying 
            stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>        
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying 
            stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values 
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing
            must be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>        
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying 
            stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values 
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing
            must be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param>
            <param name="disableManagedPointers">
            If set to <strong>True</strong> then the compression method implementation will not use any managed pointers. 
            Otherwise implementation is selected automatically depending on whether current process allows managed pointers.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Flush">
            <summary>
            Flushes the content of the internal buffers to the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.GZip.GZipOutputStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanRead">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanWrite">
            <summary>
            Always returns <strong>True</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Filename">
            <summary>
            Gets and sets the filename to write into the GZIP header.
            </summary>
            <remarks>
            <para>You can provide the name of the compressed file to be written into the GZIP
            header by setting this property.</para>
            <para>The GZIP header will be written during the first write operation, therefore
            this property should be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.FileTime">
            <summary>
            The original last modified time of the compressed file.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Comments">
            <summary>Gets and sets the file comments to write into the GZIP header.</summary>
            <remarks>
            <para>You can provide the comments for the compressed file to be written into the
            GZIP header by setting this property.</para>
            <para>The GZIP header will be written during the first write operation, therefore
            this property has to be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.ExtraFields">
            <summary>
            The collection of extra-fields to write into the GZIP header.
            </summary>
            <remarks>
            <para>You can provide the set of extra-fields to be written into the GZIP header by
            modifying this collection.</para>
            <para>The GZIP header will be written during the first write operation, therefore
            the extra-header fields should be specified before writing any data into the
            stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>     
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.GZip.CompressionMode">
            <summary>
            Defines the compression modes for compression stream.
            </summary>    
        </member>
        <member name="F:Noemax.GZip.CompressionMode.Compress">
            <summary>
            To compress data.
            </summary>
        </member>
        <member name="F:Noemax.GZip.CompressionMode.Decompress">
            <summary>
            To decompress data.
            </summary>
        </member>
        <member name="T:Noemax.GZip.GZipStream">
            <summary>
            Provides methods and properties for compressing and decompressing data using the GZIP format.
            </summary>  
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.String,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipStream"/> class.
            </summary>        
            <param name="fileName">
            The path to the file to which the compressed data will be written or from which the data 
            to be decompressed will be read.
            </param>
            <param name="mode">
            One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipStream"/> class.
            </summary>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be decompressed will be read.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipStream"/> class.
            </summary>
            <remarks>
            	<para>If an instance of the <b>GZipStream</b> class is created with the
                <b>mode</b> parameter equal to <b>Compress</b>, header
                information is inserted immediately. If no further action occurs, the stream
                appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be 
            decompressed will be read.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipStream"/> class.
            </summary>
            <remarks>
            <para>If an instance of the <b>GZipStream</b> class is created with the
               <b>mode</b> parameter equal to <b>Compress</b>, header
               information is inserted immediately. If no further action occurs, the stream
               appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">
            The stream to which the compressed data will be written or from which the data to be decompressed will be read.
            </param>
            <param name="mode">
            One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that indicates the action to take.
            </param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipStream"/> class.
            </summary>
            <remarks>
            <para>If an instance of the <b>GZipStream</b> class is created with the
               <b>mode</b> parameter equal to <b>Compress</b>, header
               information is inserted immediately. If no further action occurs, the stream
               appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be decompressed will be read.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Flush">
            <summary>
            Flushes the content of the internal buffer to the underlying stream.
            </summary>        
        </member>
        <member name="M:Noemax.GZip.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.GZip.GZipStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks> 
        </member>
        <member name="P:Noemax.GZip.GZipStream.Filename">
            <summary>
            Gets and sets the filename to write into or read from the GZip header.
            </summary>
            <remarks>
            	<para>You can provide the name of the compressed file to be written into the GZip
                header by setting this property.</para>
            	<para>The GZip header will be written during the first write operation, therefore
                this property should be specified before writing any data into the stream.</para>
                <para>The GZip header will be written during the first write operation, therefore
                this property should be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanWrite">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanWrite"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CheckCRC">
            <summary>
            Gets and sets whether to check CRC of the decompressed data.
            </summary>
            <value>
             <b>true</b> if CRC of decompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CheckLength">
            <summary>
            Gets and sets whether to check the length of uncompressed data.
            </summary>
            <value>
             <b>true</b> if the length of uncompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.GZip.Core.Inflate">
            <summary/>    
        </member>
        <member name="M:Noemax.GZip.Core.Inflate.inflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Inflate.inflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Inflate.inflateInit">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Inflate.inflate(System.Int32)">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.InvalidInputException">
            <summary>
            The exception that is thrown when a compressed input stream is in an invalid
            format.
            </summary>
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.InvalidInputException"/> class.
            </summary>        
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.InvalidInputException"/> class.
            </summary>
            <param name="message">
            The text description of error that cause this exception.
            </param>
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.InvalidInputException"/> class.
            </summary>
            <param name="message">
            The text description of error that cause this exception.
            </param>
            <param name="innerException"> 
            The inner exception that caused this exception to be thrown.
            </param>
        </member>
        <member name="T:Noemax.Trial.NoemaxTrialExpiredException">
            <summary/>  
        </member>
        <member name="M:Noemax.Trial.NoemaxTrialExpiredException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:Noemax.Trial.NoemaxTrialExpiredException.PrepareMessage(System.String)">
            <summary/>
        </member>
        <member name="T:Noemax.Trial.TrialBehavior">
            <summary/>
        </member>
        <member name="M:Noemax.Trial.TrialBehavior.Do(System.String)">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.Core.Hp.Lzf4Decoder">
            <summary>
            Provides methods and properties for decompressing data using LZF4 compression method.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.ILzf4Decoder">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.ILzf4Decoder.Decompress(System.Byte[],System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32,Noemax.Lzf.ReadCallback,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.ILzf4Decoder.Reset">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.ILzf4Decoder.BytesBuffered">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.ILzf4Decoder.HasBuffered">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Decoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Decoder"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Decoder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Decoder"/> class.
            </summary>
            <param name="bufferSize">The size of decoder internal buffer in bytes.</param>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Decoder.Reset">
            <summary>
            Resets the compression state allowing to restart decompression using already allocated <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Decoder"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Decoder.Decompress(System.Byte[],System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32,Noemax.Lzf.ReadCallback,System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.Core.Hp.Lzf4Decoder.HasBuffered">
            <summary>
            Gets the value that indicate whether the decoder has any decompressed bytes in its buffer.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Core.Hp.Lzf4Decoder.BytesBuffered">
            <summary>
            Gets the number of decompressed bytes in the decoder buffer.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Core.Hp.Lzf4Encoder">
            <summary>
            Provides methods and properties for compressing the data using LZF4 compression algorithm.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.ILzf4Encoder">
            <summary>
            Defines the interface to be implemented by the LZF4 compression encoder.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.ILzf4Encoder.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,Noemax.Lzf.FlushCallback)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.ILzf4Encoder.Flush(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.ILzf4Encoder.Reset">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.ILzf4Encoder.BufferSize">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Encoder.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Encoder"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Encoder.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Encoder"/> using the internal buffer of the specified size.
            </summary>
            <param name="bufferSize">The size of internal buffer in bytes.</param>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Encoder.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,Noemax.Lzf.FlushCallback)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Encoder.Flush(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Encoder.Reset">
            <summary>Resets the internal compression state allowing to start new compression reusing the same <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Encoder"/>.</summary>
        </member>
        <member name="P:Noemax.Lzf.Core.Hp.Lzf4Encoder.BufferSize">
            <summary>
            Gets the size of the internal buffer that is being used by the encoder.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.ReadCallback">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.FlushCallback">
            <summary>
            Delegate called when encoder needs to flush its output. Callback is used to speed up encoding of the data.
            </summary>
            <param name="buffer">The buffer containing compressed bytes.</param>
            <param name="count">The number of compressed bytes in the buffer.</param>
        </member>
        <member name="T:Noemax.Lzf.Core.Lzf4Decoder">
            <summary>    
            Provides methods and properties to compress streams using LZF4 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf4OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Decoder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Core.Lzf4Decoder"/> class. 
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Decoder.Decompress(System.Byte[],System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32,Noemax.Lzf.ReadCallback,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Decoder.Reset">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.Core.Lzf4Decoder.HasBuffered">
            <summary>
            Gets value indicating whether decoder have any compressed or uncompressed data buffered.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Core.Lzf4Decoder.BytesBuffered">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.Core.Lzf4Encoder">
            <summary>    
            Provides methods and properties to compress streams using LZF3 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf3OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Encoder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Core.Lzf4Encoder"/> class. 
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Encoder.Reset">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Encoder.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,Noemax.Lzf.FlushCallback)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Encoder.Flush(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.Core.Lzf4Encoder.BufferSize">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.Lzf4InputStream">
            <summary>
            Provides methods and properties for decompressing LZF4 format.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="filename">The path to the file to read compressed data from.</param>                
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="input">The stream to read compressed data from.</param>             
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">       
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="bufferSize">The size of the internal buffer to be used during compression.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="bufferSize">The size of the internal buffer to be used during compression.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Flush">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Reset">
            <summary>
            Resets the stream state to be ready to start reading a new LZF4 stream starting from the same inner source stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Initiates asynchronous read operation which reads bytes from the compressed stream and writes decompressed bytes into the specified buffer.
            </summary>
            <param name="buffer">The buffer to write the decompressed bytes.</param>
            <param name="offset">The offset in the buffer at which decompressed data will placed.</param>
            <param name="count">The maximum number of bytes to decompress.</param>
            <param name="callback">An optional asynchronous callback, to be called when the operation is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An object that represents the asynchronous read operation, which could still be pending.</returns>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete. 
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.ForceBuffering">
            <summary>
            Gets and sets whether read operation must not complete until a requested amount of bytes is decompressed; 
            If set to False operation completes as soon as any amount of decompressed bytes available. Default value is True.        
            </summary>  
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanWrite">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.Length">
            <summary>Gets the <see cref="P:System.IO.Stream.Length"/> property value of the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream.
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.HasBuffered">
            <summary>
            Gets whether stream have decompressed bytes available to read. 
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.BytesBuffered">
            <summary>
            Gets the number of compressed and uncompressed bytes buffered by the input stream.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Lzf4OutputStream">
            <summary>
            Provides methods and properties for compressing data using the LZF4 format.
            </summary>  
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="filename">The file to which compressed data will be written.</param>     
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="stream">The underlying stream to which the compressed data will be written.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which the compressed data will be written.</param>
            <param name="bufferSize">The size of internal buffer in bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="bufferSize">The size of internal buffer in bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Flush">
            <summary>
            Flushes the content of the internal buffers to the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Reset">
            <summary>
            Resets the stream state to be ready to start writing a new LZF4 stream using the same inner output stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.Lzf.Lzf4OutputStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanRead">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanWrite">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanWrite"/> property from the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream.
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanTimeout">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.WriteTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.WriteTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.ReadTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.ReadTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.ICoder.Code(System.IO.Stream,System.IO.Stream)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>		
        </member>
        <member name="T:Noemax.Lzma.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:Noemax.Lzma.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="T:Noemax.Lzma.CoderPropID">
            <summary>
            Provides the fields that represent properties identifiers for compressing.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.PosStateBits">
            <summary>
            Specifies number of position state bits for LZMA <![CDATA[(0 <= x <= 4)]]>.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.LitContextBits">
            <summary>
            Specifies number of literal context bits for LZMA <![CDATA[(0 <= x <= 8)]]>.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.LitPosBits">
            <summary>
            Specifies number of literal position bits for LZMA <![CDATA[(0 <= x <= 4)]]>.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cycles.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:Noemax.Lzma.LzmaMatchFinder">
            <summary>
            Defines the type of match finder to be used by LZMA compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.LzmaMatchFinder.Bt2">
            <summary>
            BinTree2.
            </summary>   
        </member>
        <member name="F:Noemax.Lzma.LzmaMatchFinder.Bt4">
            <summary>
            BinTree4
            </summary>
        </member>
        <member name="T:Noemax.Lzma.LzmaSettings">
            <summary>
            Represents the LZMA compression algorithm settings.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaSettings.ToString">
            <summary>
            Represents the LzmaEncoderSettings object as string.
            </summary>
            <returns>
            The string representing the LzmaEncoderSettings.
            </returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaSettings.#ctor">
            <summary>
            Creates a new instance of LzmaEncoderSettings class. 
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.MatchFinder">
            <summary>
            Gets and sets the type of match finder to be used by LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.PosStateBits">
            <summary>
            Gets and sets PosStateBits setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.LitContextBits">
            <summary>
            Gets and sets LitContextBits setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.LitPosBits">
            <summary>
            Gets and sets LitContextBits setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.NumFastBytes">
            <summary>
            Gets and sets the NumFastBytes setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.Dictionary">
            <summary>
            Gets and set the LZMA algorithm dictionary size.
            </summary>
            <remarks>
            Setting this value to a bigger number can improve compactness but will result in higher memory
            consumption.
            </remarks>
        </member>
        <member name="T:Noemax.Lzma.LzmaFactory">
            <summary>
            Provides a factory  for creating a LZMA compression/decompression streams.
            </summary>    
            <remarks>
            Factory also performs caching of LZMA processing related resources to speed up creation of new 
            compression/decompression streams.
            </remarks>
        </member>
        <member name="M:Noemax.Lzma.LzmaFactory.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Noemax.Lzma.LzmaFactory"/> class.
            </summary>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>        
        </member>
        <member name="M:Noemax.Lzma.LzmaFactory.CreateEncodingStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new compression stream for specified output stream into which compressed data will be written.
            </summary>
            <param name="output">The stream to write compressed data.</param>
            <param name="leaveOpen">If true, the output stream is left open when the compression stream is closed.</param>
            <returns>The compression stream that writes compressed data into the specified output stream.</returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaFactory.CreateDecodingStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates the stream for decompressing the compressed data from the specified input stream.
            </summary>
            <param name="input">The input stream from which to read compressed data.</param>
            <param name="leaveOpen">If true, the input stream is left open when decompressing stream is closed.</param>
            <returns>The stream to decompress the data from the input stream.</returns>
        </member>
        <member name="P:Noemax.Lzma.LzmaFactory.CompressionLevel">
            <summary>
            The level of compression being used by encoders provided by the factory. 
            </summary>
            <value>
            The level of compression being used by encoders provided by the factory.
            </value>
            <remarks>
            The level of compression is specified when the factory is constructed and cannot be changed later.
            </remarks>
        </member>
        <member name="T:Noemax.Lzma.LzmaInputStream">
            <summary>
            Provides methods and properties for decompressing LZMA format.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzma.LzmaInputStream"/> class.
            </summary>
            <param name="stream">The underlying stream from which to read compressed data.</param>        
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzma.LzmaInputStream"/> class.
            </summary>
            <param name="fileName">The path to the file from which the compressed data will be read.</param>        
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzma.LzmaInputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="expectLzmaFileHeader">Specifies whether the stream is expected to contain the LZMA file header.</param> 
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Flush">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanWrite">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.Lzma.LzmaOutputStream">
            <summary>
            Provides methods and properties for compressing data using the LZMA format.
            </summary>    
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzma.LzmaOutputStream"/> class.
            </summary>
            <param name="filename">The path to the file to which the compressed data will be written.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzma.LzmaOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzma.LzmaOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="writeLzmaFileHeader">Set to <b>true</b> to write an LZMa file header into stream; otherwise shorter stream header is used.</param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.Lzma.LzmaOutputStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanRead">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanWrite">
            <summary>
            Always returns <strong>True</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.Compression.BZip2Compression">
            <summary>
            Provides BZIP2 compression.
            </summary>
        </member>
        <member name="T:Noemax.Compression.CompressionFactory">
            <summary>
            Provides a unified programming interface for using compression methods.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.TryCreateDeflateHp">
            <summary>
            Gets instance providing DEFLATE compression and decompression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.TryCreateZlibHp">
            <summary>
            Gets instance providing ZLIB compression and decompression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.TryCreateGZipHp">
            <summary>
            Gets instance providing GZIP compression and decompression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.TryCreateLzf4Hp">
            <summary>
            Gets instance providing LZF4 compression and decompression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateDeflate">
            <summary>
            Creates a new compression factory providing the DEFLATE compression.
            </summary>
            <returns>
            The compression factory providing methods and properties for using the DEFLATE compression.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateZlib">
            <summary>
            Creates a new compression factory providing the ZLIB compression.
            </summary>
            <returns>
            The compression factory providing methods and properties for using the ZLIB compression.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateGZip">
            <summary>
            Creates a new compression factory providing the GZIP compression.
            </summary>
            <returns>
            The compression factory providing methods and properties for using the GZIP compression.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateLzf4">
            <summary>
            Creates a new compression factory providing the LZF4 compression.
            </summary>
            <returns>
            The compression factory providing methods and properties for using the LZF4 compression.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateLzma">
            <summary>
            Creates a new compression factory providing the LZMA compression.
            </summary>
            <returns>
            The compression factory providing methods and properties for using the LZMA compression.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateBZip2">
            <summary>
            Creates a new compression factory providing the BZIP2 compression.
            </summary>
            <returns>
            The compression factory providing methods and properties for using the BZIP2 compression.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Compression.CompressionFactory"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.GetCompressionFactory(System.String)">
            <summary>
            Gets the compression factory with specified compression method name.
            </summary>
            <param name="name">The name of the compression method.</param>
            <returns>The compression factory associated to the compression method name.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateOutputStream(System.IO.Stream)">
            <summary>
            Creates an output stream that compresses the bytes and writes compressed bytes into the underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <returns>The stream to compress data.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateInputStream(System.IO.Stream)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateEncoder(System.Int32)">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionEncoder"/> implementation providing the compression method.
            </summary>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>
            The ICompressionEncoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateDecoder">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionDecoder"/> implementation associated to this compression method.
            </summary>
            <returns>
            The ICompressionDecoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.SetSettings``1(``0)">
            <summary>
            Configures the compression factory with the specified settings. 
            </summary>
            <typeparam name="T">The type of the settings class associated to this factory.</typeparam>
            <param name="settings">The CompressionSettings instance with setting for compression method associated to this factory.</param>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Compress(System.Byte[],System.Int32)">
            <summary>
            Compresses an array of bytes and returns an array of compressed bytes.
            </summary>
            <param name="data">The array of bytes to compress.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>The array of compressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Decompress(System.Byte[])">
            <summary>
            Decompresses an array of compressed bytes and returns an array of decompressed bytes.
            </summary>
            <param name="compressed">The array of compressed bytes.</param>
            <returns>The array of decompressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Compress(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Compresses an array of bytes and returns an array of compressed bytes.
            </summary>
            <param name="buffer">The array with bytes to compress.</param>
            <param name="offset">The offset in array where bytes to compress start.</param>
            <param name="count">The number of bytes to compress.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>The array of compressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses the part of an array containing compressed bytes and returns an array of decompressed bytes.
            </summary>
            <param name="compressed">The array containing compressed bytes.</param>
            <param name="offset">The offset in array where compressed bytes starts.</param>
            <param name="count">The number of compressed bytes to decompress.</param>
            <returns>The array of decompressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Compress(System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Compresses a number of bytes from the specified stream and returns an array of compressed bytes.
            </summary>
            <param name="input">The stream with bytes to compress.</param>
            <param name="bytesToCompress">The number of bytes from the stream to compress.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>The array of compressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Compress(System.IO.Stream,System.Int32)">
            <summary>
            Compresses bytes from the specified stream and returns an array of compressed bytes.
            </summary>
            <param name="input">The stream to read bytes to compress.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>The array of compressed bytes.</returns>        
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Decompress(System.IO.Stream,System.Int32)">
            <summary>
            Reads compressed bytes from the specified stream and returns an array of decompressed bytes.
            </summary>
            <param name="input">The stream to read compressed bytes.</param>
            <param name="maxDecompressedSize">The maximum number of bytes to decompress.</param>
            <returns>The array of decompressed bytes.</returns>
            <remarks>
            <para>        
            This method will not return more bytes than specified by the <paramref name="maxDecompressedSize"/> parameter.        
            If the length of the array of bytes returned by the method is equal to <paramref name="maxDecompressedSize"/>,
            you can attempt to call this method again to retrieve more decompress bytes.
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Decompress(System.IO.Stream)">
            <summary>
            Reads compressed bytes from the specified stream and returns an array of decompressed bytes.
            </summary>
            <param name="input">The stream to read compressed data from.</param>
            <returns>The array of decompressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.AutoDecompress(System.IO.Stream,System.Boolean,Noemax.Compression.CompressionFactory@)">
            <summary>
            Automatically detects compression method used when writing the input stream and returns the stream to decompress data.
            </summary>
            <param name="input">The compressed input stream.</param>
            <param name="leaveOpen">Specifies whether to leave the input stream open when returned stream is closed.</param>
            <param name="factory">The compression factory identifying compression algorithm used when compressing the input stream. If input is not compressed returns Null.</param>
            <returns>The stream to read the decompressed data.</returns>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.Name">
            <summary>
            Gets the name of the compression format provided by the factory.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.DefaultCompressionLevel">
            <summary>
            Gets and sets default compression level to be used when compressing data.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.Lzf4">
            <summary>
            Gets instance providing LZF4 compression and decompression.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.Deflate">
            <summary>
            Gets instance providing DEFLATE compression and decompression.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.Zlib">
            <summary>
            Gets instance providing ZLIB compression and decompression.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.GZip">
            <summary>
            Gets instance providing GZIP compression and decompression.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.BZip2">
            <summary>
            Gets instance providing BZIP2 compression and decompression.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.Lzma">
            <summary>
            Gets instance providing LZMA compression and decompression.
            </summary>
        </member>
        <member name="T:Noemax.Compression.CompressionStream">
            <summary>
            Provides methods and properties for compressing or decompressing the data using 
            compression method provided by the <see cref="T:Noemax.Compression.CompressionFactory"/>.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Compression.CompressionStream"/> class.
            </summary>
            <param name="stream">The inner stream. </param>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Reset">
            <summary>
            Reset the stream state. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Flush">
            <summary>
            Flushes the buffered output into the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The size of the stream in bytes.</param>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.Compression.CompressionStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation that reads compressed bytes from the underlying stream and decompresses it into the specified buffer.
            </summary>
            <param name="buffer">The array of bytes where to save decompressed bytes.</param>
            <param name="offset">The offset in the array of bytes where to save decompressed bytes.</param>
            <param name="count">The maximum number of bytes to decompress.</param>
            <param name="callback">Optional callback to call when asynchronous operation is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation that compresses bytes from the specified buffer and write compressed bytes into the underlying stream.
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <param name="offset">The offset in the array of bytes to compress.</param>
            <param name="count">The number of bytes to compress.</param>
            <param name="callback">Optional callback to call when asynchronous operation is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for asynchronous read operation to complete.
            </summary>
            <param name="asyncResult">The object representing the asynchronous operation.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.EndWrite(System.IAsyncResult)">
            <summary>
            Waits for asynchronous write operation to complete.
            </summary>
            <param name="asyncResult">The object representing the asynchronous operation.</param>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>True</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Close">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            <para>If this stream had been initialized with <strong>leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para>
            </remarks>
            <seealso cref="M:Noemax.Compression.CompressionFactory.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)"/>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.BytesBuffered">
            <summary>
            The number of bytes in the decoder buffer. 
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.CanRead">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanRead"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.CanSeek">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanSeek"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.CanWrite">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanWrite"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.Length">
            <summary>
            Gets the <see cref="P:System.IO.Stream.Length"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.Position">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.Position"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.InnerStream">
            <summary>
            Gets the inner stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Compression.BZip2Compression.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.BZip2Compression.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.BZip2Compression.SetSettings``1(``0)">
            <summary>
            Not supported.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="settings"></param>
        </member>
        <member name="P:Noemax.Compression.BZip2Compression.Name">
            <summary>
            Gets the name of the compression format 'BZIP2'.
            </summary>
        </member>
        <member name="T:Noemax.IO.PackageReader">
            <summary>
            Provides methods and properties for reading streams from the stream package.
            </summary>
        </member>
        <member name="M:Noemax.IO.PackageReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.IO.PackageReader"/> class.
            </summary>
            <param name="input">The input stream from which the package to be read.</param>
            <param name="randomAccess">Specifies whether the reader can use random access when accessing the input stream.</param>        
            <remarks>
            <para>
            When random access is enabled all packaged streams are available as soon as package reader is created. You can access these 
            streams through the <see cref="P:Noemax.IO.PackageReader.PackagedStreams"/> property.
            </para>
            <para>
            When random access is not enabled or not supported by the underlying input stream then processing the package is performed in the forward 
            only mode and packages are added to the <see cref="P:Noemax.IO.PackageReader.PackagedStreams"/> as soon as first fragment of the packaged stream is encountered will 
            reading data. The first packaged stream is added to the list as soon as reader is created. It is necessary to read from the first stream 
            in order to discover subsequent streams in the package.
            </para>
            <para>
            If more than one stream is written concurrently into the package during the package creation, than stream fragments are intermixed within the package
            stream. This impose a requirement on the reader to continue reading from all discovered streams concurrently to allow reader to demultiplex stream 
            fragments. For simplicity  it's recommended to write streams into package sequentially rather than concurrently in order to avoid mixing the streams 
            content and complexity.
            </para>
            <para>
            If random access is enabled all streams in the package can be read in any order and no special requirements are imposed whether stream 
            fragments are intermixed within a package or not.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.IO.PackageReader.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.IO.PackageReader"/> class.
            </summary>
            <param name="input">The input stream from which the package to be read.</param>
            <param name="randomAccess">Specifies whether the reader can use random access when accessing the input stream.</param>
            <param name="leaveInputOpen">Specifies whether the input stream should be left open when the reader is closed.</param>
            <remarks>
            <para>
            When random access is enabled all packaged streams are available as soon as package reader is created. You can access these 
            streams through the <see cref="P:Noemax.IO.PackageReader.PackagedStreams"/> property.
            </para>
            <para>
            When random access is not enabled or not supported by the underlying input stream than processing the package is performed in the forward 
            only mode and packages are added to the <see cref="P:Noemax.IO.PackageReader.PackagedStreams"/> as soon as first fragment of the packaged stream is encountered will 
            reading data. The first packaged stream is added to the list as soon as reader is created. It is necessary to read from the first stream 
            in order to discover subsequent streams in the package.
            </para>
            <para>
            If more than one stream is written concurrently into the package during the package creation, than stream fragments are intermixed within the package
            stream. This impose a requirement on the reader to continue reading from all discovered streams concurrently to allow reader to demultiplex stream 
            fragments. For simplicity  it's recommended to write streams into package sequentially rather than concurrently in order to avoid mixing the streams 
            content and complexity.
            </para>
            <para>
            If random access is enabled all streams in the package can be read in any order and no special requirements are imposed whether stream 
            fragments are intermixed within a package or not.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.IO.PackageReader.Close">
            <summary>
            Closes the reader and release all associated resources. 
            </summary>
        </member>
        <member name="M:Noemax.IO.PackageReader.UnpackageFiles(Noemax.IO.PackageReader,System.String,Noemax.IO.ProgressCallback)">
            <summary>
            Unpackages files resources form the composite stream and stores unpackaged files into specified folder.
            </summary>
            <param name="reader">The composite stream reader to read the package.</param>
            <param name="targetRoot">The target root folder where to save the recreate a folder structure with files from the package.</param>
            <param name="callback">The callback to report the progress.</param>
            <returns>The number of files unpackaged from the stream.</returns>
        </member>
        <member name="M:Noemax.IO.PackageReader.CheckMap">
            <summary/>
        </member>
        <member name="M:Noemax.IO.PackageReader.ClearMap">
            <summary/>
        </member>
        <member name="M:Noemax.IO.PackageReader.Delete(Noemax.PackagedStream)">
            <summary>
            Deletes the packaged stream removing all of its data from the package.
            </summary>
            <param name="stream">The packaged stream to be removed.</param>
        </member>
        <member name="M:Noemax.IO.PackageReader.Delete(System.Collections.Generic.IEnumerable{Noemax.PackagedStream})">
            <summary>
            Deletes an enumeration of the packaged streams and all associated data from the packaged.
            </summary>
            <param name="deleteList"></param>
        </member>
        <member name="M:Noemax.IO.PackageReader.Purge">
            <summary>
            Purge the package shrinking the package media by removing empty spaces which are created when package streams are deleted from the package.
            </summary>
        </member>
        <member name="M:Noemax.IO.PackageReader.Purge(System.Int32)">
            <summary>
            Purge the package shrinking the package media by removing empty spaces which are created when package streams are deleted from the package.
            </summary>
            <param name="bufferSize">The size of the intermediary buffer to be used when purging the package media.</param>
        </member>
        <member name="P:Noemax.IO.PackageReader.Eof">
            <summary>
            Gets whether the reader had reached the end of the content.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackageReader.PackagedStreams">
            <summary>
            Gets the list of the packaged stream discovered within the packaged. In case when random access is enabled this property 
            returns the full list of packaged streams as soon as package is opened.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackageReader.NewStreamCallback">
            <summary>
            Callback that is called when new packaged stream encountered within the package.
            </summary>
        </member>
        <member name="T:Noemax.PackagedStream">
            <summary>
            Provides methods and properties for reading data from the packaged stream.
            </summary>
        </member>
        <member name="M:Noemax.PackagedStream.Restart">
            <summary>
            Restarts the reading by returning to the begin of the packaged stream content.
            </summary>
        </member>
        <member name="M:Noemax.PackagedStream.DecompressTo(Noemax.Compression.CompressionFactory,System.IO.Stream)">
            <summary>
            Decompress the content of the packaged stream stores decompressed data into specified output stream.
            </summary>
            <param name="compression">The compression to use for decompressing the data.</param>
            <param name="output">The output stream to write the output stream.</param>
        </member>
        <member name="M:Noemax.PackagedStream.DecompressTo(System.IO.Stream)">
            <summary>
            Decompress the content of the packaged stream stores decompressed data into specified output stream. 
            </summary>                
            <param name="output">The output stream to write the output stream.</param>
            <remarks>
            Compression method is detected using the media-type of the stream represented by the <see cref="P:Noemax.PackagedStream.ResourceType"/> property.
            </remarks>
        </member>
        <member name="P:Noemax.PackagedStream.Id">
            <summary>
            Gets the number identifying the stream.
            </summary>
        </member>
        <member name="P:Noemax.PackagedStream.ResourceType">
            <summary>
            Gets the media type associated to the data in the stream. This value is specified when stream is packaged into the package.
            </summary>
        </member>
        <member name="P:Noemax.PackagedStream.Metadata">
            <summary>
            Gets the binary metadata associated to the data in the stream. This value is specified when stream is packaged into the package.
            </summary>
        </member>
        <member name="P:Noemax.PackagedStream.MetadataAsString">
            <summary>
            Gets the string metadata associated to the data in the stream. This value is specified when stream is packaged into the package.
            </summary>
        </member>
        <member name="P:Noemax.PackagedStream.CanRestart">
            <summary>
            Gets whether the stream can restart the reading by returning to the begin of the packaged stream content.
            </summary>
        </member>
        <member name="M:Noemax.IO.PackageReader.LogicalStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to this stream from the specified byte array.
            </summary>        
            <param name="buffer">An array of bytes that contains the data to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the data to be written starts.</param>
            <param name="count">The number of bytes to be written.</param>
        </member>
        <member name="T:Noemax.IO.NewLogicalStream">
            <summary>
            The delegate used for callback to notify that new stream is discovered within the package.
            </summary>
        </member>
        <member name="T:Noemax.IO.PackageWriter">
            <summary>
            Provides the methods and properties for packaging multiple streams into the single stream package.
            </summary>
        </member>
        <member name="M:Noemax.IO.PackageWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of <see cref="T:Noemax.IO.PackageWriter"/> class.
            </summary>
            <param name="output">
            The output stream into which the package is going to be saved.
            </param> 
        </member>
        <member name="M:Noemax.IO.PackageWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Noemax.IO.PackageWriter"/> class.
            </summary>
            <param name="output">
            The output stream into which the package is going to be saved.
            </param>         
            <param name="leaveOutputOpen">
            Specifies whether the output stream should be closed when the writer is closed.
            </param>        
        </member>
        <member name="M:Noemax.IO.PackageWriter.StartStream(System.String,System.ArraySegment{System.Byte})">
            <summary>
            Creates a new packaged stream to write data into the package with specified media type and metadata associated to the stream.
            </summary>
            <param name="mediaType">The string identifying the type of the data in the stream.</param>
            <param name="metadata">The sequence of bytes providing information about the stream.</param>
            <remarks>
            The media type and metadata associated to the stream, will be available to the reader when stream is unpackaged. 
            Application can create and write into more than one package stream simultaneously in this case these streams data is multiplexed within 
            the package. Such multiplexing imposed specific requirements on the way these streams can be unpackaged later. In order to avoid complexity
            it's recommended to not start writing the subsequent stream until previous stream is closed.
            </remarks> 
        </member>
        <member name="M:Noemax.IO.PackageWriter.StartStream(System.String,System.String)">
            <summary>
            Creates a new packaged stream to write data into the package with specified media type and metadata associated to the stream.
            </summary>
            <param name="mediaType">The string identifying the type of the data in the stream.</param>
            <param name="metadata">The string providing information about the stream.</param>
            <remarks>
            The media type and metadata associated to the stream, will be available to the reader when stream is unpackaged. 
            Application can create and write into more than one package stream simultaneously in this case these streams data is multiplexed within 
            the package. Such multiplexing imposed specific requirements on the way these streams can be unpackaged later. In order to avoid complexity
            it's recommended to not start writing the subsequent stream until previous stream is closed.
            </remarks> 
        </member>
        <member name="M:Noemax.IO.PackageWriter.WriteStream(System.String,System.String,System.IO.Stream)">
            <summary>
            Writes the specified input stream into the package along with associated metadata.
            </summary>
            <param name="mediaType">The media-type associated to the stream.</param>
            <param name="metadata">The string containing information about the stream.</param>
            <param name="input">The stream to package.</param>
        </member>
        <member name="M:Noemax.IO.PackageWriter.WriteStream(System.String,System.ArraySegment{System.Byte},System.IO.Stream)">
            <summary>
            Writes the specified input stream into the package along with associated metadata.
            </summary>
            <param name="mediaType">The media-type associated to the stream.</param>
            <param name="metadata">The string containing information about the stream.</param>
            <param name="input">The stream to package.</param>
        </member>
        <member name="M:Noemax.IO.PackageWriter.WriteFile(System.String,System.ArraySegment{System.Byte},System.String)">
            <summary>
            Writes the specified file into package along with associated metadata.
            </summary>
            <param name="mediaType">The media-type associated to the file.</param>
            <param name="metadata">The string containing information about the file.</param>
            <param name="file">The file to package.</param>
        </member>
        <member name="M:Noemax.IO.PackageWriter.WriteStream(System.String,Noemax.Compression.CompressionFactory,System.IO.Stream)">
            <summary>
            Writes compressed stream into the package by reading and compressing data from the input stream.
            </summary>
            <param name="metadata">The string description of the stream.</param>
            <param name="compression">The compression method to use to compress the data from the input stream.</param>
            <param name="stream">The stream to write into the package.</param>
        </member>
        <member name="M:Noemax.IO.PackageWriter.WriteFile(System.String,System.String,System.String)">
            <summary>
            Writes the specified file into package along with associated metadata.
            </summary>
            <param name="mediaType">The media-type associated to the file.</param>        
            <param name="path">The file to save into package.</param>
            <param name="uri">The URI to the file in the package.</param> 
        </member>
        <member name="M:Noemax.IO.PackageWriter.Close">
            <summary>
            Closes all pending packaged streams and writes the end of the package.
            </summary>
        </member>
        <member name="M:Noemax.IO.PackageWriter.PackageResources(System.Collections.Generic.IEnumerable{Noemax.IO.PackagedResource},System.Int32,Noemax.IO.ProgressCallback)">
            <summary>
            Packages the enumeration of resources into the composite stream.
            </summary>
            <param name="resources"></param>
            <param name="maxThreads"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Noemax.IO.PackageWriter.WriteResource(Noemax.IO.PackagedResource)">
            <summary>
            Initiates the packaged resource serialization and returns the stream to write resource.
            </summary>
            <param name="resource">The resource being serialized into the package.</param>
            <returns>The stream to package resource into the package.</returns>
        </member>
        <member name="P:Noemax.IO.PackageWriter.MetadataEncoding">
            <summary>
            Contains the set of properties that defines how stream metadata is getting processed.
            </summary>
        </member>
        <member name="M:Noemax.IO.PackageWriter.LogicalStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>            
        </member>
        <member name="T:Noemax.Compression.CompressionSettings">
            <summary>
            The base class for descendant classes that provide properties representing configuration of a compression algorithms.
            </summary>
        </member>
        <member name="T:Noemax.Compression.FlushMode">
            <summary>
            Specifies whether and how to explicitly flush the internal state of the encoder into the output buffer.
            </summary>
        </member>
        <member name="F:Noemax.Compression.FlushMode.NoFlush">
            <summary>
            Do not explicitly flush the internal state of the encoder.
            </summary>
        </member>
        <member name="F:Noemax.Compression.FlushMode.FlushSync">
            <summary>
            Flush the internal state of the encoder into the output buffer to ensure that all bytes compressed up to
            this point can be decompressed by decoding the output produced up to this point.
            </summary>
        </member>
        <member name="F:Noemax.Compression.FlushMode.Finish">
            <summary>
            Flush the internal state of the encoder into the output buffer and write the final block to conclude the encoding.
            </summary>
        </member>
        <member name="T:Noemax.Compression.ICompressionEncoder">
            <summary>
            Defines the interface of the compression algorithm encoder.
            </summary>
            <remarks>
            ICompressionEncoder is a low-level programming interface that provides direct control over the input and output 
            buffers used by the compression method. Using this interface for in-memory compression avoids the extra overhead, 
            in terms of both memory consumption and memory copy operations, that is being imposed by using compressed streams.
            </remarks>
        </member>
        <member name="M:Noemax.Compression.ICompressionEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,Noemax.Compression.FlushMode,System.Int32@)">
            <summary>
            Reads bytes from the specified input buffer and writes compressed bytes into the specified output buffer.
            </summary>
            <param name="input">The input buffer from which to read the bytes to compress.</param>
            <param name="inputOffset">The offset in the input buffer at which to start reading the bytes to compress.</param> 
            <param name="inputCount">The number of bytes to read from the input buffer.</param>
            <param name="output">The output buffer into which to write the compressed bytes.</param>
            <param name="outputOffset">The offset in the output buffer at which to start writing the compressed bytes.</param> 
            <param name="maxOutputCount">The maximum number of compressed bytes to write into the output buffer.</param> 
            <param name="flushMode">The flush mode that specifies whether and how to explicitly flush the internal state of the encoder into the output buffer.</param>
            <param name="inputUsed">Returns the number of bytes read from the input buffer.</param>
            <returns>The number of the compressed bytes written into the output buffer.</returns>
            <remarks>
            <para>
            When Encode is called, the encoder consumes bytes from the input buffer and returns the number of bytes consumed
            in the <paramref name="inputUsed"/> parameter and the number of compressed bytes produced in the return value.
            </para>
            <para>
            The encoder can buffer both input and output in its internal buffer, so it might consume input without producing 
            any output until it is ready to flush its internal state. To force the encoder to produce output, its internal 
            state must be explicitly flushed.
            </para>
            <para>
            Depending on the compression algorithm, a minimal amount of output buffer space might be required for compressed
            bytes to be produced. When the output buffer space is insufficient for the encoder to produce any amount of 
            compressed bytes, it consumes input until its internal buffer is full but does not produce any output. Eventually
            both the returned <paramref name="inputUsed"/> and the return value of Encode become 0, despite the provided 
            <paramref name="inputCount"/> being greater than 0. This indicates that <paramref name="maxOutputCount"/> is too 
            low for the encoder to operate and a larger output buffer space must be provided.
            </para>
            <para>
            When the internal state of the encoder is explicitly flushed by setting flushMode to FlushMode.FlushSync or
            FlushMode.Finish, the encoder consumes input and produces output until all input is consumed and all its internal 
            state is flushed to the output. Encode must be called repeatedly until the returned inputUsed is equal to the 
            provided inputCount and the return value is 0. This indicates that all input has been consumed and all output
            produced has been flushed, provided that maxOutputCount is known to be sufficient for the encoder to operate. 
            </para>
            <para>
            If the internal state of the encoder needs to be flushed without providing any input, use Flush.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.Compression.ICompressionEncoder.Flush(System.Byte[],System.Int32,System.Int32,Noemax.Compression.FlushMode)">
            <summary>
            Flushes the internal state of the encoder into the specified output buffer.
            </summary>
            <param name="output">The output buffer into which to write the compressed bytes.</param>
            <param name="outputOffset">The offset in the output buffer at which to start writing the compressed bytes.</param> 
            <param name="maxOutputCount">The maximum number of compressed bytes to write into the output buffer.</param> 
            <param name="flushMode">The flush mode that specifies whether and how to explicitly flush the internal state of the encoder into the output buffer.</param>
            <returns>The number of the compressed bytes written into the output buffer.</returns>
        </member>
        <member name="M:Noemax.Compression.ICompressionEncoder.Reset">
            <summary>
            Resets encoder state.
            </summary>
        </member>
        <member name="T:Noemax.Compression.ICompressionDecoder">
            <summary>
            Defines the interface of the compression algorithm decoder.
            </summary>
            <remarks>
            ICompressionDecoder is a low-level programming interface that provides direct control over the input and output 
            buffers used by the compression method. Using this interface for in-memory compression avoids the extra overhead, 
            in terms of both memory consumption and memory copy operations, that is being imposed by using compressed streams.
            </remarks>
        </member>
        <member name="M:Noemax.Compression.ICompressionDecoder.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads compressed bytes from the specified input buffer and writes decompressed bytes into the specified output buffer.
            </summary>        
            <param name="input">The input buffer from which to read the bytes to decompress.</param>
            <param name="inputOffset">The offset in the input buffer at which to start reading the bytes to decompress.</param> 
            <param name="inputCount">The number of bytes to read from the input buffer.</param>
            <param name="output">The output buffer into which to write the decompressed bytes.</param>
            <param name="outputOffset">The offset in the output buffer at which to start writing the decompressed bytes.</param> 
            <param name="maxOutputCount">The maximum number of decompressed bytes to write into the output buffer.</param> 
            <param name="inputUsed">Returns the number of bytes read from the input buffer.</param>
            <returns>The number of the decompressed bytes written into the output buffer.</returns>
            <remarks>
            <para>
            When Decode is called, the decoder consumes bytes from the input buffer and returns the number of bytes consumed in the inputUsed 
            parameter and the number of compressed bytes produced in the return value.
            </para>
            <para>
            Depending on the compression algorithm, a minimal amount of output buffer space might be required for decompressed bytes to be 
            produced. When the output buffer space is insufficient for the decoder to produce any amount of decompressed bytes, it consumes 
            input until its internal buffer is full but does not produce any output. Eventually both the returned inputUsed and the return
            value of Decode become 0, despite the provided <paramref name="inputCount"/> being greater than 0. This indicates that 
            <paramref name="maxOutputCount"/> is too low for the decoder to operate and a larger output buffer space must be provided.
            </para>     
            </remarks>
        </member>
        <member name="M:Noemax.Compression.ICompressionDecoder.Reset">
            <summary>
            Resets decoder state.
            </summary>
        </member>
        <member name="T:Noemax.Compression.DeflateCompression">
            <summary>
            Provides DEFLATE compression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.Compression.DeflateCompression"/>.
            </summary>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.CreateEncoder(System.Int32)">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionEncoder"/> implementation providing the compression method.
            </summary>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>
            The ICompressionEncoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.CreateDecoder">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionDecoder"/> implementation associated to this compression method.
            </summary>
            <returns>
            The ICompressionDecoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of DeflateSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.DeflateCompression.Name">
            <summary>
            Gets the name of the compression format 'DEFLATE'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.DeflateSettings">
            <summary>
            Contains configuration properties for the DEFLATE compression method. 
            </summary>
        </member>
        <member name="P:Noemax.Compression.DeflateSettings.WindowBits">
            <summary>
            Gets and sets the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </summary>
        </member>
        <member name="P:Noemax.Compression.DeflateSettings.MemLevel">
            <summary>
            Gets and sets the memory level setting to be used when compressing. It may be set to an integer from 8 to 15.
            </summary>
        </member>
        <member name="P:Noemax.Compression.DeflateSettings.ForceBuffering">
            <summary>
            Gets and sets whether read operation must not complete until a requested amount of bytes is decompressed; 
            If set to False operation completes as soon as any amount of decompressed bytes available. Default value is True.        
            </summary>   
        </member>
        <member name="T:Noemax.Compression.DeflateCompressionHp">
            <summary>
            Provides DEFLATE compression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.DeflateCompressionHp.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompressionHp.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompressionHp.CreateDecoder">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionDecoder"/> implementation associated to this compression method.
            </summary>
            <returns>
            The ICompressionDecoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompressionHp.CreateEncoder(System.Int32)">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionEncoder"/> implementation providing the compression method.
            </summary>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>
            The ICompressionEncoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompressionHp.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of DeflateSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.DeflateCompressionHp.Name">
            <summary>
            Gets the name of the compression format 'DEFLATE-HP'.
            </summary>
        </member>
        <member name="T:Noemax.IO.FileResourceFactory">
            <summary>
            The factory creating the <see cref="T:Noemax.IO.FileResource"/> from the packaged stream.
            </summary>
        </member>
        <member name="T:Noemax.IO.IResourceFactory">
            <summary>
            The interface of the factory that detects the type of resource in the packaged stream and initializes 
            the instance of <see cref="T:Noemax.IO.PackagedResource"/> of corresponding type.
            </summary>    
        </member>
        <member name="M:Noemax.IO.IResourceFactory.CanCreateResource(Noemax.PackagedStream)">
            <summary>
            Checks whether the specified packaged stream can be represented as a resource by the factory.
            </summary>
            <param name="stream">The packaged stream from which the resource is to be initialized.</param>
            <returns>true if factory can initialize a resource from the packaged stream; false otherwise.</returns>
        </member>
        <member name="M:Noemax.IO.IResourceFactory.CreateResource(Noemax.PackagedStream)">
            <summary>
            Initialize a instance of PackagedResource representing the specified PackagedStream.
            </summary>
            <param name="stream">The <see cref="T:Noemax.PackagedStream"/> to represent as an instance of <see cref="T:Noemax.IO.PackagedResource"/>.</param>
            <returns>The packaged resource instance representing the packaged stream.</returns>
        </member>
        <member name="M:Noemax.IO.FileResourceFactory.CanCreateResource(Noemax.PackagedStream)">
            <summary>
            Checks whether the specified packaged stream can be represented as FileResource.
            </summary>
            <param name="stream">The packaged stream from which resource is to be initialized.</param>
            <returns>True if packaged stream can be represented as <see cref="T:Noemax.IO.FileResource"/>.</returns>
        </member>
        <member name="M:Noemax.IO.FileResourceFactory.CreateResource(Noemax.PackagedStream)">
            <summary>
            Initializes the instance of <see cref="T:Noemax.IO.FileResource"/> from the specified packaged stream.
            </summary>
            <param name="stream">The packaged stream from which to initialize the <see cref="T:Noemax.IO.FileResource"/>.</param>
            <returns>The instance of <see cref="T:Noemax.IO.FileResource"/> initialized from the packaged stream.</returns>
        </member>
        <member name="T:Noemax.IO.FileResource">
            <summary>
            The resource representing the packaged file that can restored to local file system.
            </summary>    
        </member>
        <member name="T:Noemax.IO.PackagedResource">
            <summary>
            Provides methods and properties for managing the packaged resource.
            </summary>
        </member>
        <member name="M:Noemax.IO.PackagedResource.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.IO.PackagedResource"/>.
            </summary>
        </member>
        <member name="M:Noemax.IO.PackagedResource.#ctor(Noemax.PackagedStream)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.IO.PackagedResource"/>.
            </summary>
            <param name="stream">
            The stream to read the packaged resource.
            </param>
        </member>
        <member name="M:Noemax.IO.PackagedResource.GetStream">
            <summary>
            Returns the stream for reading the resource content.
            </summary>
            <returns>The stream for reading the resource content.</returns>
        </member>
        <member name="M:Noemax.IO.PackagedResource.GetMetadata">
            <summary>
            Returns a binary metadata associated to the resource.
            </summary>
            <returns>The segment of byte array containing the metadata to be packaged along with resource.</returns>
        </member>
        <member name="M:Noemax.IO.PackagedResource.SaveTo(System.IO.Stream)">
            <summary>
            Saves the content of resource into the specified stream.
            </summary>
            <param name="output">The stream to which to save the content of resource.</param>
        </member>
        <member name="M:Noemax.IO.PackagedResource.SaveTo(System.IO.Stream,Noemax.IO.ProgressCallback)">
            <summary>
            Saves the content of resource into the specified stream.
            </summary>
            <param name="output">The stream to which to save the content of resource.</param>
            <param name="callback">The callback to call was the operation progress.</param>
        </member>
        <member name="M:Noemax.IO.PackagedResource.AddChildResource(Noemax.IO.PackagedResource)">
            <summary>
            Adds a child resource to the resource.
            </summary>
            <param name="resource">The child resource to add to the resource.</param>
        </member>
        <member name="M:Noemax.IO.PackagedResource.OnPackageContent(System.IO.Stream)">
            <summary/>
        </member>
        <member name="M:Noemax.IO.PackagedResource.OnExportContent(System.IO.Stream)">
            <summary/>
        </member>
        <member name="M:Noemax.IO.PackagedResource.OnOpenSource">
            <summary>
            When implemented returns the stream to save into the packaged.
            </summary>
            <returns>The stream from which to read the resource content.</returns>
            <remarks>
            For example the FileResource returns the stream for reading the file from the file system. <see cref="T:Noemax.IO.PackageWriter"/>
            will read the content of the stream and packaged it withing the package.
            </remarks> 
        </member>
        <member name="M:Noemax.IO.PackagedResource.OnOpenPackagedStream(Noemax.PackagedStream)">
            <summary>
            Returns the stream to read the content of the resource from the package.
            </summary>
            <param name="stream">The packaged stream from which to read resource.</param>
            <returns>The stream to read the resource.</returns>
        </member>
        <member name="M:Noemax.IO.PackagedResource.OnParseResourceMetadata(System.IO.Stream)">
            <summary>
            When overridden parses the resource metadata from the stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Noemax.IO.PackagedResource.OnWriteResourceMetadata(System.IO.Stream)">
            <summary>
            When overridden writes the resource metadata from the stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Noemax.IO.PackagedResource.ResourceId">
            <summary>
            Gets the number identifying resource in the package.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagedResource.ParentResourceId">
            <summary>
            Gets the number identifying the parent resource in the package.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagedResource.ResourceUri">
            <summary>
            Gets and sets URI that identifies the resource in the package that can be use in addition to the ResourceID integer.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagedResource.ContentType">
            <summary>
            The string identifying the type of resource.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagedResource.ResourceLength">
            <summary>
            The length of resource in bytes or -1 if length is unknown.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagedResource.IsLengthKnown">
            <summary>
            Gets whether the final length of resource content is known.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagedResource.Compression">
            <summary>
            The compression to be applied on resource when packaging.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagedResource.CompressionLevel">
            <summary>
            The compression level from 1-9 to be applied in case when compression is used.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagedResource.ChildResources">
            <summary>
            Gets a list of child resources associated to the resource.
            </summary>
        </member>
        <member name="M:Noemax.IO.FileResource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.IO.FileResource"/> class.
            </summary>
        </member>
        <member name="M:Noemax.IO.FileResource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.IO.FileResource"/> class.
            </summary>
            <param name="localPath">The path to the file in local file system.</param>
            <param name="pathInPackage">The path to be stored in the package.</param>
        </member>
        <member name="M:Noemax.IO.FileResource.#ctor(Noemax.PackagedStream)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.IO.FileResource"/> from the packaged stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Noemax.IO.FileResource.SaveToFile(System.String)">
            <summary>
            Saves the content of packaged file to the path on the local file system.
            </summary>
            <param name="path">The path to the file where to save the content of the packaged stream.</param>
        </member>
        <member name="M:Noemax.IO.FileResource.OnWriteResourceMetadata(System.IO.Stream)">
            <summary>
            Writes file metadata into the metadata part of the stream.
            </summary>
            <param name="stream">The stream to write the file resource metadata.</param>
        </member>
        <member name="M:Noemax.IO.FileResource.OnParseResourceMetadata(System.IO.Stream)">
            <summary>
            Parse file metadata from the metadata part of the stream.
            </summary>
            <param name="stream">The stream to read the file resource metadata.</param>
        </member>
        <member name="M:Noemax.IO.FileResource.OnOpenSource">
            <summary>
            Opens the file from the local file system in case when resource is being written by pumping bytes from already existing file.
            </summary>
            <returns>The stream to read the file from the local file system.</returns>
        </member>
        <member name="P:Noemax.IO.FileResource.IsLengthKnown">
            <summary>
            Gets whether the length of the packaged file is known.
            </summary>
        </member>
        <member name="P:Noemax.IO.FileResource.ResourceLength">
            <summary>
            Gets the length of the the packaged file.
            </summary>
        </member>
        <member name="P:Noemax.IO.FileResource.ContentType">
            <summary>
            Gets the string identifying the type of the resource.
            </summary>
        </member>
        <member name="P:Noemax.IO.FileResource.PathInPackage">
            <summary>
            Gets and sets the path of the file in the packaged.
            </summary>
        </member>
        <member name="P:Noemax.IO.FileResource.LocalPath">
            <summary>
            Gets and sets the path to the file in local file system.
            </summary>
        </member>
        <member name="P:Noemax.IO.FileResource.CreationTime">
            <summary>
            Gets the creation time of the file.
            </summary>
        </member>
        <member name="P:Noemax.IO.FileResource.ModifiedTime">
            <summary>
            Gets the time when file was last modified.
            </summary>
        </member>
        <member name="T:Noemax.IO.FragmentedFileResource">
            <summary>
            The resource representing the packaged file which is stored in multiple fragments.
            </summary>
            <remark>    
            <para>
            Using this class for packaging files is is beneficial when file are large and need to be compressed. This file resource type allows to devote more 
            than one thread to compressing the file. The file will be stored as a group of related resources rather than single resource and combined into a 
            single resource when unpackaged.
            </para>
            <para>
            Each fragment produced by the FragmentedFileResource is compressed separately, the number of fragments that are packaged concurrently depends 
            on the number of threads specified when calling the <see cref="M:Noemax.IO.Package.Save(System.String,System.Int32,Noemax.IO.ProgressCallback)"/> method.
            </para>
            </remark>
        </member>
        <member name="M:Noemax.IO.FragmentedFileResource.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.IO.FragmentedFileResource"/> from the specified file.
            </summary>
            <param name="file">The file to package as a fragmented file resource.</param>
            <param name="fragmentSize">The size of the fragments to produce.</param>
        </member>
        <member name="M:Noemax.IO.FragmentedFileResource.#ctor(Noemax.PackagedStream)">
            <summary>
            Used internally for creating the instance of <see cref="T:Noemax.IO.FragmentedFileResource"/> from the packaged stream.
            </summary>
            <param name="stream">The packaged stream to read the resource from.</param>
        </member>
        <member name="M:Noemax.IO.FragmentedFileResource.AddChildResource(Noemax.IO.PackagedResource)">
            <summary>
            Used internally by <see cref="T:Noemax.IO.Package"/> to add fragments when they are discovered in the package.
            </summary>
            <param name="resource">The resource being added to the package.</param>
        </member>
        <member name="M:Noemax.IO.FragmentedFileResource.CreateFragment(Noemax.PackagedStream)">
            <summary/>
        </member>
        <member name="M:Noemax.IO.FragmentedFileResource.OnPackageContent(System.IO.Stream)">
            <summary>
            Packages the content of the resources into the specified stream.
            </summary>
            <param name="output">The stream where to save the packaged resource.</param>
        </member>
        <member name="M:Noemax.IO.FragmentedFileResource.OnOpenPackagedStream(Noemax.PackagedStream)">
            <summary>
            Processes the packaged resource and returns the stream for reading the resource from the package.
            </summary>
            <param name="stream">The packaged stream to read the resource from.</param>
            <returns></returns>
        </member>
        <member name="M:Noemax.IO.FragmentedFileResource.OnOpenSource">
            <summary>
            Opens external location of the resources.
            </summary>
            <returns>The stream from reading external resource.</returns>
        </member>
        <member name="P:Noemax.IO.FragmentedFileResource.ContentType">
            <summary>
            Gets 'fragmented-file' string as resource type.
            </summary>
        </member>
        <member name="P:Noemax.IO.FragmentedFileResource.ChildResources">
            <summary>
            The list of the fragment resources produced when packaging the file.
            </summary>
        </member>
        <member name="T:Noemax.Compression.GZipSettings">
            <summary>
            Contains configuration properties for the GZIP compression method. 
            </summary>
        </member>
        <member name="P:Noemax.Compression.GZipSettings.CheckCrc">
            <summary>
            If set to true CRC check is performed which reaching the end of the compressed stream.
            </summary>        
        </member>
        <member name="P:Noemax.Compression.GZipSettings.CheckLength">
            <summary>
            If set to true the length of the decompressed data is checked when reaching the end of the compressed stream.
            </summary>
        </member>
        <member name="T:Noemax.Compression.GZipCompression">
            <summary>
            Provides GZIP compression. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.GZipCompression.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.GZipCompression.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.GZipCompression.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of GZipSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.GZipCompression.Name">
            <summary>
            Gets the name of the compression format 'GZIP'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.GZipCompressionHp">
            <summary>
            Provides GZIP compression. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.GZipCompressionHp.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.GZipCompressionHp.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.GZipCompressionHp.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of GZipSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.GZipCompressionHp.Name">
            <summary>
            Gets the name of the compression format 'GZIP-HP'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.Lzf4Compression">
            <summary>
            Provides LZF4 compression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.Lzf4Compression.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.Lzf4Compression.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.Lzf4Compression.CreateDecoder">
            <summary>
            Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Noemax.Compression.Lzf4Compression.CreateEncoder(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Noemax.Compression.Lzf4Compression.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of Lzf4Settings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.Lzf4Compression.Name">
            <summary>
            Gets the name of the compression format 'LZF4'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.Lzf4Settings">
            <summary>
            Contains configuration properties for the LZF4 compression method. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.Lzf4Settings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Compression.Lzf4Settings"/> class.
            </summary>
        </member>
        <member name="P:Noemax.Compression.Lzf4Settings.OutputBufferSize">
            <summary>
            The size of the internal buffer to be used by encoder. Default value is 81920 bytes.
            </summary>
        </member>
        <member name="P:Noemax.Compression.Lzf4Settings.InputBufferSize">
            <summary>
            The size of the internal buffer to be used by decoder. Default value is 81920 bytes.
            </summary>
        </member>
        <member name="P:Noemax.Compression.Lzf4Settings.ForceBuffering">
            <summary>
            Gets and sets whether read operation must not complete until a requested amount of bytes is decompressed; 
            If set to False operation completes as soon as any amount of decompressed bytes available. Default value is True.        
            </summary>        
        </member>
        <member name="T:Noemax.Compression.Lzf4CompressionHp">
            <summary>
            Provides LZF4 compression. 
            </summary>
        </member>
        <member name="P:Noemax.Compression.Lzf4CompressionHp.Name">
            <summary>
            Gets the name of the compression format 'LZF4-HP'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.LzmaSettings">
            <summary>
            Contains configuration properties for the GZIP compression method. 
            </summary>
        </member>
        <member name="P:Noemax.Compression.LzmaSettings.LzmaFileHeader">
            <summary>
            Gets and sets whether LZMA encoder should include the file header into the produced stream 
            and whether LZMA decoder should expect the file header to be present at the begin of the input stream.
            </summary>
        </member>
        <member name="T:Noemax.Compression.LzmaCompression">
            <summary>
            Provides LZMA compression. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.LzmaCompression.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.LzmaCompression.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.LzmaCompression.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of LzmaSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.LzmaCompression.Name">
            <summary>
            Gets the name of the compression format 'LZMA'.
            </summary>
        </member>
        <member name="T:Noemax.IO.Package">
            <summary>
            Provides methods and properties for packaging resources into the stream.
            </summary>
        </member>
        <member name="M:Noemax.IO.Package.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.IO.Package"/> class.
            </summary>
        </member>
        <member name="M:Noemax.IO.Package.AddResourceFactory(Noemax.IO.IResourceFactory)">
            <summary>
            Add the resource factory implementation to the packages list of resource factories.
            </summary>
            <param name="factory">The resource factory implementation to add to the list of resource factories.</param>
        </member>
        <member name="M:Noemax.IO.Package.Read(System.IO.Stream)">
            <summary>
            Reads the package from the specified stream.
            </summary>
            <param name="input">A stream to read the package from.</param>
        </member>
        <member name="M:Noemax.IO.Package.Read(System.String)">
            <summary>
            Reads the package from the specified file.
            </summary>
            <param name="file">A path to the file to read the package from.</param>
        </member>
        <member name="M:Noemax.IO.Package.Save(System.String)">
            <summary>
            Saves the package into the specified file.
            </summary>
            <param name="file">The file to save the package to.</param>
        </member>
        <member name="M:Noemax.IO.Package.Save(System.String,System.Int32,Noemax.IO.ProgressCallback)">
            <summary>
            Saves the package into the specified stream using not more than specified number of threads.
            </summary>
            <param name="file">The path to the file where to save the resources.</param>
            <param name="maxThreads">The maximum number of threads to be used for packaging resources.</param>
            <param name="callback">The delegate to call for updating the progress.</param>
        </member>
        <member name="M:Noemax.IO.Package.Save(System.IO.Stream,System.Int32,Noemax.IO.ProgressCallback)">
            <summary>
            Saves the package into the specified stream using not more than specified number of threads.
            </summary>
            <param name="output">The stream into which to save the resources.</param>
            <param name="maxThreads">The maximum number of threads to be used for packaging resources.</param>
            <param name="callback">The delegate to call for updating the progress.</param>
        </member>
        <member name="M:Noemax.IO.Package.Clear">
            <summary>
            Removes all resources from the package and release all associated resources.
            </summary>
        </member>
        <member name="M:Noemax.IO.Package.Close">
            <summary>
            Removes all resources from the package and release all associated resources.
            </summary>
        </member>
        <member name="P:Noemax.IO.Package.Resources">
            <summary>
            Gets the collection of the resources that are part of the package.
            </summary>
        </member>
        <member name="E:Noemax.IO.Package.LoadResource">
            <summary>
            Provides an event triggered when a packaged resource is being loaded.
            </summary>
        </member>
        <member name="T:Noemax.IO.LoadPackagedResourceEventArgs">
            <summary>
            Represents an event when a packaged resource is being loaded.
            </summary>
        </member>
        <member name="M:Noemax.IO.LoadPackagedResourceEventArgs.#ctor(Noemax.PackagedStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.IO.LoadPackagedResourceEventArgs"/> class.
            </summary>
            <param name="stream">The packaged stream from which resource is being loaded.</param>
        </member>
        <member name="P:Noemax.IO.LoadPackagedResourceEventArgs.PackagedStream">
            <summary>
            The packaged stream from which resource is being loaded.
            </summary>
        </member>
        <member name="P:Noemax.IO.LoadPackagedResourceEventArgs.PackagedResource">
            <summary>
            Gets and sets the packaged resource being deserialized.
            </summary>
        </member>
        <member name="T:Noemax.IO.ProgressCallback">
            <summary>
            Reference the method to be called when a packaging or un-packaging operation makes progress.
            </summary>
            <param name="sender">The reader or the writer performing the operation.</param>
            <param name="progress">The object containing the information about the progress made by the operation.</param>
        </member>
        <member name="T:Noemax.IO.PackagedResourceCollection">
            <summary>
            Provides methods and properties for accessing a collection of packaged resources.
            </summary>
        </member>
        <member name="M:Noemax.IO.PackagedResourceCollection.Add(Noemax.IO.PackagedResource)">
            <summary>
            Adds the resource to the collection.
            </summary>
            <param name="item">The resource to add to the collection.</param>
        </member>
        <member name="M:Noemax.IO.PackagedResourceCollection.Clear">
            <summary>
            Clears the list of the resources in the collection.
            </summary>
        </member>
        <member name="M:Noemax.IO.PackagedResourceCollection.Contains(Noemax.IO.PackagedResource)">
            <summary>
            Checks whether the specified resource is present in the collection.
            </summary>
            <param name="item">The resource to search in the collection.</param>
            <returns>True if specified resource is present in the collection; False otherwise. </returns>
        </member>
        <member name="M:Noemax.IO.PackagedResourceCollection.CopyTo(Noemax.IO.PackagedResource[],System.Int32)">
            <summary>
            Copies the list of packaged resources into array.
            </summary>
            <param name="array">The array where to copy the list of packaged resources.</param>
            <param name="arrayIndex">The index where to store the first packaged resource.</param>
        </member>
        <member name="M:Noemax.IO.PackagedResourceCollection.Remove(Noemax.IO.PackagedResource)">
            <summary>
            Remotes the packaged resource from collection.
            </summary>
            <param name="item">The packaged resource to remove from collection.</param>
            <returns>True if packaged resource was found in collection and remove; False otherwise.</returns>
        </member>
        <member name="M:Noemax.IO.PackagedResourceCollection.GetEnumerator">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerator`1"/> for enumerating the packaged resources from this collection.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerator`1"/> for enumerating the packaged resources from this collection.</returns>
        </member>
        <member name="P:Noemax.IO.PackagedResourceCollection.Item(System.String)">
            <summary>
            Gets the resource with specified resource URI from the package.
            </summary>
            <param name="resourceUri">The URI of the resource to look up in the package.</param>
            <returns>The resource with specified resource URI or Null if resource was not found.</returns>
        </member>
        <member name="P:Noemax.IO.PackagedResourceCollection.Item(System.Int64)">
            <summary>
            Gets the resource with specified resource ID from the package.
            </summary>
            <param name="resourceId">The integer ID of the resource to look up in the package.</param>
            <returns>The resource with specified resource ID or Null if resource was not found.</returns>
        </member>
        <member name="P:Noemax.IO.PackagedResourceCollection.Count">
            <summary>
            Gets the number of packaged resources in collection.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagedResourceCollection.IsReadOnly">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="T:Noemax.IO.PackagingProgress">
            <summary>
            Provides properties that reflect the progress of the resource packaging operation.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagingProgress.Resource">
            <summary>
            The resource being packaged.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagingProgress.ResourceSize">
            <summary>
            The size of the resource in bytes.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagingProgress.BytesProcessed">
            <summary>
            The number of bytes already processed.
            </summary>
        </member>
        <member name="P:Noemax.IO.PackagingProgress.BytesProduced">
            <summary>
            The number of bytes that was produced as result of the operation (in case of compression it's not the same as resource size).
            </summary>
        </member>
        <member name="T:Noemax.Compression.ZlibCompression">
            <summary>
            Provides ZLIB compression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.ZlibCompression.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.ZlibCompression.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.ZlibCompression.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of DeflateSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.ZlibCompression.Name">
            <summary>
            Gets the name of the compression format 'ZLIB'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.ZlibCompressionHp">
            <summary>
            Provides ZLIB compression. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.ZlibCompressionHp.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.ZlibCompressionHp.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.ZlibCompressionHp.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of DeflateSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.ZlibCompressionHp.Name">
            <summary>
            Gets the name of the compression format 'ZLIB-HP'.
            </summary>
        </member>
    </members>
</doc>
