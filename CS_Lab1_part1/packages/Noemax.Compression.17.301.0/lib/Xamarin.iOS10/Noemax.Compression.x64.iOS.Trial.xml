<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Noemax.WebSockets.x64.iOS.Trial</name>
    </assembly>
    <members>
        <member name="T:Noemax.Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.SetToken(Noemax.Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.SetToken(Noemax.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Noemax.Newtonsoft.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when reading JSON.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>
            Get or set how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Noemax.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            The Read method has not been called.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            The Close method has been called.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            Reader in a constructor.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            Changes the <see cref="T:Noemax.Newtonsoft.Json.JsonReader.State"/> to Closed.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteToken(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> token and its children.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteToken(Noemax.Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteEnd(Noemax.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriter.SetWriteState(Noemax.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the JsonWriter,
            </summary>
            <param name="token">The JsonToken being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the writer is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the writer is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when writing JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>
            Get or set how DateTime and DateTimeOffset values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Noemax.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified"/> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Noemax.Newtonsoft.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConverter.GetSchema">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.
            </summary>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.</returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            Create a custom object
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
            <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.ExpandoObjectConverter">
            <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.RegexConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.RegexConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed.
            </summary>
            <value><c>true</c> if integers are allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. "1.2.3.4").
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.VersionConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.VersionConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>
            Converts XML to and from JSON.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Noemax.Newtonsoft.Json.JsonWriter,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Noemax.Newtonsoft.Json.JsonReader,System.Type,System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
            <value>The name of the deserialize root element.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value><c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value><c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Noemax.Newtonsoft.Json.DateParseHandling.DateTime"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Noemax.Newtonsoft.Json.DateParseHandling.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime"/> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime"/> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime"/> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime"/>, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class"/>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example"/>
            </example>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the property.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/> with <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double"/> property, null for a <see cref="T:System.Nullable`1"/> property.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:Noemax.Newtonsoft.Json.FloatParseHandling.Double"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:Noemax.Newtonsoft.Json.FloatParseHandling.Decimal"/>.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Noemax.Newtonsoft.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Noemax.Newtonsoft.Json.JsonTextWriter.Indentation"/> and <see cref="P:Noemax.Newtonsoft.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonConvert">
            <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Noemax.Newtonsoft.Json.DateFormatHandling,Noemax.Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation using the <see cref="T:Noemax.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Noemax.Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation using the <see cref="T:Noemax.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Noemax.Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Noemax.Newtonsoft.Json.Formatting,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Noemax.Newtonsoft.Json.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Noemax.Newtonsoft.Json.Formatting,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Noemax.Newtonsoft.Json.Formatting,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Noemax.Newtonsoft.Json.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
            <summary>
            Asynchronously serializes the specified object to a JSON string.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Noemax.Newtonsoft.Json.Formatting)">
            <summary>
            Asynchronously serializes the specified object to a JSON string using formatting.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Noemax.Newtonsoft.Json.Formatting,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/>.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            Deserialization will happen on a new thread.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            Deserialization will happen on a new thread.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously populates the object with values from the JSON string using <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>
            A task that represents the asynchronous populate operation.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Noemax.Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the XML node to a JSON string using formatting.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Noemax.Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the XML node to a JSON string using formatting and omits the root object if <paramref name="omitRootObject"/> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>
            and writes a .NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Noemax.Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string using formatting.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Noemax.Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject"/> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>
            and writes a .NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            Default settings are automatically used by serialization methods on <see cref="T:Noemax.Newtonsoft.Json.JsonConvert"/>,
            and <see cref="M:Noemax.Newtonsoft.Json.Linq.JToken.ToObject``1"/> and <see cref="M:Noemax.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)"/> on <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            To serialize without using any default settings create a <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> with
            <see cref="M:Noemax.Newtonsoft.Json.JsonSerializer.Create"/>.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> to use the specified <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the converter.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the type of the converter.
            </summary>
            <value>The type of the converter.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonDictionaryAttribute"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonDictionaryAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonException"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonExtensionDataAttribute"/> class.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonObjectAttribute.#ctor(Noemax.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> will not use default settings.
            </summary>
            <returns>
            A new <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> will not use default settings.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Create(Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> will not use default settings.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> will not use default settings.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> will use default settings.
            </summary>
            <returns>
            A new <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> will use default settings.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.CreateDefault(Noemax.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> will use default settings.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> will use default settings.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Populate(Noemax.Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Deserialize(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Deserialize``1(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Deserialize(Noemax.Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Serialize(Noemax.Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Noemax.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Noemax.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializer.Serialize(Noemax.Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="E:Noemax.Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>
            Get or set how DateTime and DateTimeOffset values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Noemax.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a collection <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Get or set how DateTime and DateTimeOffset values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Noemax.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteEnd(Noemax.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Noemax.Newtonsoft.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="T:Noemax.Newtonsoft.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> if a <see cref="M:Noemax.Newtonsoft.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonValidatingReader">
            <summary>
            Represents a reader that provides <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> validation.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonValidatingReader.#ctor(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonValidatingReader"/> class that
            validates the content returned from the given <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> to read from while validating.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="E:Noemax.Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value></value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> used to construct this <see cref="T:Noemax.Newtonsoft.Json.JsonValidatingReader"/>.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the ancestors of every node in the source collection.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Noemax.Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the descendants of every node in the source collection.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Noemax.Newtonsoft.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Noemax.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Noemax.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Noemax.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Noemax.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Noemax.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Noemax.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Noemax.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Noemax.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Noemax.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Noemax.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.DeepEquals(Noemax.Newtonsoft.Json.Linq.JToken,Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>true if the tokens are equal; otherwise false.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.Replace(Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.WriteTo(Noemax.Newtonsoft.Json.JsonWriter,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.ToString(Noemax.Newtonsoft.Json.Formatting,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte[]"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Explicit(Noemax.Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System._uri"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Noemax.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            Creates an <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> for this token.
            </summary>
            <returns>An <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> from an object using the specified <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates the specified .NET type from the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.ToObject``1(Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.ReadFrom(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.Load(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>, or null.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected elements.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected elements.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:Noemax.Newtonsoft.Json.Linq.JContainer.AddingNew"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Noemax.Newtonsoft.Json.Linq.JContainer.ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Noemax.Newtonsoft.Json.Linq.JContainer.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the descendant tokens of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>An <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="E:Noemax.Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:Noemax.Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="E:Noemax.Newtonsoft.Json.Linq.JContainer.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens</value>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.#ctor(Noemax.Newtonsoft.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> class from another <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.Load(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text"/>
            </example>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.WriteTo(Noemax.Newtonsoft.Json.JsonWriter,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.IndexOf(Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.Add(Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.Contains(Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.CopyTo(Noemax.Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JArray.Remove(Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JConstructor.#ctor(Noemax.Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JConstructor"/> class from another <see cref="T:Noemax.Newtonsoft.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:Noemax.Newtonsoft.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JConstructor.WriteTo(Noemax.Newtonsoft.Json.JsonWriter,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JConstructor.Load(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Noemax.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.#ctor(Noemax.Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> class from another <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/> with the specified name or null.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets an <see cref="T:Noemax.Newtonsoft.Json.Linq.JEnumerable`1"/> of this object's property values.
            </summary>
            <returns>An <see cref="T:Noemax.Newtonsoft.Json.Linq.JEnumerable`1"/> of this object's property values.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.Load(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text"/>
            </example>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Noemax.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.WriteTo(Noemax.Newtonsoft.Json.JsonWriter,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Noemax.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.Add(System.String,Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>true if item was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Noemax.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Noemax.Newtonsoft.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Noemax.Newtonsoft.Json.Linq.JObject.PropertyChanging"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor"/> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object"/> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Noemax.Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Noemax.Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JProperty.#ctor(Noemax.Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/> class from another <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JProperty.WriteTo(Noemax.Newtonsoft.Json.JsonWriter,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JProperty.Load(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:Noemax.Newtonsoft.Json.Linq.JProperty"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
            <param name="component">The component to test for reset capability. 
            </param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value. 
                            </param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set. 
                            </param><param name="value">The new value. 
                            </param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
            <param name="component">The component with the property to be examined for persistence. 
                            </param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
            true if the property is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value></value>
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(Noemax.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class from another <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.WriteTo(Noemax.Newtonsoft.Json.JsonWriter,Noemax.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.Equals(Noemax.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JValue.CompareTo(Noemax.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JRaw.#ctor(Noemax.Newtonsoft.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JRaw"/> class from another <see cref="T:Noemax.Newtonsoft.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:Noemax.Newtonsoft.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JRaw.Create(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Noemax.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Noemax.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Noemax.Newtonsoft.Json.Linq.JToken,Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenReader.#ctor(Noemax.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            A _uri value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.#ctor(Noemax.Newtonsoft.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:Noemax.Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Noemax.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Noemax.Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            Only members must be marked with <see cref="T:Noemax.Newtonsoft.Json.JsonPropertyAttribute"/> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Noemax.Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute"/>
            and setting IgnoreSerializableAttribute on <see cref="T:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver"/> to false.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Noemax.Newtonsoft.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class"/>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example"/>
            </example>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References"/>       
            </example>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Noemax.Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Schema.Extensions">
            <summary>
            Contains the JSON schema extension methods.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.Extensions.IsValid(Noemax.Newtonsoft.Json.Linq.JToken,Noemax.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            Determines whether the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.Extensions.IsValid(Noemax.Newtonsoft.Json.Linq.JToken,Noemax.Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Determines whether the <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.Extensions.Validate(Noemax.Newtonsoft.Json.Linq.JToken,Noemax.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            Validates the specified <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.Extensions.Validate(Noemax.Newtonsoft.Json.Linq.JToken,Noemax.Newtonsoft.Json.Schema.JsonSchema,Noemax.Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            Validates the specified <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:Noemax.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            An in-memory representation of a JSON Schema.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchema.Read(Noemax.Newtonsoft.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchema.Read(Noemax.Newtonsoft.Json.JsonReader,Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Noemax.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains schema JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchema.WriteTo(Noemax.Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchema.WriteTo(Noemax.Newtonsoft.Json.JsonWriter,Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> using the specified <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read only.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
            <value>A number that the value should be divisble by.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> instance at their array position from <see cref="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Items"/>.
            </summary>
            <value>
            	<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
            	<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallow types.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            Returns detailed information about the schema exception.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            Generates a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from a specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            Resolves <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> from an id.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.</returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            The value types allowed by the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaGenerator"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            Returns detailed information related to the <see cref="T:Noemax.Newtonsoft.Json.Schema.ValidationEventHandler"/>.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Schema.JsonSchemaException"/> associated with the validation error.
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation error.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Noemax.Newtonsoft.Json.Schema.ValidationEventArgs"/>.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> to resolves a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> to resolves a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class"/>
              <code lang="cs" source="..\Src\Noemax.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example"/>
            </example>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
            <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Noemax.Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Noemax.Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonISerializableContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonISerializableContract"/> for the given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Noemax.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Noemax.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Noemax.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Noemax.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Noemax.Newtonsoft.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute"/> attribute when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.SerializableAttribute"/> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The property name camel cased.</returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the sepecified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object. </param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object. </param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Noemax.Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.ExpressionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.ExpressionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
            <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
            <value>The method called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
            <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
            <value>The method called during deserialization of the object.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
            <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
            <value>The method called after serialization of the object graph.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
            <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
            <value>The method called before serialization of the object.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.OnError">
            <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The method called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonContainerContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonDynamicContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonISerializableContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
            <value>The ISerializable object constructor.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
            <value>The override constructor.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
            <value>The parametrized constructor.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Noemax.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:Noemax.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Noemax.Newtonsoft.Json.JsonConverter"/> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
            <value>A predicate used to determine whether the property should be serialize.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Noemax.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Noemax.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.MemoryTraceWriter"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String"/> of the most recent trace messages.
            </returns>
        </member>
        <member name="P:Noemax.Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Newtonsoft.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Serialization.FlexibleSerializationBinder">
            <summary>
            Alternative serialization binder used for resolving the classes from type name and assemly name. 
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.FlexibleSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            Resolves the assembly name and type name to the type. 
            </summary>
            <param name="assemblyName">The name of assembly containing the type. Can be String.Empty.</param>
            <param name="typeName">The full name of the type.</param>
            <returns>The type resolved from its name and name of assembly.</returns>
            <remarks>
            In cases when name of assembly is ommited or when the specified assembly cannot be found, attempts to load
            the type from the currently executing assembly.
            </remarks> 
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.FlexibleSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            Resolves the assembly name and the type name from the specified type.
            </summary>
            <param name="serializedType">The type whos assembly name and the type name is to be returned.</param>
            <param name="assemblyName">The assembly name associated to the type.</param>
            <param name="typeName">The full type name of the type.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Serialization.FlexibleSerializationBinder.RegisterType(System.Type)">
            <summary>
            Registers type with the serialization binder so that it can be resolved faster from the type name.
            </summary>
            <param name="type">The type being registered.</param>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="list">A sequence in which to locate a value.</param>
            <param name="value">The object to locate in the sequence</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Noemax.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Noemax.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Noemax.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Noemax.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <param name="enumType">The enum type to get names and values for.</param>
            <returns></returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Noemax.Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="T:Noemax.Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Noemax.Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Noemax.Newtonsoft.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Noemax.Newtonsoft.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Noemax.Newtonsoft.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:Noemax.Compression.CompressionFactory">
            <summary>
            Provides a unified programming interface for using compression methods.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.TryCreateDeflateHp">
            <summary>
            Gets instance providing DEFLATE compression and decompression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.TryCreateZlibHp">
            <summary>
            Gets instance providing ZLIB compression and decompression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.TryCreateGZipHp">
            <summary>
            Gets instance providing GZIP compression and decompression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.TryCreateLzf4Hp">
            <summary>
            Gets instance providing LZF4 compression and decompression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateDeflate">
            <summary>
            Creates a new compression factory providing the DEFLATE compression.
            </summary>
            <returns>
            The compression factory providing methods and properties for using the DEFLATE compression.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateZlib">
            <summary>
            Creates a new compression factory providing the ZLIB compression.
            </summary>
            <returns>
            The compression factory providing methods and properties for using the ZLIB compression.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateGZip">
            <summary>
            Creates a new compression factory providing the GZIP compression.
            </summary>
            <returns>
            The compression factory providing methods and properties for using the GZIP compression.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateLzf4">
            <summary>
            Creates a new compression factory providing the LZF4 compression.
            </summary>
            <returns>
            The compression factory providing methods and properties for using the LZF4 compression.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Compression.CompressionFactory"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.GetCompressionFactory(System.String)">
            <summary>
            Gets the compression factory with specified compression method name.
            </summary>
            <param name="name">The name of the compression method.</param>
            <returns>The compression factory associated to the compression method name.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateOutputStream(System.IO.Stream)">
            <summary>
            Creates an output stream that compresses the bytes and writes compressed bytes into the underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <returns>The stream to compress data.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateInputStream(System.IO.Stream)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateEncoder(System.Int32)">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionEncoder"/> implementation providing the compression method.
            </summary>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>
            The ICompressionEncoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.CreateDecoder">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionDecoder"/> implementation associated to this compression method.
            </summary>
            <returns>
            The ICompressionDecoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.SetSettings``1(``0)">
            <summary>
            Configures the compression factory with the specified settings. 
            </summary>
            <typeparam name="T">The type of the settings class associated to this factory.</typeparam>
            <param name="settings">The CompressionSettings instance with setting for compression method associated to this factory.</param>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Compress(System.Byte[],System.Int32)">
            <summary>
            Compresses an array of bytes and returns an array of compressed bytes.
            </summary>
            <param name="data">The array of bytes to compress.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>The array of compressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Decompress(System.Byte[])">
            <summary>
            Decompresses an array of compressed bytes and returns an array of decompressed bytes.
            </summary>
            <param name="compressed">The array of compressed bytes.</param>
            <returns>The array of decompressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Compress(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Compresses an array of bytes and returns an array of compressed bytes.
            </summary>
            <param name="buffer">The array with bytes to compress.</param>
            <param name="offset">The offset in array where bytes to compress start.</param>
            <param name="count">The number of bytes to compress.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>The array of compressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses the part of an array containing compressed bytes and returns an array of decompressed bytes.
            </summary>
            <param name="compressed">The array containing compressed bytes.</param>
            <param name="offset">The offset in array where compressed bytes starts.</param>
            <param name="count">The number of compressed bytes to decompress.</param>
            <returns>The array of decompressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Compress(System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Compresses a number of bytes from the specified stream and returns an array of compressed bytes.
            </summary>
            <param name="input">The stream with bytes to compress.</param>
            <param name="bytesToCompress">The number of bytes from the stream to compress.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>The array of compressed bytes.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Compress(System.IO.Stream,System.Int32)">
            <summary>
            Compresses bytes from the specified stream and returns an array of compressed bytes.
            </summary>
            <param name="input">The stream to read bytes to compress.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>The array of compressed bytes.</returns>        
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Decompress(System.IO.Stream,System.Int32)">
            <summary>
            Reads compressed bytes from the specified stream and returns an array of decompressed bytes.
            </summary>
            <param name="input">The stream to read compressed bytes.</param>
            <param name="maxDecompressedSize">The maximum number of bytes to decompress.</param>
            <returns>The array of decompressed bytes.</returns>
            <remarks>
            <para>        
            This method will not return more bytes than specified by the <paramref name="maxDecompressedSize"/> parameter.        
            If the length of the array of bytes returned by the method is equal to <paramref name="maxDecompressedSize"/>,
            you can attempt to call this method again to retrieve more decompress bytes.
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.Compression.CompressionFactory.Decompress(System.IO.Stream)">
            <summary>
            Reads compressed bytes from the specified stream and returns an array of decompressed bytes.
            </summary>
            <param name="input">The stream to read compressed data from.</param>
            <returns>The array of decompressed bytes.</returns>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.Name">
            <summary>
            Gets the name of the compression format provided by the factory.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.DefaultCompressionLevel">
            <summary>
            Gets and sets default compression level to be used when compressing data.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.Lzf4">
            <summary>
            Gets instance providing LZF4 compression and decompression.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.Deflate">
            <summary>
            Gets instance providing DEFLATE compression and decompression.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.Zlib">
            <summary>
            Gets instance providing ZLIB compression and decompression.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionFactory.GZip">
            <summary>
            Gets instance providing GZIP compression and decompression.
            </summary>
        </member>
        <member name="T:Noemax.Compression.CompressionStream">
            <summary>
            Provides methods and properties for compressing or decompressing the data using 
            compression method provided by the <see cref="T:Noemax.Compression.CompressionFactory"/>.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Compression.CompressionStream"/> class.
            </summary>
            <param name="stream">The inner stream. </param>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Reset">
            <summary>
            Reset the stream state. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Flush">
            <summary>
            Flushes the buffered output into the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The size of the stream in bytes.</param>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.Compression.CompressionStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation that reads compressed bytes from the underlying stream and decompresses it into the specified buffer.
            </summary>
            <param name="buffer">The array of bytes where to save decompressed bytes.</param>
            <param name="offset">The offset in the array of bytes where to save decompressed bytes.</param>
            <param name="count">The maximum number of bytes to decompress.</param>
            <param name="callback">Optional callback to call when asynchronous operation is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation that compresses bytes from the specified buffer and write compressed bytes into the underlying stream.
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <param name="offset">The offset in the array of bytes to compress.</param>
            <param name="count">The number of bytes to compress.</param>
            <param name="callback">Optional callback to call when asynchronous operation is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for asynchronous read operation to complete.
            </summary>
            <param name="asyncResult">The object representing the asynchronous operation.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.EndWrite(System.IAsyncResult)">
            <summary>
            Waits for asynchronous write operation to complete.
            </summary>
            <param name="asyncResult">The object representing the asynchronous operation.</param>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>True</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="M:Noemax.Compression.CompressionStream.Close">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            <para>If this stream had been initialized with <strong>leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para>
            </remarks>
            <seealso cref="M:Noemax.Compression.CompressionFactory.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)"/>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.BytesBuffered">
            <summary>
            The number of bytes in the decoder buffer. 
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.CanRead">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanRead"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.CanSeek">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanSeek"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.CanWrite">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanWrite"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.Length">
            <summary>
            Gets the <see cref="P:System.IO.Stream.Length"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.Position">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.Position"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.InnerStream">
            <summary>
            Gets the inner stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Compression.CompressionStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.Compression.CompressionSettings">
            <summary>
            The base class for descendant classes that provide properties representing configuration of a compression algorithms.
            </summary>
        </member>
        <member name="T:Noemax.Compression.FlushMode">
            <summary>
            Specifies whether and how to explicitly flush the internal state of the encoder into the output buffer.
            </summary>
        </member>
        <member name="F:Noemax.Compression.FlushMode.NoFlush">
            <summary>
            Do not explicitly flush the internal state of the encoder.
            </summary>
        </member>
        <member name="F:Noemax.Compression.FlushMode.FlushSync">
            <summary>
            Flush the internal state of the encoder into the output buffer to ensure that all bytes compressed up to
            this point can be decompressed by decoding the output produced up to this point.
            </summary>
        </member>
        <member name="F:Noemax.Compression.FlushMode.Finish">
            <summary>
            Flush the internal state of the encoder into the output buffer and write the final block to conclude the encoding.
            </summary>
        </member>
        <member name="T:Noemax.Compression.ICompressionEncoder">
            <summary>
            Defines the interface of the compression algorithm encoder.
            </summary>
            <remarks>
            ICompressionEncoder is a low-level programming interface that provides direct control over the input and output 
            buffers used by the compression method. Using this interface for in-memory compression avoids the extra overhead, 
            in terms of both memory consumption and memory copy operations, that is being imposed by using compressed streams.
            </remarks>
        </member>
        <member name="M:Noemax.Compression.ICompressionEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,Noemax.Compression.FlushMode,System.Int32@)">
            <summary>
            Reads bytes from the specified input buffer and writes compressed bytes into the specified output buffer.
            </summary>
            <param name="input">The input buffer from which to read the bytes to compress.</param>
            <param name="inputOffset">The offset in the input buffer at which to start reading the bytes to compress.</param> 
            <param name="inputCount">The number of bytes to read from the input buffer.</param>
            <param name="output">The output buffer into which to write the compressed bytes.</param>
            <param name="outputOffset">The offset in the output buffer at which to start writing the compressed bytes.</param> 
            <param name="maxOutputCount">The maximum number of compressed bytes to write into the output buffer.</param> 
            <param name="flushMode">The flush mode that specifies whether and how to explicitly flush the internal state of the encoder into the output buffer.</param>
            <param name="inputUsed">Returns the number of bytes read from the input buffer.</param>
            <returns>The number of the compressed bytes written into the output buffer.</returns>
            <remarks>
            <para>
            When Encode is called, the encoder consumes bytes from the input buffer and returns the number of bytes consumed
            in the <paramref name="inputUsed"/> parameter and the number of compressed bytes produced in the return value.
            </para>
            <para>
            The encoder can buffer both input and output in its internal buffer, so it might consume input without producing 
            any output until it is ready to flush its internal state. To force the encoder to produce output, its internal 
            state must be explicitly flushed.
            </para>
            <para>
            Depending on the compression algorithm, a minimal amount of output buffer space might be required for compressed
            bytes to be produced. When the output buffer space is insufficient for the encoder to produce any amount of 
            compressed bytes, it consumes input until its internal buffer is full but does not produce any output. Eventually
            both the returned <paramref name="inputUsed"/> and the return value of Encode become 0, despite the provided 
            <paramref name="inputCount"/> being greater than 0. This indicates that <paramref name="maxOutputCount"/> is too 
            low for the encoder to operate and a larger output buffer space must be provided.
            </para>
            <para>
            When the internal state of the encoder is explicitly flushed by setting flushMode to FlushMode.FlushSync or
            FlushMode.Finish, the encoder consumes input and produces output until all input is consumed and all its internal 
            state is flushed to the output. Encode must be called repeatedly until the returned inputUsed is equal to the 
            provided inputCount and the return value is 0. This indicates that all input has been consumed and all output
            produced has been flushed, provided that maxOutputCount is known to be sufficient for the encoder to operate. 
            </para>
            <para>
            If the internal state of the encoder needs to be flushed without providing any input, use Flush.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.Compression.ICompressionEncoder.Flush(System.Byte[],System.Int32,System.Int32,Noemax.Compression.FlushMode)">
            <summary>
            Flushes the internal state of the encoder into the specified output buffer.
            </summary>
            <param name="output">The output buffer into which to write the compressed bytes.</param>
            <param name="outputOffset">The offset in the output buffer at which to start writing the compressed bytes.</param> 
            <param name="maxOutputCount">The maximum number of compressed bytes to write into the output buffer.</param> 
            <param name="flushMode">The flush mode that specifies whether and how to explicitly flush the internal state of the encoder into the output buffer.</param>
            <returns>The number of the compressed bytes written into the output buffer.</returns>
        </member>
        <member name="M:Noemax.Compression.ICompressionEncoder.Reset">
            <summary>
            Resets encoder state.
            </summary>
        </member>
        <member name="T:Noemax.Compression.ICompressionDecoder">
            <summary>
            Defines the interface of the compression algorithm decoder.
            </summary>
            <remarks>
            ICompressionDecoder is a low-level programming interface that provides direct control over the input and output 
            buffers used by the compression method. Using this interface for in-memory compression avoids the extra overhead, 
            in terms of both memory consumption and memory copy operations, that is being imposed by using compressed streams.
            </remarks>
        </member>
        <member name="M:Noemax.Compression.ICompressionDecoder.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads compressed bytes from the specified input buffer and writes decompressed bytes into the specified output buffer.
            </summary>        
            <param name="input">The input buffer from which to read the bytes to decompress.</param>
            <param name="inputOffset">The offset in the input buffer at which to start reading the bytes to decompress.</param> 
            <param name="inputCount">The number of bytes to read from the input buffer.</param>
            <param name="output">The output buffer into which to write the decompressed bytes.</param>
            <param name="outputOffset">The offset in the output buffer at which to start writing the decompressed bytes.</param> 
            <param name="maxOutputCount">The maximum number of decompressed bytes to write into the output buffer.</param> 
            <param name="inputUsed">Returns the number of bytes read from the input buffer.</param>
            <returns>The number of the decompressed bytes written into the output buffer.</returns>
            <remarks>
            <para>
            When Decode is called, the decoder consumes bytes from the input buffer and returns the number of bytes consumed in the inputUsed 
            parameter and the number of compressed bytes produced in the return value.
            </para>
            <para>
            Depending on the compression algorithm, a minimal amount of output buffer space might be required for decompressed bytes to be 
            produced. When the output buffer space is insufficient for the decoder to produce any amount of decompressed bytes, it consumes 
            input until its internal buffer is full but does not produce any output. Eventually both the returned inputUsed and the return
            value of Decode become 0, despite the provided <paramref name="inputCount"/> being greater than 0. This indicates that 
            <paramref name="maxOutputCount"/> is too low for the decoder to operate and a larger output buffer space must be provided.
            </para>     
            </remarks>
        </member>
        <member name="M:Noemax.Compression.ICompressionDecoder.Reset">
            <summary>
            Resets decoder state.
            </summary>
        </member>
        <member name="T:Noemax.Compression.DeflateCompression">
            <summary>
            Provides DEFLATE compression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.Compression.DeflateCompression"/>.
            </summary>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.CreateEncoder(System.Int32)">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionEncoder"/> implementation providing the compression method.
            </summary>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>
            The ICompressionEncoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.CreateDecoder">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionDecoder"/> implementation associated to this compression method.
            </summary>
            <returns>
            The ICompressionDecoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompression.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of DeflateSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.DeflateCompression.Name">
            <summary>
            Gets the name of the compression format 'DEFLATE'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.DeflateSettings">
            <summary>
            Contains configuration properties for the DEFLATE compression method. 
            </summary>
        </member>
        <member name="P:Noemax.Compression.DeflateSettings.WindowBits">
            <summary>
            Gets and sets the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </summary>
        </member>
        <member name="P:Noemax.Compression.DeflateSettings.MemLevel">
            <summary>
            Gets and sets the memory level setting to be used when compressing. It may be set to an integer from 8 to 15.
            </summary>
        </member>
        <member name="P:Noemax.Compression.DeflateSettings.ForceBuffering">
            <summary>
            Gets and sets whether read operation must not complete until a requested amount of bytes is decompressed; 
            If set to False operation completes as soon as any amount of decompressed bytes available. Default value is True.        
            </summary>   
        </member>
        <member name="T:Noemax.Compression.DeflateCompressionHp">
            <summary>
            Provides DEFLATE compression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.DeflateCompressionHp.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompressionHp.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompressionHp.CreateDecoder">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionDecoder"/> implementation associated to this compression method.
            </summary>
            <returns>
            The ICompressionDecoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompressionHp.CreateEncoder(System.Int32)">
            <summary>
            Initializes the <see cref="T:Noemax.Compression.ICompressionEncoder"/> implementation providing the compression method.
            </summary>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <returns>
            The ICompressionEncoder implementation providing the compression method.
            </returns>
        </member>
        <member name="M:Noemax.Compression.DeflateCompressionHp.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of DeflateSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.DeflateCompressionHp.Name">
            <summary>
            Gets the name of the compression format 'DEFLATE-HP'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.GZipSettings">
            <summary>
            Contains configuration properties for the GZIP compression method. 
            </summary>
        </member>
        <member name="P:Noemax.Compression.GZipSettings.CheckCrc">
            <summary>
            If set to true CRC check is performed which reaching the end of the compressed stream.
            </summary>        
        </member>
        <member name="P:Noemax.Compression.GZipSettings.CheckLength">
            <summary>
            If set to true the length of the decompressed data is checked when reaching the end of the compressed stream.
            </summary>
        </member>
        <member name="T:Noemax.Compression.GZipCompression">
            <summary>
            Provides GZIP compression. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.GZipCompression.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.GZipCompression.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.GZipCompression.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of GZipSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.GZipCompression.Name">
            <summary>
            Gets the name of the compression format 'GZIP'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.GZipCompressionHp">
            <summary>
            Provides GZIP compression. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.GZipCompressionHp.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.GZipCompressionHp.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.GZipCompressionHp.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of GZipSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.GZipCompressionHp.Name">
            <summary>
            Gets the name of the compression format 'GZIP-HP'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.Lzf4Compression">
            <summary>
            Provides LZF4 compression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.Lzf4Compression.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.Lzf4Compression.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.Lzf4Compression.CreateDecoder">
            <summary>
            Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Noemax.Compression.Lzf4Compression.CreateEncoder(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Noemax.Compression.Lzf4Compression.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of Lzf4Settings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.Lzf4Compression.Name">
            <summary>
            Gets the name of the compression format 'LZF4'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.Lzf4Settings">
            <summary>
            Contains configuration properties for the LZF4 compression method. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.Lzf4Settings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Compression.Lzf4Settings"/> class.
            </summary>
        </member>
        <member name="P:Noemax.Compression.Lzf4Settings.OutputBufferSize">
            <summary>
            The size of the internal buffer to be used by encoder. Default value is 81920 bytes.
            </summary>
        </member>
        <member name="P:Noemax.Compression.Lzf4Settings.InputBufferSize">
            <summary>
            The size of the internal buffer to be used by decoder. Default value is 81920 bytes.
            </summary>
        </member>
        <member name="P:Noemax.Compression.Lzf4Settings.ForceBuffering">
            <summary>
            Gets and sets whether read operation must not complete until a requested amount of bytes is decompressed; 
            If set to False operation completes as soon as any amount of decompressed bytes available. Default value is True.        
            </summary>        
        </member>
        <member name="T:Noemax.Compression.Lzf4CompressionHp">
            <summary>
            Provides LZF4 compression. 
            </summary>
        </member>
        <member name="P:Noemax.Compression.Lzf4CompressionHp.Name">
            <summary>
            Gets the name of the compression format 'LZF4-HP'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.ZlibCompression">
            <summary>
            Provides ZLIB compression.
            </summary>
        </member>
        <member name="M:Noemax.Compression.ZlibCompression.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.ZlibCompression.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.ZlibCompression.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of DeflateSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.ZlibCompression.Name">
            <summary>
            Gets the name of the compression format 'ZLIB'.
            </summary>
        </member>
        <member name="T:Noemax.Compression.ZlibCompressionHp">
            <summary>
            Provides ZLIB compression. 
            </summary>
        </member>
        <member name="M:Noemax.Compression.ZlibCompressionHp.CreateOutputStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Creates an output stream that compresses the data and writes compressed bytes into the specified underlying stream.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 1 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to write data to be compressed.</returns>
        </member>
        <member name="M:Noemax.Compression.ZlibCompressionHp.CreateInputStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an input stream that reads and decompresses compressed bytes from the specified underlying stream.
            </summary>
            <param name="input">
            The underlying stream from which to read compressed bytes.
            </param>
            <param name="leaveOpen">
            If <b>true</b>, the underlying stream will be left open when this stream is closed; 
            otherwise underlying stream is closed when this stream is closed.
            </param>
            <returns>The stream to read decompressed data.</returns>
        </member>
        <member name="M:Noemax.Compression.ZlibCompressionHp.SetSettings``1(``0)">
            <summary>
            Configures the factory with specified compression algorithm settings.
            </summary>
            <typeparam name="T">This parameter should be type of DeflateSettings.</typeparam>
            <param name="settings">The settings to configure the factory.</param>
        </member>
        <member name="P:Noemax.Compression.ZlibCompressionHp.Name">
            <summary>
            Gets the name of the compression format 'ZLIB-HP'.
            </summary>
        </member>
        <member name="T:Noemax.GZip.Core.Hp.Deflate">
            <summary>
            Provides methods and properties for compressing data using ZStream like API similar to the original Zlib library. 
            </summary>
        </member>
        <member name="T:Noemax.GZip.Core.DeflateBase">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.Core.ZStream">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.ZLIB_VERSION">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.MIN_MATCH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.MAX_MATCH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.PRESET_DICT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_FILTERED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_HUFFMAN_ONLY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_RLE">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_FIXED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_DEFAULT_STRATEGY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_NULL">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_OK">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_STREAM_END">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_NEED_DICT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_ERRNO">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_STREAM_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_DATA_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_MEM_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_BUF_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_VERSION_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_NO_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_PARTIAL_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_SYNC_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_FULL_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_FINISH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_BLOCK">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_TREES">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.Z_DEFLATED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.next_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.next_in_index">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.avail_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.total_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.next_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.next_out_index">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.avail_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.total_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.msg">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.data_type">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.adler">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.ZStream.ERR_MSG(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.ZStream.ERR_RETURN(Noemax.GZip.Core.ZStream,System.Int32)">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.Core.ZStream.ZStreamDataType">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.ZStreamDataType.Z_BINARY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.ZStreamDataType.Z_TEXT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.ZStreamDataType.Z_ASCII">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.Core.ZStream.ZStreamDataType.Z_UNKNOWN">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflate(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflateEnd">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflateInit(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflateInit(System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.DeflateBase.deflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflateInit(System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflateInit(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.FlushOutput(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflate(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Deflate.deflateEnd">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.Core.Hp.Inflate">
            <summary>
            Provides methods and properties for decompressing data using ZStream like API similar to the original Zlib library. 
            </summary>
        </member>
        <member name="T:Noemax.GZip.Core.InflateBase">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.InflateBase.inflate(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.InflateBase.inflateInit">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.InflateBase.inflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.InflateBase.inflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Inflate.inflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Inflate.inflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Inflate.inflateInit">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Hp.Inflate.inflate(System.Int32)">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.Core.Deflate">
            <summary/>    
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflateInit(System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflateInit(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.FlushOutput(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflate(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Deflate.deflateEnd">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.ZlibInputStream">
            <summary>
            Provides methods and properties for decompressing ZLIB format.
            </summary>
        </member>
        <member name="T:Noemax.GZip.DeflateInputStream">
            <summary>
            Provides methods and properties for decompressing DEFLATE format.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateInputStream"/> class.
            </summary>   
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            The base two logarithm of the size of the window buffer. This should be an integer from 8 to 15. Higher values give better compression, but use more memory. 
            </param>        
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="windowBits">The base two logarithm of the size of the window buffer. This should be an integer from 8 to 15. Higher values give better compression, but use more memory. </param>        
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.GZip.DeflateInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed data.</param> 
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Restart">
            <summary>
            Restarts the decompression starting from current position of the underlying stream.
            </summary>        
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Flush">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Initiates asynchronous read operation which reads and decompresses data from the compressed stream and stores it into the specified buffer.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <param name="callback">An optional asynchronous callback, to be called when the operation is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An object that represents the asynchronous read operation, which could still be pending.</returns>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete. 
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanWrite">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream.
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.BytesBuffered">
            <summary>
            Returns the number of compressed bytes buffered.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.HasBuffered">
            <summary>
            Gets whether the stream have buffered bytes available to read.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.ForceBuffering">
            <summary>
            Gets and sets whether read operation must not complete until a requested amount of bytes is decompressed; 
            If set to False operation completes as soon as any amount of decompressed bytes available. Default value is True.        
            </summary>  
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.ZlibInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibInputStream"/> class.
            </summary>   
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.GZip.ZlibInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
        </member>
        <member name="M:Noemax.GZip.ZlibInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.ZlibInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when decompressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
        </member>
        <member name="M:Noemax.GZip.ZlibInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibInputStream"/> class.
            </summary>   
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying
            stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when decompressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="T:Noemax.GZip.ZlibOutputStream">
            <summary>
            Provides methods and properties for compressing data into a stream using the ZLIB format.
            </summary> 
        </member>
        <member name="T:Noemax.GZip.DeflateOutputStream">
            <summary>
            Provides methods and properties for compressing data using the DEFLATE format.
            </summary>    
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateOutputStream"/> class.
            </summary>
            <param name="fileName">The path to the file to which compressed data will be written.</param> 
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param> 
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param> 
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:System.IO.Stream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Flush">
            <summary>
            Flushes the content of the internal buffers into the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Finish">
            <summary>
            Concludes compression and flushes the content of the internal buffer to the
            underlying stream.
            </summary>
            <remarks>
            	<para><strong>Finish</strong> concludes compression by writing the markup
                indicating the end of compressed data and flushing the content of the internal
                buffer.</para>
            	<para>After this method has been called, no more data can be written to this
                stream.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Close">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            <para>If this stream had been initialized with <strong>leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para>
            </remarks>        
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Restart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanRead">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the stream supports writing.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.ZlibOutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibOutputStream"/> class.
            </summary>
            <param name="fileName">The path to the file to which compressed data will be written.</param> 
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.ZlibOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibOutputStream"/> class.
            </summary>  
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.ZlibOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibOutputStream"/> class.
            </summary>  
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying
            stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.ZlibOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibOutputStream"/> class.
            </summary>        
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally,
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying
            stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param> 
        </member>
        <member name="M:Noemax.GZip.ZlibOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.ZlibOutputStream"/> class.
            </summary>        
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally,
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream 
            is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing must
            be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param> 
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="T:Noemax.GZip.DeflateStream">
            <summary>
            Provides methods and properties for compressing and decompressing data using the DEFLATE format.
            </summary>    
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.String,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateStream"/> class.
            </summary>        
            <param name="fileName">The path to the file where to write compressed data or read compressed data from.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateStream"/> class.
            </summary>        
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateStream"/> class.
            </summary>
            <remarks>
            	<para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
                stream also closes the underlying stream. Note that the state of the underlying
                stream can affect the usability of the stream. Also, no explicit checks are
                performed, so no additional exceptions are thrown when the new instance is
                created.</para>
            	<para>If an instance of the <b>DeflateStream</b> class is created with the
                <b>mode</b> parameter equal to <b>Compress</b>, header
                information is inserted immediately. If no further action occurs, the stream
                appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateStream"/> class.
            </summary>
            <remarks>
            <para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
            stream also closes the underlying stream. Note that the state of the underlying
            stream can affect the usability of the stream. Also, no explicit checks are
            performed, so no additional exceptions are thrown when the new instance is
            created.</para>
            <para>If an instance of the <b>DeflateStream</b> class is created with the
            <b>mode</b> parameter equal to <b>Compress</b>, header
            information is inserted immediately. If no further action occurs, the stream
            appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">
            One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression.
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.DeflateStream"/> class.
            </summary>
            <remarks>
            <para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
            stream also closes the underlying stream. Note that the state of the underlying
            stream can affect the usability of the stream. Also, no explicit checks are
            performed, so no additional exceptions are thrown when the new instance is
            created.</para>
            <para>If an instance of the <b>DeflateStream</b> class is created with the
            <b>mode</b> parameter equal to <b>Compress</b>, header
            information is inserted immediately. If no further action occurs, the stream
            appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Flush">
            <summary>
            Flushes the content of the internal buffer to the underlying stream.
            </summary>      
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.GZip.DeflateStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Close">
            <summary>
            Flushes the content of internal buffer and closes the current stream.
            </summary>
            <remarks>
            <para>If this stream had been initialized with <strong>leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanWrite">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanWrite"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.GZip.ExtraFieldCollection">
            <summary>Represents a collection of GZip header fields.</summary>
            
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Add(System.Int32,System.Byte[])">
            <summary>Adds the header to the list of GZip headers.</summary>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and ID2),
                which can be represented as a single 16-bit unsigned integer where ID1 is the most
                significant 8 bits and ID2 is the less significant 8 bits of its binary
                representation.</para>
            	<para>Use this method if it's more comfortable to provide the ID as a single
                <strong>Int16</strong> value. To provide the ID as two 8-bit fields use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Add(System.Byte,System.Byte,System.Byte[])">Add(Byte,
                Byte, Byte[])</see> overload.</para>
            </remarks>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
            <param name="data">The array of bytes to be stored in header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Add(System.Byte,System.Byte,System.Byte[])">
            <summary>Adds the header to the list of GZip headers.</summary>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and
                ID2).</para>
            	<para>Use this method if it's more comfortable to provide the ID as two 8-bit
                values. To provide the ID as a single 16-bit unsigned integer use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Add(System.Int32,System.Byte[])">Add(Int32,
                Byte[])</see> overload.</para>
            </remarks>
            <param name="id1">The 8-bit ID1 value.</param>
            <param name="id2">The 8-bit ID2 value.</param>
            <param name="data">The array of bytes to be stored in the header field.</param>
            <overloads>
            Adds the header to the list of GZip headers.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.GetByID(System.Int32)">
            <summary>
            Gets the header associated with the ID represented as a 16-bit unsigned
            integer.
            </summary>
            <returns>The array of bytes stored in the header field.</returns>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and ID2),
                which can be represented as a single 16-bit unsigned integer where ID1 is the most
                significant 8 bits and ID2 is the less significant 8 bits of its binary
                representation.</para>
            	<para>Use this method if it's more comfortable to provide the ID as a single
                <strong>Int16</strong> value. To provide the ID as two 8-bit fields use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Get(System.Byte,System.Byte)">Get(Byte,
                Byte)</see> overload.</para>
            </remarks>
            <overloads>Gets the header.</overloads>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Get(System.Byte,System.Byte)">
            <summary>
            Gets the GZip header associated with the ID represented as two ANSI character
            octet.
            </summary>
            <returns>The array of bytes stored in the header field.</returns>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and
                ID2).</para>
            	<para>Use this method if it's more comfortable to provide the ID as two 8-bit
                values. To provide the ID as a single 16-bit unsigned integer use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Get(System.Int32)">Get(Int32)</see>
                overload.</para>
            </remarks>
            <param name="id1">The 8-bit ID1 value.</param>
            <param name="id2">The 8-bit ID2 value.</param>
            <overloads>
            Gets the GZip header.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Get(System.Int32)">
            <summary>Gets the GZip header specified by its index in the list of headers.</summary>
            <returns>The array of bytes stored in the header field.</returns>
            <param name="index">The index of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Remove(System.Int32)">
            <summary>Removes the header with the specified index.</summary>
            <param name="index">The index of header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.RemoveById(System.Int32)">
            <summary><para>Removes the header specified by the 16-bit unsigned integer ID.</para></summary>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Clear">
            <summary>Clears the list of GZip headers.</summary>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.CopyTo(Noemax.GZip.GZipHeaderField[],System.Int32)">
            <summary>
            Copies the content of the collection into an array of
            <see cref="T:Noemax.GZip.GZipHeaderField">GZipHeaderField</see>.
            </summary>
            <param name="array">
            The destination array of
            <see cref="T:Noemax.GZip.GZipHeaderField">GZipHeaderField</see>.
            </param>
            <param name="arrayIndex">
            	<para>The index in the destination <b>array</b> at which to
                begin copying .</para>
            </param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.GetEnumerator">
            <summary>Gets a list of items in a collection.</summary>
            <returns>
            An <strong>IEnumerator</strong> object that can be used to iterate through the
            collection.
            </returns>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.Count">
            <summary>Gets the number of contained headers.</summary>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.Item(System.Int32)">
            <summary>Gets the header at the specified index.</summary>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.IsReadOnly">
            <summary>Gets a value indicating whether the collection is read-only.</summary>
        </member>
        <member name="T:Noemax.GZip.GZipHeaderField">
            <summary>Represents a GZip header field.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.Id">
            <summary>The 16-bit identifier of the header field (concatenated ID1 and ID2).</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.Id1">
            <summary>The 8-bit ID1 identifier.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.Id2">
            <summary>The 8-bit ID2 identifier.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.Data">
            <summary>The data contained in the header field.</summary>
        </member>
        <member name="T:Noemax.GZip.GZipInputStream">
            <summary>
            Provides methods and properties for decompressing GZIP format.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipInputStream"/> class.
            </summary>
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipInputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipInputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipInputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name=" windowBits">
            Specifies the window size to be used when compressing (FOR DECOMPRESSION CHANGE TO: decompressing). It may be set to an integer from 8 to 15.
            Generally, lower values result in lower memory usage while higher values result in better compression. The windowBits used when decompressing
            must be the same as or higher than the windowBits used when compressing.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
             <summary> 
             Initializes a new instance of the <see cref="T:Noemax.GZip.GZipInputStream"/> class.
             </summary>
             <param name="input">The underlying stream from which to read compressed bytes.</param>
             <param name="leaveOpen">
             If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
             </param>
             <param name="windowBits">
             Specifies the window size to be used when decompressing. It may be set to an integer from 8 to 15. Generally, lower values 
             result in lower memory usage while higher values result in better compression. The windowBits used when decompressing
             must be the same as or higher than the windowBits used when compressing.
            </param>
             <param name="disableManagedPointers">
             If set to <strong>True</strong> then the compression method implementation will not use any managed pointers. 
             Otherwise implementation is selected automatically depending on whether current process allows managed pointers.
             </param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.ReadHeader">
            <summary>
            Reads the GZIP header from the stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Flush">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanWrite">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream.
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ExtraFields">
            <summary>The collection of extra-fields read from the GZip header.</summary>
            <remarks>
            If the GZip header does not contain any extra-fields this property returns an
            empty
            <see cref="T:Noemax.GZip.ExtraFieldCollection">ExtraFieldCollection</see>.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ParseExtraFields">
            <summary>
            Gets and sets whether the reader should parse the extra-fields stored in the GZip
            header.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CheckCRC">
            <summary>
            Gets and sets whether to check CRC of the decompressed data.
            </summary>
            <value>
             <b>true</b> if CRC of decompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CheckLength">
            <summary>
            Gets and sets whether to check the length of uncompressed data.
            </summary>
            <remarks>  
            The length check can fail on the files that are bigger than 4GB, since GZIP header does not support 
            serializing bigger number. For this reason it's recommended to set this property to <strong>false</strong> 
            in cases when original data might exceed the 4294967295 bytes.
            </remarks> 
            <value>
             <b>true</b> if the length of uncompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Filename">
            <summary>Gets the filename specified in the GZip header.</summary>
            <remarks>
            If the filename is not present in the GZip header it returns
            <strong>null</strong> (<strong>Nothing</strong> for Visual Basic).
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.FileComments">
            <summary>
            Gets the comments specified in the GZip header.  
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.FileTime">
            <summary>
            Gets an original file last modified time.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.GZip.GZipOutputStream">
            <summary>
            Provides methods and properties for compressing data into a stream using the GZIP format.
            </summary> 
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.String,System.Int32)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream"/> class.
            </summary>
            <param name="fileName">The path to the file to which the compressed data will be written.</param>        
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>        
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying 
            stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>        
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying 
            stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values 
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing
            must be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>        
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying 
            stream is closed when this stream is closed.
            </param>
            <param name="windowBits">
            Specifies the window size to be used when compressing. It may be set to an integer from 8 to 15. Generally, lower values 
            result in lower memory usage while higher values result in better compression. The windowBits used when decompressing
            must be the same as or higher than the windowBits used when compressing.
            </param>
            <param name="memoryLevel">
            Specifies the memory level to be used when compressing. It may be set to an integer from 1 to 8. Generally, lower memory 
            levels result in lower memory usage while higher memory levels result in better compression and faster performance.
            </param>
            <param name="disableManagedPointers">
            If set to <strong>True</strong> then the compression method implementation will not use any managed pointers. 
            Otherwise implementation is selected automatically depending on whether current process allows managed pointers.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Flush">
            <summary>
            Flushes the content of the internal buffers to the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.GZip.GZipOutputStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanRead">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanWrite">
            <summary>
            Always returns <strong>True</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Filename">
            <summary>
            Gets and sets the filename to write into the GZIP header.
            </summary>
            <remarks>
            <para>You can provide the name of the compressed file to be written into the GZIP
            header by setting this property.</para>
            <para>The GZIP header will be written during the first write operation, therefore
            this property should be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.FileTime">
            <summary>
            The original last modified time of the compressed file.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Comments">
            <summary>Gets and sets the file comments to write into the GZIP header.</summary>
            <remarks>
            <para>You can provide the comments for the compressed file to be written into the
            GZIP header by setting this property.</para>
            <para>The GZIP header will be written during the first write operation, therefore
            this property has to be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.ExtraFields">
            <summary>
            The collection of extra-fields to write into the GZIP header.
            </summary>
            <remarks>
            <para>You can provide the set of extra-fields to be written into the GZIP header by
            modifying this collection.</para>
            <para>The GZIP header will be written during the first write operation, therefore
            the extra-header fields should be specified before writing any data into the
            stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>     
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.GZip.CompressionMode">
            <summary>
            Defines the compression modes for compression stream.
            </summary>    
        </member>
        <member name="F:Noemax.GZip.CompressionMode.Compress">
            <summary>
            To compress data.
            </summary>
        </member>
        <member name="F:Noemax.GZip.CompressionMode.Decompress">
            <summary>
            To decompress data.
            </summary>
        </member>
        <member name="T:Noemax.GZip.GZipStream">
            <summary>
            Provides methods and properties for compressing and decompressing data using the GZIP format.
            </summary>  
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.String,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipStream"/> class.
            </summary>        
            <param name="fileName">
            The path to the file to which the compressed data will be written or from which the data 
            to be decompressed will be read.
            </param>
            <param name="mode">
            One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipStream"/> class.
            </summary>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be decompressed will be read.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipStream"/> class.
            </summary>
            <remarks>
            	<para>If an instance of the <b>GZipStream</b> class is created with the
                <b>mode</b> parameter equal to <b>Compress</b>, header
                information is inserted immediately. If no further action occurs, the stream
                appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be 
            decompressed will be read.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipStream"/> class.
            </summary>
            <remarks>
            <para>If an instance of the <b>GZipStream</b> class is created with the
               <b>mode</b> parameter equal to <b>Compress</b>, header
               information is inserted immediately. If no further action occurs, the stream
               appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">
            The stream to which the compressed data will be written or from which the data to be decompressed will be read.
            </param>
            <param name="mode">
            One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that indicates the action to take.
            </param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipStream"/> class.
            </summary>
            <remarks>
            <para>If an instance of the <b>GZipStream</b> class is created with the
               <b>mode</b> parameter equal to <b>Compress</b>, header
               information is inserted immediately. If no further action occurs, the stream
               appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be decompressed will be read.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="compressionLevel">
            Specifies the compression level to be used when compressing. It may be set to an integer from 0 to 9. Generally, 
            lower compression levels result in faster performance while higher compression levels result in better compression. 
            Compression level 0 provides no compression at all.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Flush">
            <summary>
            Flushes the content of the internal buffer to the underlying stream.
            </summary>        
        </member>
        <member name="M:Noemax.GZip.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.GZip.GZipStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks> 
        </member>
        <member name="P:Noemax.GZip.GZipStream.Filename">
            <summary>
            Gets and sets the filename to write into or read from the GZip header.
            </summary>
            <remarks>
            	<para>You can provide the name of the compressed file to be written into the GZip
                header by setting this property.</para>
            	<para>The GZip header will be written during the first write operation, therefore
                this property should be specified before writing any data into the stream.</para>
                <para>The GZip header will be written during the first write operation, therefore
                this property should be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanWrite">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanWrite"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CheckCRC">
            <summary>
            Gets and sets whether to check CRC of the decompressed data.
            </summary>
            <value>
             <b>true</b> if CRC of decompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CheckLength">
            <summary>
            Gets and sets whether to check the length of uncompressed data.
            </summary>
            <value>
             <b>true</b> if the length of uncompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.GZip.Core.Inflate">
            <summary/>    
        </member>
        <member name="M:Noemax.GZip.Core.Inflate.inflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Inflate.inflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Inflate.inflateInit">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Core.Inflate.inflate(System.Int32)">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.InvalidInputException">
            <summary>
            The exception that is thrown when a compressed input stream is in an invalid
            format.
            </summary>
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.InvalidInputException"/> class.
            </summary>        
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.InvalidInputException"/> class.
            </summary>
            <param name="message">
            The text description of error that cause this exception.
            </param>
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.GZip.InvalidInputException"/> class.
            </summary>
            <param name="message">
            The text description of error that cause this exception.
            </param>
            <param name="innerException"> 
            The inner exception that caused this exception to be thrown.
            </param>
        </member>
        <member name="T:Noemax.Lzf.Hp.Lz4">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4.LZ4_SECURECOPY(System.Byte*@,System.Byte*@,System.Byte*)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4.LZ4_BLINDCOPY(System.Byte*@,System.Byte*@,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4.memcpy(System.Byte*,System.Byte*,System.Int32)">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.Hp.Lz4Compress">
            <summary>
            Provides ZStream like methods and properties for compressing the data into the  LZ4S stream format.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Hp.Lz4ZStream">
            <summary>
            The base class for the classes that provide ZStream like API for LZ4S stream format.
            </summary>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.Z_OK">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.Z_STREAM_END">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.Z_BUF_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.Z_FINISH">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.next_in">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.next_in_index">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.avail_in">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.total_in">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.next_out">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.next_out_index">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.avail_out">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.total_out">
            <summary/>
        </member>
        <member name="F:Noemax.Lzf.Hp.Lz4ZStream.msg">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4Compress.Init(System.Boolean)">
            <summary>
            Initialize the compression state and writes out the header into the output.
            </summary>
            <param name="streamChecksum">The value that specify whether to calculate and write the stream check sum.</param>
            <returns>The number of bytes produced.</returns>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4Compress.Compress(System.Boolean)">
            <summary>
            Read data from the <see cref="F:Noemax.Lzf.Hp.Lz4ZStream.next_in"/> and produces compressed output into <see cref="F:Noemax.Lzf.Hp.Lz4ZStream.next_out"/>.
            </summary>
            <param name="finish">The value specifying whether output should be flushed.</param>
            <returns>The number of bytes produced.</returns>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4Compress.PushOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Saves the compressed bytes into the internal buffer or any other media if overridden.
            </summary>
            <param name="output">The array of bytes with compressed data.</param>
            <param name="offset">The offset in the array of bytes where compressed data starts</param>
            <param name="count">The number of compressed bytes in the array.</param>
            <returns>The number of compressed byte saved.</returns>
        </member>
        <member name="T:Noemax.Lzf.Hp.Lz4Decoder">
            <summary>
            Provides methods and properties for decompressing the data using the LZ4 compression.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4Decoder.Decompress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses the specified number of bytes from the source and saves decompressed bytes into the destination byte array.
            </summary>
            <param name="source">The array of bytes read compressed data from.</param>
            <param name="sourceOffset">The offset of compressed data in the source array.</param>
            <param name="sourceSize">The number of bytes to decompress.</param>
            <param name="dest">The array of bytes to save decompressed data to.</param>
            <param name="destOffset">The offset where to save decompressed data.</param>
            <param name="destSize">The maximum number of bytes to decompress.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="T:Noemax.Lzf.Hp.Lz4Decompress">
            <summary>
            Provides ZStream like methods and properties for decompressing the data from LZ4S stream format.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4Decompress.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.Lzf.Hp.Lz4Decompress"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4Decompress.init">
            <summary>
            Initialize the decompression and reads the LZ4 stream header from the input data.
            </summary>
            <returns>Zero if initialization was successful and stream header read; otherwise the value that is less than zero.</returns>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4Decompress.decompress">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Noemax.Lzf.Hp.Lz4Encoder">
            <summary>
            Provides methods and properties for compressing the data using the LZ4 compression.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4Encoder.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses the data from the source array of bytes and stores compressed data into destination array of bytes.
            </summary>
            <param name="source">The array of bytes with data to be compressed.</param>
            <param name="sourceOffset">The offset in the array where data to be compressed starts.</param>
            <param name="inputSize">The number of bytes to compress.</param>
            <param name="destination">The array of bytes to store compressed data.</param>
            <param name="destOffset">The offset in the array where compressed data should start.</param>
            <param name="maxOutputSize">The maximum bytes of output to produce.</param>
            <returns>The number of compressed bytes produced.</returns>
        </member>
        <member name="T:Noemax.Lzf.Hp.Lz4InputStream">
            <summary>
            Provides the methods and properties for decompressing LZ4S formated streams.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Hp.Lz4InputStream"/> class.
            </summary>
            <param name="input">The stream to read LZ4S compressed data.</param>
            <param name="leaveOpen">The value specifying whether the underlying stream should be left open when this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4InputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Hp.Lz4InputStream"/> class.
            </summary>
            <param name="input">The stream to read LZ4S compressed data.</param>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4InputStream.Flush">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4InputStream.Dispose(System.Boolean)">
            <summary>
            Closes the stream and releases underlying resources.
            </summary>
            <param name="disposing">The value indicating the the object is being disposed for real. </param>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4InputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Hp.Lz4InputStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Hp.Lz4InputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Hp.Lz4InputStream.CanWrite">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Hp.Lz4InputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Hp.Lz4InputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream.
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Hp.Lz4OutputStream">
            <summary>
            Provide methods and properties for compressing data using into LZ4S formated streams.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.Lzf.Hp.Lz4OutputStream"/>.
            </summary>
            <param name="output">The output stream to write compressed data.</param>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.Lzf.Hp.Lz4OutputStream"/>.
            </summary>
            <param name="output">The output stream to write compressed data.</param>
            <param name="leaveOpen">The value specifying whether the underlying stream should be left open when this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4OutputStream.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4OutputStream.Close">
            <summary>
            Flushes the buffered output and closes the stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4OutputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Hp.Lz4OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses the bytes and write them into underlying stream.
            </summary>
            <param name="buffer">The buffer that contains the data to compress.</param>
            <param name="offset">The byte offset in array from which the bytes will be read.</param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="P:Noemax.Lzf.Hp.Lz4OutputStream.CanRead">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Hp.Lz4OutputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Hp.Lz4OutputStream.CanWrite">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Hp.Lz4OutputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Hp.Lz4OutputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream. 
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Core.Hp.Lzf4Decoder">
            <summary>
            Provides methods and properties for decompressing data using LZF4 compression method.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.ILzf4Decoder">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.ILzf4Decoder.Decompress(System.Byte[],System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32,Noemax.Lzf.ReadCallback,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.ILzf4Decoder.Reset">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.ILzf4Decoder.BytesBuffered">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.ILzf4Decoder.HasBuffered">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Decoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Decoder"/> class.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Decoder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Decoder"/> class.
            </summary>
            <param name="bufferSize">The size of decoder internal buffer in bytes.</param>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Decoder.Reset">
            <summary>
            Resets the compression state allowing to restart decompression using already allocated <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Decoder"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Decoder.Decompress(System.Byte[],System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32,Noemax.Lzf.ReadCallback,System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.Core.Hp.Lzf4Decoder.HasBuffered">
            <summary>
            Gets the value that indicate whether the decoder has any decompressed bytes in its buffer.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Core.Hp.Lzf4Decoder.BytesBuffered">
            <summary>
            Gets the number of decompressed bytes in the decoder buffer.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Core.Hp.Lzf4Encoder">
            <summary>
            Provides methods and properties for compressing the data using LZF4 compression algorithm.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.ILzf4Encoder">
            <summary>
            Defines the interface to be implemented by the LZF4 compression encoder.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.ILzf4Encoder.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,Noemax.Lzf.FlushCallback)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.ILzf4Encoder.Flush(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.ILzf4Encoder.Reset">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.ILzf4Encoder.BufferSize">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Encoder.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Encoder"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Encoder.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Encoder"/> using the internal buffer of the specified size.
            </summary>
            <param name="bufferSize">The size of internal buffer in bytes.</param>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Encoder.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,Noemax.Lzf.FlushCallback)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Encoder.Flush(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Hp.Lzf4Encoder.Reset">
            <summary>Resets the internal compression state allowing to start new compression reusing the same <see cref="T:Noemax.Lzf.Core.Hp.Lzf4Encoder"/>.</summary>
        </member>
        <member name="P:Noemax.Lzf.Core.Hp.Lzf4Encoder.BufferSize">
            <summary>
            Gets the size of the internal buffer that is being used by the encoder.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.ReadCallback">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.FlushCallback">
            <summary>
            Delegate called when encoder needs to flush its output. Callback is used to speed up encoding of the data.
            </summary>
            <param name="buffer">The buffer containing compressed bytes.</param>
            <param name="count">The number of compressed bytes in the buffer.</param>
        </member>
        <member name="T:Noemax.Lzf.Core.Lzf4Decoder">
            <summary>    
            Provides methods and properties to compress streams using LZF4 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf4OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Decoder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Core.Lzf4Decoder"/> class. 
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Decoder.Decompress(System.Byte[],System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32,Noemax.Lzf.ReadCallback,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Decoder.Reset">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.Core.Lzf4Decoder.HasBuffered">
            <summary>
            Gets value indicating whether decoder have any compressed or uncompressed data buffered.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Core.Lzf4Decoder.BytesBuffered">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.Core.Lzf4Encoder">
            <summary>    
            Provides methods and properties to compress streams using LZF3 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf3OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Encoder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Core.Lzf4Encoder"/> class. 
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Encoder.Reset">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Encoder.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,Noemax.Lzf.FlushCallback)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Core.Lzf4Encoder.Flush(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.Core.Lzf4Encoder.BufferSize">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.Lzf4InputStream">
            <summary>
            Provides methods and properties for decompressing LZF4 format.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="filename">The path to the file to read compressed data from.</param>                
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="input">The stream to read compressed data from.</param>             
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="leaveOpen">       
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="bufferSize">The size of the internal buffer to be used during compression.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4InputStream"/> class.
            </summary>
            <param name="input">The underlying stream from which to read compressed bytes.</param>
            <param name="bufferSize">The size of the internal buffer to be used during compression.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Flush">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed bytes from this stream into the specified byte array.
            </summary>
            <returns>
            The number of decompressed bytes in the byte array. If the end of the stream has been reached, 0 is returned.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the decompressed bytes starting from the byte at <b>offset</b>.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which the decompressed bytes will start when this method returns.
            </param>
            <param name="count">
            The maximum number of bytes to be read from this stream.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Reset">
            <summary>
            Resets the stream state to be ready to start reading a new LZF4 stream starting from the same inner source stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Initiates asynchronous read operation which reads bytes from the compressed stream and writes decompressed bytes into the specified buffer.
            </summary>
            <param name="buffer">The buffer to write the decompressed bytes.</param>
            <param name="offset">The offset in the buffer at which decompressed data will placed.</param>
            <param name="count">The maximum number of bytes to decompress.</param>
            <param name="callback">An optional asynchronous callback, to be called when the operation is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An object that represents the asynchronous read operation, which could still be pending.</returns>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete. 
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.ForceBuffering">
            <summary>
            Gets and sets whether read operation must not complete until a requested amount of bytes is decompressed; 
            If set to False operation completes as soon as any amount of decompressed bytes available. Default value is True.        
            </summary>  
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanRead">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanWrite">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.Length">
            <summary>Gets the <see cref="P:System.IO.Stream.Length"/> property value of the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream.
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanTimeout">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.WriteTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.WriteTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.ReadTimeout">
            <summary>
            Gets and sets the value of the <see cref="P:System.IO.Stream.ReadTimeout"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.HasBuffered">
            <summary>
            Gets whether stream have decompressed bytes available to read. 
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.BytesBuffered">
            <summary>
            Gets the number of compressed and uncompressed bytes buffered by the input stream.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Lzf4OutputStream">
            <summary>
            Provides methods and properties for compressing data using the LZF4 format.
            </summary>  
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="filename">The file to which compressed data will be written.</param>     
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="stream">The underlying stream to which the compressed data will be written.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which the compressed data will be written.</param>
            <param name="bufferSize">The size of internal buffer in bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.Lzf.Lzf4OutputStream"/> class.
            </summary>
            <param name="output">The underlying stream to which to write the compressed bytes.</param>
            <param name="bufferSize">The size of internal buffer in bytes.</param>
            <param name="leaveOpen">        
            If <strong>True</strong> then the underlying stream is left open when this stream is closed, otherwise the underlying stream is closed when this stream is closed.
            </param>
            <param name="disableManagedPointers">
            If <strong>True</strong> then the use of managed pointers by the implementation of this compression method is disabled.
            Otherwise the use of managed pointers is automatically enabled when permitted by the current process.
            </param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Flush">
            <summary>
            Flushes the content of the internal buffers to the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Reset">
            <summary>
            Resets the stream state to be ready to start writing a new LZF4 stream using the same inner output stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.SetLength(System.Int64)">
            <summary>
            This member is not supported and always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from the specified byte array into this stream.
            </summary>        
            <param name="buffer">An array of bytes that contains the bytes to be written into this stream.</param>
            <param name="offset">The zero-based byte offset in <b>buffer</b> at which the bytes to be written start.</param>
            <param name="count">The number of bytes to be written.</param>
            <remarks>
            Write does not always result in compressed data being flushed to the underlying stream. Use <see cref="M:Noemax.Lzf.Lzf4OutputStream.Flush"/> or
            <see cref="M:System.IO.Stream.Close"/> to make sure that all data written to this stream is compressed and flushed to the underlying stream.
            </remarks>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Dispose(System.Boolean)">
            <summary>
            Flushes the content of internal buffer and release releases all resources used by the stream.
            </summary>
            <remarks>
            If this stream had been initialized with <strong>leaveOpen</strong> parameter set to <strong>true</strong>,
            the underlying stream remains open after this method is called, otherwise the underlying stream is also closed.
            </remarks>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanRead">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanSeek">
            <summary>
            Always returns <strong>False</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanWrite">
            <summary>
            Gets the value of the <see cref="P:System.IO.Stream.CanWrite"/> property from the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.Length">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Length"/> property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.Position">
            <summary>
            Gets a value of the <see cref="P:System.IO.Stream.Position"/> property of the underlying stream.
            This property is read-only setting this property throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanTimeout">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.WriteTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.WriteTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.ReadTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.ReadTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.Trial.NoemaxTrialExpiredException">
            <summary/>  
        </member>
        <member name="M:Noemax.Trial.NoemaxTrialExpiredException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:Noemax.Trial.NoemaxTrialExpiredException.PrepareMessage(System.String)">
            <summary/>
        </member>
        <member name="T:Noemax.Trial.TrialBehavior">
            <summary/>
        </member>
        <member name="M:Noemax.Trial.TrialBehavior.Do(System.String)">
            <summary/>
        </member>
        <member name="T:Noemax.Utils.BytesReadCallback">
            <summary>
            Delegeate to the callback to call whenever ByteCounterStream reads data.
            </summary>
            <param name="sender">The ByteCounterStream intance that read data from the input.</param>
            <param name="byteRead">The number of bytes read.</param>
        </member>
        <member name="T:Noemax.Utils.ByteCounterStream">
            <summary>
            Used internally. Reports the number of bytes read/written to the input upon every read/write operation.
            </summary>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.#ctor(System.IO.Stream,Noemax.Utils.BytesReadCallback)">
            <summary>
            Initializes a new instance of ByteCounterStream.
            </summary>
            <param name="innerStream">The input to reader/write.</param>
            <param name="byteReadCallback">The callback to be called upon every read operation.</param>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Flush">
            <summary>
            Flushes the inner input.
            </summary>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from the inner input.
            </summary>
            <param name="buffer">The buffer where to save bytes read.</param>
            <param name="offset">The offest in the buffer where save bytes read.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Move the input possition to the offset from specified input origin.
            </summary>
            <param name="offset">The offset to move input possition too.</param>
            <param name="origin">The origin from which to calculate the offset.</param>
            <returns>A new input possition.</returns>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.SetLength(System.Int64)">
            <summary>
            Sets the length of inner input to specified value.
            </summary>
            <param name="value">The length of the input to set.</param>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a number of bytes into inner input, and counts the number of bytes written.
            </summary>
            <param name="buffer">The buffer containg bytes to write.</param>
            <param name="offset">The offset from begin of the buffer where to start getting bytes from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Reset">
            <summary>
            Resets the counter of bytes read/written.
            </summary>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Dispose(System.Boolean)">
            <summary>
            Disposes the object and release associated resources.
            </summary>
            <param name="disposing">If set to <strong>true</strong> the associated unmanaged resources will be released.</param>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.CanRead">
            <summary>
            Returns true if inner input can read data.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.CanSeek">
            <summary>
            Returns true if inner input can seek possition.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.CanWrite">
            <summary>
            Returns true if inner input can write data.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.Length">
            <summary>
            Returns the length of the inner input.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.Position">
            <summary>
            Returns the possition of inner input.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.BytesRead">
            <summary>
            Returns the number of bytes read.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.BytesWritten">
            <summary>
            Return the number of bytes written.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.OnClose">
            <summary>
            The callback to call when this input is closed.
            </summary>
        </member>
        <member name="T:Noemax.Utils.MD5Digest">
            implementation of MD5 as outlined in "Handbook of Applied Cryptography", pages 346 - 347.
        </member>
        <member name="T:Noemax.Utils.GeneralDigest">
            base implementation of MD4 family style digest as outlined in
            "Handbook of Applied Cryptography", pages 344 - 347.
        </member>
        <member name="T:Noemax.Utils.IDigest">
            interface that a message digest conforms to.
        </member>
        <member name="M:Noemax.Utils.IDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:Noemax.Utils.IDigest.GetByteLength">
             return the size, in bytes, of the internal buffer used by this digest.
            
             @return the size, in bytes, of the internal buffer used by this digest.
        </member>
        <member name="M:Noemax.Utils.IDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:Noemax.Utils.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param input the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:Noemax.Utils.IDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param output the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:Noemax.Utils.IDigest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="P:Noemax.Utils.IDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:Noemax.Utils.MD5Digest.#ctor(Noemax.Utils.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Noemax.Utils.MD5Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Noemax.Utils.SecuritySocketStream">
            <summary>
            Produces wrapper that facilitate asynchronous WaitForInput with minimal buffer 
            pinned, when security or compression streams are used as underlying input.
            </summary>
        </member>
        <member name="P:Noemax.Activation.ExclusiveTcpPortManager.UseOnlyOverlappedIO">
            <summary/>
        </member>
        <member name="T:Noemax.WCFX.Channels.NoemaxTlsAuthentication">
            <summary>
            Provides methods and properties for performing TLS authentication.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.NoemaxTlsAuthentication.Connect(System.IO.Stream,System.Uri)">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.NoemaxTlsAuthentication.DefaultServiceCertificate">
            <summary>
            Gets and sets the X509Certificate that a service endpoint is expected to provide during the SSL/TLS handshake.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.NoemaxTlsAuthentication.ClientCertificate">
            <summary>
            Gets and sets the X509Certificate that a client is expected to provide during the SSL/TLS handshake.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.NoemaxTlsAuthentication.CertificateValidator">
            <summary>
            Gets and sets the callback to be called during validation of X509Certificate provided by a remote endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.NoemaxTlsAuthentication.TargetHost">
            <summary>
            Gets and sets the string that is expected to match with the common name of X509 certificate provided by remote endpoint during TLS authentication.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.NoemaxTlsAuthentication.CheckCertificateRevocation">
            <summary>
            Gets and set whether a X509Certificate provided by remote endpoint must be checked for revocation.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.TransportSecurityType">
            <summary>
            Specifies the type of security to be used by a transport.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportSecurityType.None">
            <summary>
            No security.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportSecurityType.Tls">
            <summary>
            TLS transport security.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.TransportSecuritySettings">
            <summary>Provides methods and properties for transport security configuration.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.TransportSecuritySettings.#ctor">
            <summary>Initialize a new instance of %TransportSecuritySettings%.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.TransportSecuritySettings.#ctor(Noemax.WCFX.Channels.TransportSecuritySettings)">
            <summary>Initialize a new instance of %TransportSecuritySettings%.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.TransportSecuritySettings.CopyFrom(Noemax.WCFX.Channels.TransportSecuritySettings)">
            <summary/>        
        </member>
        <member name="M:Noemax.WCFX.Channels.TransportSecuritySettings.Clone">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.TransportSecuritySettings.Type">
            <summary>Gets and set the type of security to be used by a transport.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.TransportSecuritySettings.RequireClientAuthentication">
            <summary>Gets and sets whether the client authentication must be required.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.TransportSecuritySettings.CertificateValidator">
            <summary>
            Callback for validation certificates provided by remote endpoint.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.X509CertificateValidator">
            <summary>
            Defines the abstract base class for X509 certificate validation.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.X509CertificateValidator.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            When overridden validates the specified X509 certificate.
            </summary>
            <param name="certificate">The certificate to validate.</param>
        </member>
        <member name="T:Noemax.WebSockets.CompressionScheme">
            <summary>
                Specifies the compression scheme to be used by WebSocket.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.CompressionScheme.None">
            <summary>
                No compression.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.CompressionScheme.Lzf4">
            <summary>
                LZF4 compression method is applied only on the frame payload leaving frame headers uncompressed.
                This compression scheme is getting applied prior payload is masked and does not suffer from client to
                server payload masking, but benefit from the reusing compression state between frames.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.CompressionScheme.Deflate">
            <summary>
                DEFLATE compression method is applied only on the frame payload leaving frame headers uncompressed.
                This compression scheme is getting applied prior payload is masked and does not suffer from client to
                server payload masking, but benefit from the reusing compression state between frames.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.CompressionScheme.Auto">
            <summary>
                This compression scheme specifies that compression is to be negotiated with remote side automatically.
                Compression schemes that actually applied during communication will depend on local and remote side
                preferences. If remote side does not support any of available compression schemes, compression not will
                be used.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.CompressionSettings">
            <summary>
                Provides configuration properties for WebSocket transport compression.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.CompressionSettings.#ctor">
            <summary>
                Initialize a new instance of <see cref="T:Noemax.WebSockets.CompressionSettings"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.CompressionSettings.#ctor(Noemax.WebSockets.CompressionSettings)">
            <summary>
                Initialize a new instance of <see cref="T:Noemax.WebSockets.CompressionSettings"/>.
            </summary>
            <param name="settings">The compression settings to use with a new instance.</param>
        </member>
        <member name="M:Noemax.WebSockets.CompressionSettings.CopyTo(Noemax.WebSockets.CompressionSettings)">
            <summary>
                Copies all properties to another instance of <see cref="T:Noemax.WebSockets.CompressionSettings"/>.
            </summary>
            <param name="settings">The instance to copy all properties too.</param>
        </member>
        <member name="M:Noemax.WebSockets.CompressionSettings.CopyFrom(Noemax.WebSockets.CompressionSettings)">
            <summary>
                Copies all properties from another instance.
            </summary>
            <param name="settings">The instance to copy all properties from.</param>
        </member>
        <member name="P:Noemax.WebSockets.CompressionSettings.CompressionScheme">
            <summary>
                Specifies the compression scheme to be used by WebSocket connections.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.CompressionSettings.NoContextTakeover">
            <summary>
                Gets and sets whether compression should takeover compression context between messages.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.CompressionSettings.CompressionLevel">
            <summary>
                Gets and set the compression level to be used by the transport compression.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Core.ControlFrameEventArgs">
            <summary>
                The event argument used by control frame related events of <see cref="T:Noemax.WebSockets.Core.WebSocket"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.ControlFrameEventArgs.#ctor">
            <summary>
                Initialize a new instance of <see cref="T:Noemax.WebSockets.Core.ControlFrameEventArgs"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.ControlFrameEventArgs.#ctor(Noemax.WebSockets.Core.WebSocket,System.Byte,System.ArraySegment{System.Byte})">
            <summary>
                Initialize a new instance of <see cref="T:Noemax.WebSockets.Core.ControlFrameEventArgs"/>.
            </summary>
            <param name="socket">The WebSocket that received the control frame.</param>
            <param name="opcode">The opcode value in the control frame header.</param>
            <param name="payload"></param>
        </member>
        <member name="M:Noemax.WebSockets.Core.ControlFrameEventArgs.SendPong">
            <summary>
                Sends the Pong frame as reply to Ping frame to remote side.
            </summary>
            <remarks>
                Pong frame is sent asynchronously and not guarantied to be delivered to remote side when call
                to the method is complete.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Core.ControlFrameEventArgs.Socket">
            <summary>
                Gets WebSocket object associated to the control frame.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.ControlFrameEventArgs.OpCode">
            <summary>
                Gets the OpCode associated to the control frame.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.ControlFrameEventArgs.Payload">
            <summary>
                Get the payload associated to the control frame.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketEventArgs">
            <summary>
                Provides the arguments of the event triggered by the <see cref="!:BasicWebSocketClient"/> class.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketEventArgs.TextData">
            <summary>
                The payload of the text message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketEventArgs.BinaryData">
            <summary>
                The payload of the binary message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketEventArgs.Message">
            <summary>
                The <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/> object associated to the message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketEventArgs.Exception">
            <summary>
                Exception thrown during WebSocket operation.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Core.UsernamePasswordAuthenticateEventHandler">
            <summary>
                Represents a methods that will be handling the username/password authentication.
            </summary>
            <param name="sender">The source of event.</param>
            <param name="args"><see cref="T:Noemax.WebSockets.Core.UsernamePasswordAuthenticateEventArgs"/> containing the event data.</param>
        </member>
        <member name="T:Noemax.WebSockets.Core.UsernamePasswordAuthenticateEventArgs">
            <summary>
                Argument for event generated during Basic HTTP authentication.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.UsernamePasswordAuthenticateEventArgs.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Noemax.WebSockets.Core.UsernamePasswordAuthenticateEventArgs"/>.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.UsernamePasswordAuthenticateEventArgs.Fail">
            <summary>
                Fails Username/Password authentication and throws SecurityTokenException.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.UsernamePasswordAuthenticateEventArgs.Accept">
            <summary>
            Accepts the Username/Password credentials provided by the client connection.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.UsernamePasswordAuthenticateEventArgs.Username">
            <summary>
                The username presented by the remote endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.UsernamePasswordAuthenticateEventArgs.Password">
            <summary>
                The password presented by remote endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.UsernamePasswordAuthenticateEventArgs.AuthenticationContext">
            <summary>
                The object representing the context assigned to the WebSocket connection during authentication.
            </summary>
            <remarks>
                You can set this property to the context value that you want to associate to the connection once it authenticated.
                For example you can set this property to the Username string or any other state object that is geting established
                during authentication.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.Core.WebSocketCloseCodes">
            <summary>
                Defines the constants to be used with for sending the WebSocket close frame status code that define the reason for
                closing the connection.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Core.WebSocketCloseCodes.Normal">
            <summary>
            1000 indicates a normal closure, meaning that the purpose for which the connection was established has been
            fulfilled.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Core.WebSocketCloseCodes.GoingAway">
            <summary>
            1001 indicates that an endpoint is "going away", such as a server going down or a browser having navigated away
            from a page.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Core.WebSocketCloseCodes.ProtocolError">
            <summary>
            1002 indicates that an endpoint is terminating the connection due to a protocol error.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Core.WebSocketCloseCodes.UnsupportedPayloadType">
            <summary>
            1003 indicates that an endpoint is terminating the connection because it has received a type of data it cannot
            accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message).
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Core.WebSocketCloseCodes.InconsistentData">
            <summary>
            1007 indicates that an endpoint is terminating the connection because it has received data within a message that
            was not consistent with the type of the message (e.g., non-UTF-8 [RFC3629] data within a text message).
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Core.WebSocketCloseCodes.MessageViolatesPolicy">
            <summary>
            1008 indicates that an endpoint is terminating the connection because it has received a message that violates its
            policy.  This is a generic status code that can be returned when there is no other more suitable status code (e.g., 1003 or 1009)
            or if there is a need to hide specific details about the policy.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Core.WebSocketCloseCodes.MessageToBig">
            <summary>
            1009 indicates that an endpoint is terminating the connection because it has received a message that is too big for
            it to process.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Core.WebSocketCloseCodes.ExtensionRequired">
            <summary>
            1010 indicates that an endpoint (client) is terminating the connection because it has expected the server to
            negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake. 
            The list of extensions that are needed SHOULD appear in the /reason/ part of the Close frame. Note that this status 
            code is not used by the server, because it can fail the WebSocket handshake instead.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Core.WebSocketCloseCodes.UnexpectedFailure">
            <summary>
            1011 indicates that a endpoint is terminating the connection because  it encountered an unexpected condition that
            prevented it from processing the message.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Core.KeepaliveMode">
            <summary />
        </member>
        <member name="F:Noemax.WebSockets.Core.KeepaliveMode.Default">
            <summary />
        </member>
        <member name="F:Noemax.WebSockets.Core.KeepaliveMode.Message">
            <summary />
        </member>
        <member name="F:Noemax.WebSockets.Core.KeepaliveMode.PingPong">
            <summary />
        </member>
        <member name="T:Noemax.WebSockets.Core.WebSocket">
            <summary>
                Provides methods and properties for sending and receiving messages through WebSocket connection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.#ctor">
            <summary>
                Initialize a new instance of <see cref="T:Noemax.WebSockets.Core.WebSocket"/>
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.Close">
            <summary>Attempts a graceful shutdown of WebSocket connection and closes the socket.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.Close(System.TimeSpan)">
            <summary>Attempts a graceful shutdown of WebSocket connection within specified period of time and closes the socket.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.Abort">
            <summary>
                Aborts connection by sending the close frame to remote side and closing connection without waiting for any other
                operation to complete.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.Abort(System.Int32,System.String)">
            <summary>
                Aborts connection by sending the close frame to remote side and closing connection without waiting for any other
                operation to complete.
            </summary>
            <param name="statusCode">The status code to send to the remote endpoint.</param>
            <param name="statusText">The text description of the status code. This value should not exceed 120 characters.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.ReceiveMessage(System.Int32)">
            <summary>Receives a message from the WebSocket connection.</summary>
            <param name="maxMessageSize">The maximum size limit for message being received.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.ReceiveMessage(System.Int32,System.TimeSpan)">
            <summary>Receives a message from the WebSocket connection.</summary>
            <param name="maxMessageSize">The maximum size limit for message being read.</param>
            <param name="timeout">The timeout during which the message is expected to be completely received.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.ReceiveMessage(System.ServiceModel.Channels.BufferManager,System.Int64)">
            <summary>Receives a complete message from the WebSocket connection.</summary>
            <param name="bufferManager">The buffer manager to provide buffers while receiving the message.</param>
            <param name="maxMessageSize">The maximum size limit for message being read.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.ReceiveMessage(System.ServiceModel.Channels.BufferManager,System.Int64,System.TimeSpan)">
            <summary>Receives a message from the WebSocket connection.</summary>
            <param name="bufferManager">The buffer manager to provide buffers while receiving the message.</param>
            <param name="maxMessageSize">The maximum size limit for message being read.</param>
            <param name="timeout">The timeout during which the message is expected to be completely received.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.Receive(System.TimeSpan)">
            <summary>/R eceives a message from the WebSocket connection. </summary>
            <param name="timeout">The period of time during which operation must complete or timeout.</param>
            <returns>The inbound message received.</returns>
            <remarks>
                After call to Receive is compelte the message is not necessary completelly received, only header of the first
                fragment is guaranteed to be received.
                Application can continue receiving message using methods provided by <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/>. When
                message is consumed application must
                call <see cref="M:Noemax.WebSockets.WebSocketInboundMessage.Close"/> in other to release the message and allow subsequent message to
                be received.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.ReceiveMessage">
            <summary>
                Receives the message from the WebSocket connection and returns <see cref="T:System.IO.Stream"/> that reads the
                message.
            </summary>
            <remarks>
                After call to Receive is complete the message is not necessary completelly received, only header of the first
                fragment is guaranteed to be received.
                Application can continue receiving the message using the <see cref="T:System.IO.Stream"/> returned by this method. When
                message is consumed application must close
                the input to allow subsequent messages to be received.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.ReceiveMessage(System.TimeSpan)">
            <summary>Reads the message from the WebSocket connection and represents it as %System.IO.Stream%.</summary>
            <param name="timeout">The timeout during which the message is expected to be completely received.</param>
            <remarks>
                After call to Receive is complete the message is not necessary completelly received, only header of the first
                fragment is guaranteed to be received.
                Application can continue receiving the message using the <see cref="T:System.IO.Stream"/> returned by this method. When
                message is consumed application must close
                the input to allow subsequent messages to be received.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendMessage">
            <summary>Initiates a new outgoing message and returns a Stream that write the message into connection.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendMessage(System.TimeSpan)">
            <summary>Initiates the message and returns a Stream that writes message into connection.</summary>
            <param name="timeout">An TimeSpan that specifies the interval of time to wait for message to be sent.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendTextMessage">
            <summary>Initiates a new outgoing message and returns a StreamWriter that write the message into connection.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendTextMessage(System.TimeSpan)">
            <summary>Initiates the message and returns a StreamWriter that writes message into connection.</summary>
            <param name="timeout">An TimeSpan that specifies the interval of time to wait for message to be sent.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>Sends byte array as binary message.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendMessage(System.ArraySegment{System.Byte},System.TimeSpan)">
            <summary>Sends byte array as binary message.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendMessage(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>Sends byte array as binary message.</summary>
            <param name="buffer">The array containing the bytes of the message to be sent.</param>
            <param name="offset">The offset in the array where message to be sent starts.</param>
            <param name="count">The number of bytes starting from the offset until the end of the message.</param>
            <param name="timeout">An TimeSpan that specifies the interval of time to wait for message to be sent.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendMessage(System.String)">
            <summary>Sends string of text as UTF-8 encoded text message.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendMessage(System.String,System.TimeSpan)">
            <summary>Sends string of text as UTF-8 encoded text message.</summary>
            <param name="text">The text to send as UTF-8 encoded WebSocket message.</param>
            <param name="timeout">An TimeSpan that specifies the interval of time to wait for message to be sent.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendMessage(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
                Sends an outbound message.
            </summary>
            <param name="message">The message to send.</param>
            <param name="timeout">
                The period of time to wait for message to be sent. If message is not sent within specified
                timeout, TimeoutException is raised by this method.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendMessage(Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
                Sends an outbound message.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendPing">
            <summary>
                Sends the PING message to the remote endpoint.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendClose(System.Int16,System.String,System.TimeSpan)">
            <summary>
                Sends the close frame with a status code and text specifying the reason for closing connection.
            </summary>
            <remarks>
                Once close sent is sent by local endpoint it cannot send more messages to remote side. Sending close frame does not
                result
                in connection being closed right away. Local endpoint can still receive messages until remote side closes the
                connection/
            </remarks>
            <param name="code">The status code describing the reason for closing the connection.</param>
            <param name="reason">The text description associated to the status code.</param>
            <param name="timeout">The period of time during which the send operation should complete or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendPing(System.Byte[])">
            <summary>
                Sends the PING message to the remote endpoint.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendPong(System.ArraySegment{System.Byte})">
            <summary>
                Sends the Pong message to remote endpoint.
            </summary>
            <param name="payload">
                The bytes to sent as the payload of the pong message. The size of the payload should not exceed
                125 bytes.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.WriteMessage(Noemax.WebSockets.Core.MessageEndCallback,System.Object)">
            <summary>
                Creates a input writing message payload into WebSocket connection as a sequence of fragment frames.
            </summary>
            <param name="callback">Callback being called when message input is closed and message is fully sent.</param>
            <param name="state">The state associated to the outbound message.</param>
            <returns>The input for writing outbound message.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.BeginSendMessage(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins asynchronous operation to sends message.
            </summary>
            <param name="text">The text message to be sent asynchronously.</param>
            <param name="timeout">The Timespan that specifies how long the send operation has to complete before timing out.</param>
            <param name="callback">The callback that receives the notification when the operation is complete.</param>
            <param name="state">The object that contains the state information associated to the operation.</param>
            <returns>The IAsyncResult that references the asynchronous send operation.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.BeginSendMessage(System.Byte[],System.Int32,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins asynchronous operation to sends message.
            </summary>
            <param name="buffer">The buffer that contains bytes of message to send.</param>
            <param name="offset">The offset in the buffer where bytes of message start.</param>
            <param name="count">The length of the message in bytes.</param>
            <param name="timeout">The Timespan that specifies how long the send operation has to complete before timing out.</param>
            <param name="callback">The callback that receives the notification when the operation is complete.</param>
            <param name="state">The object that contains the state information associated to the operation.</param>
            <returns>The IAsyncResult that references the asynchronous send operation.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.BeginSendMessage(System.ArraySegment{System.Byte},System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins asynchronous operation to sends message.
            </summary>
            <param name="bufferedMessage">The segment of an array of containing payload of the message to send.</param>
            <param name="timeout">The Timespan that specifies how long the send operation has to complete before timing out.</param>
            <param name="callback">The callback that receives the notification when the operation is complete.</param>
            <param name="state">The object that contains the state information associated to the operation.</param>
            <returns>The IAsyncResult that references the asynchronous send operation.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.BeginSendMessage(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins asynchronous operation to sends message.
            </summary>
            <param name="message">The outbound message to send.</param>
            <param name="timeout">The Timespan that specifies how long the send operation has to complete before timing out.</param>
            <param name="callback">The callback that receives the notification when the operation is complete.</param>
            <param name="state">The object that contains the state information associated to the operation.</param>
            <returns>The IAsyncResult that references the asynchronous send operation.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.EndSendMessage(System.IAsyncResult)">
            <summary>
                Completes asynchronous send operation.
            </summary>
            <param name="result">The IAsyncResult returned by a call to the BeginSendMessage method. </param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[],System.TimeSpan)">
            <summary>
                Sends a batch of the messages asynchronously.
            </summary>
            <param name="batch">The batch of messages to send.</param>
            <param name="timeout">The Timespan that specifies how long the send operation has to complete before timing out.</param>
            <remarks>
                <para>
                    This methods sends batch of messages in fire-and-forget mode, without waiting for completion. If send operation
                    failed than subsequent
                    send or receive operation will return error and connection is closed.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.SendMessageAsync(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
                Sends message asynchronously.
            </summary>
            <param name="message">The message to send asynchronously.</param>
            <param name="timeout">The Timespan that specifies how long the send operation has to complete before timing out.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.WaitForOutboundQueue(System.Int64,System.TimeSpan)">
            <summary>
                Waits for outbound message queue size to decrease to a specified value for a specified period of time.
            </summary>
            <param name="queueSize">The target outbound queue size.</param>
            <param name="timeout">The period of time to wait for the outbound queue to decrease to given size.</param>
            <returns>True if the queue decreased to specified size during the specified period of time; otherwise False.</returns>
            <seealso cref="P:Noemax.WebSockets.Core.WebSocket.OutboundQueueSize"/>
            <seealso cref="P:Noemax.WebSockets.Core.WebSocket.MaxOutboundQueueSize"/>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.WaitForOutboundQueue(System.TimeSpan)">
            <summary>
                Waits for all outbound messages in the message queue to be sent for specified period of time.
            </summary>
            <param name="timeout">The period of time to wait for all outbound messages to be sent.</param>
            <returns></returns>
            <seealso cref="P:Noemax.WebSockets.Core.WebSocket.OutboundQueueSize"/>
            <seealso cref="P:Noemax.WebSockets.Core.WebSocket.MaxOutboundQueueSize"/>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.IsWaitingInboundMessage">
            <summary>
                Returns whether the WebSocket is waiting for inbound messages.
            </summary>
            <returns>
                Returns <b>True</b> if the WebSocket waiting to receive the message. When there is no receive operations
                pending returns <b>False</b>.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.OnProcessControlFrame(Noemax.WebSockets.Core.ControlFrameEventArgs)">
            <summary>
                Processes inbound control frames/
            </summary>
            <param name="args">The event arguments providing description of the inbound control frames.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.BeginReceiveMessage(System.AsyncCallback,System.Object)">
            <summary>
                Begins an asynchronous operation to receive a message that has a state object associated with it.
            </summary>
            <param name="callback">
                The AsyncCallback delegate that receives the notification of the asynchronous operation
                completion.
            </param>
            <param name="state">
                An object, specified by the application, that contains state information associated with the
                asynchronous operation.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.BeginReceiveMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins an asynchronous operation to receive a message that has a specified time out and state object associated
                with it.
            </summary>
            <param name="callback">
                The AsyncCallback delegate that receives the notification of the asynchronous
                operation completion.
            </param>
            <param name="state">
                An object, specified by the application, that contains state information associated
                with the asynchronous operation.
            </param>
            <param name="timeout">
                The Timespan that specifies the interval of time to wait for a message
                to become available.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.EndReceiveMessage(System.IAsyncResult,System.IO.Stream@)">
            <summary>Completes an asynchronous operation to receive a message</summary>
            <param name="result">The IAsyncResult returned by a call to one of the BeginReadMessage methods.</param>
            <param name="stream"> The input that reads data from the payload of inbound message. </param>
            <returns>True if message was successfully received; False if connection being closed.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.EndReceiveMessage(System.IAsyncResult)">
            <summary>Completes an asynchronous operation to receive a message</summary>
            <param name="result">The IAsyncResult returned by a call to one of the BeginReadMessage methods.</param>
            <returns>
                The instance of WebSocketInboundMessage that represent the inbound message.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.EndReceiveMessage(System.IAsyncResult,System.ServiceModel.Channels.BufferManager,System.Int64,System.ArraySegment{System.Byte}@)">
            <summary>Completes an asynchronous operation to receive a message and present it as byte array segment.</summary>
            <param name="result">The IAsyncResult returned by a call to one of the BeginReadMessage methods.</param>
            <param name="bufferManager">The buffer manager to provide buffers while receiving the message.</param>
            <param name="maxMessageSize">The maximum size limit for message being read.</param>
            <param name="message">The segment of array of bytes containing the message bytes.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.EndReceiveMessage(System.IAsyncResult,System.String@)">
            <summary>Completes an asynchronous operation to receive a message and decodes it as UTF-8 string.</summary>
            <param name="result">The IAsyncResult returned by a call to one of the BeginReadMessage methods.</param>
            <param name="text">The the message decoded as UTF-8 a string.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocket.ReceiveAsync(System.TimeSpan)">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.DefaultReceiveTimeout">
            <summary>Gets and sets a default timeout to be used when receiving incoming messages.</summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.DefaultSendTimeout">
            <summary>Gets and sets a default timeout to be used when sending outgoing messages.</summary>
        </member>
        <member name="E:Noemax.WebSockets.Core.WebSocket.OnPing">
            <summary>
                Notifies the event handlers when Ping frame was received from the remote endpoint.
            </summary>
        </member>
        <member name="E:Noemax.WebSockets.Core.WebSocket.OnPong">
            <summary>
                Notifies the event handlers when Pong frame was received from the remote endpoint.
            </summary>
        </member>
        <member name="E:Noemax.WebSockets.Core.WebSocket.OnCloseFrame">
            <summary>
                Notifies the event handlers when Close frame was received from the remote endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.IsServerSide">
            <summary>
                Gets whether the WebSocket connection is on the server side and managed by the WebSocket listener.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.CanSend">
            <summary>
                Gets the value that indicate whether WebSocket is able to send messages.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.CanReceive">
            <summary>
                Gets the value that indicate whether WebSocket is expected to receive messages.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.Protocol">
            <summary>Gets a string that defines a Sub-Protocol used by this WebSocket connection.</summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.Origin">
            <summary>Gets a string that defines an Origin of this WebSocket connection.</summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.PayloadMasking">
            <summary>
                Get or sets whether payload of outbound messages is masked.
            </summary>
            <remarks>
                <para>
                    By default all messages from the client to the server are masked, while all messages from the server to
                    the client are not masked, as required by the WebSocket protocol specification.
                </para>
                <para>
                    You can disable or enable masking by setting this property, but strict WebSocket implementations
                    will drop the connection if masking requirements are not followed.
                </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.KeepaliveSendInterval">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.KeepaliveTimeout">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.KeepaliveMode">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.KeepaliveResponseThrottlingInterval">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.KeepaliveRoundtripRequired">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.Via">
            <summary>
                Gets the _uri of remote endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.AuthenticationContext">
            <summary>
                Gets the context object created during authentication of the WebSocket connection.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.OutboundQueueSize">
            <summary>
                Gets and sets the current size of outbound message queue.
            </summary>
            <remarks>
                The size of outbound message queue reflects a amount of bytes pending to be sent asynchronously.
                It does not always reflect an amount of memory used by the outbound message queue per WebSocket connection.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.MaxOutboundQueueSize">
            <summary>
                Gets and sets the maximum size of outbound message queue.
            </summary>
            <seealso cref="P:Noemax.WebSockets.Core.WebSocket.OutboundQueueSize"/>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.MaxOutboundFrameSize">
            <summary>
                Gets and sets the maximum size of outbound frame produced by the WebSocket.
            </summary>
            <value>The maximum size of outbound message frame in bytes.</value>
            <remarks>
                <para>
                    The property controls the message fragmentation which is transparently performed by the WebSocket whenever
                    necessary.
                    If message is greater than the value specified by this property, it will be fragmented on frames that are
                    smaller than specified value in bytes.
                </para>
                <para>
                    Note: When WebSocket framing extensions like compression are used by the channel, the final size of the frame
                    may not necessary adhere
                    to limit set by this property.
                </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.Context">
            <summary>
                Gets and sets the object that associated to the context of the WebSocket instance.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.State">
            <summary>
                Gets the state of the WebSocket connection.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.Extensions">
            <summary>
                Gets a Sec-WebSocket-Extensions header string negotiated during the WebSocket handshake.
            </summary>
            <remarks>
                This string specifies the set of extensions that were agreed to be used during communication by
                both the server and the client side.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.Connected">
            <summary>
                Gets the value that indicate whether the WebSocket is connected.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocket.IsFailed">
            <summary>
                Returns <b>True</b> if WebSocket connection is failed due to error.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketChannel">
            <summary>
                Defines the WebSocket channel interface.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Noemax.WebSockets.WebSocketChannel"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.NotifyClosed(Noemax.WebSockets.Core.WebSocketCloseEventArgs)">
            <summary />
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.NotifyError(System.Exception)">
            <summary />
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.NotifyPing(Noemax.WebSockets.Core.WebSocketPingOrPongEventArgs)">
            <summary />
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.NotifyPong(Noemax.WebSockets.Core.WebSocketPingOrPongEventArgs)">
            <summary />
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Abort">
            <summary>
                Interrupt all ongoing operation and closes the network connection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Abort(System.Int32,System.String)">
            <summary>
                Interrupt all ongoing operation and closes the network connection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Close">
            <summary>
                Wait for ongoing operation to be complete and closes the network connection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.GetServiceInstance">
            <summary>
                When overridden returns an IWebSockets instance to handle messages received by the channel.
            </summary>
            <returns>
                Returns an instance of IWebSocket service to handle message received by the channel.
            </returns>
            <remarks>
                Overriding this methods allows inherited class to initialize a new instance of the service in case
                if it was not set by application code. E.g. <see cref="T:Noemax.WebSockets.WebSocketClient`1"/> can automatically
                initialize the instance of the class using default constructor of typed parameter.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Close(System.TimeSpan)">
            <summary>
                Wait for ongoing operation to be complete during specified interval of time and closes the network connection.
            </summary>
            <param name="timeout">
                The interval of time to wait for ongoing operations to be completed, prior closing the connection.
            </param>
            <remarks>
                Prior connection is closed, WebSocketChannel waits for ongoing inbound and outbound transfers
                to be completed for specified period of time. Once timeout expire or all ongoing transfers are complete,
                connection is getting closed and all associated resources are released.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.AddProperty``1(``0)">
            <summary>
                Adds the object of the specified type to the collection of associated objects.
            </summary>
            <typeparam name="T">The type of the object being added.</typeparam>
            <param name="obj">The object of the specified type.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.GetProperty``1">
            <summary>
                Returns the object of specified type associated to the channel.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <returns>The object of specified type or null if object of the specified type was not found.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[],System.TimeSpan)">
            <summary>
                Sends the batch of the messages asynchronously.
            </summary>
            <param name="messages">The batch of messages to be sent.</param>
            <param name="timeout">
                The amount of time during which to wait for messages to be sent. TimeoutException
                will be thrown if messages is not completely sent within the specified period of the time.
            </param>
            <remarks>
                <para>
                    When message is sent asynchronously it's first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread-safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.BeginSendMessage(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins an asynchronous operation to send a message to the remote endpoint.
            </summary>
            <param name="message">The string identifying the operation to which the message is getting sent.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
            <param name="callback">
                The AsyncCallback delegate that receives the notification of the completion of the asynchronous
                operation transmitting a request message.
            </param>
            <param name="state">The state associated to the asynchronous operation.</param>
            <returns>The IAsyncResult that references the asynchronous request operation.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.EndSendMessage(System.IAsyncResult)">
            <summary>
                Completes an asynchronous send operation.
            </summary>
            <param name="result">The IAsyncResult that references the asynchronous request operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[])">
            <summary>
                Sends the batch of the messages asynchronously.
            </summary>
            <param name="messages">The batch of messages to be sent.</param>
            <remarks>
                <para>
                    When message is sent asynchronously it's first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Send(Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
                Sends the message asynchronously.
            </summary>
            <param name="message">WebSocketOutboundMessage value containing the message.</param>
            <remarks>
                This methods does not always send message a single fragment. For example, when compression extensions are used,
                message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Send(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
                Sends the message asynchronously.
            </summary>
            <param name="message">WebSocketOutboundMessage value containing the message.</param>
            <param name="timeout">
                The amount of time during which to wait for message to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified period of the time.
            </param>
            <remarks>
                This methods does not always send message a single fragment. For example, when compression extensions are used,
                message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Send(System.ArraySegment{System.Byte})">
            <summary>
                Sends a binary message with a specified array segment as a payload.
            </summary>
            <param name="message">The segment of array being sent as a payload.</param>
            <remarks>
                This methods does not always send message a single fragment. For example, when compression extensions are used,
                message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Send(System.ArraySegment{System.Byte},System.TimeSpan)">
            <summary>
                Sends a binary message with a specified array segment as a payload.
            </summary>
            <param name="message">The segment of array being sent as a payload.</param>
            <param name="timeout">
                The interval of time during which to wait for message to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified interval of the time.
            </param>
            <remarks>
                This methods does not always send message a single fragment. For example, when compression extensions are used,
                message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Send(System.Byte[])">
            <summary>
                Sends a binary message with a specified array of bytes as a payload.
            </summary>
            <param name="buffer">
                The byte array being sent as a payload.
            </param>
            <remarks>
                This methods does not always send message a single fragment. For example, when compression extensions are used,
                message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sends a binary message with a specified segment of array as a payload.
            </summary>
            <param name="buffer">
                The array with bytes being sent.
            </param>
            <param name="offset">
                The offset of bytes being sent in a specified array.
            </param>
            <param name="count">
                The number of bytes to send.
            </param>
            <remarks>
                This methods does not always send message a single fragment. For example, when compression extensions are used,
                message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Send(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
                Sends a binary message with a specified segment of array as a payload within specified interval of time.
            </summary>
            <param name="buffer">
                The array containing the bytes being sent.
            </param>
            <param name="offset">
                The offset of bytes being sent in a specified array.
            </param>
            <param name="count">
                The number of bytes to send.
            </param>
            <param name="timeout">
                The interval of time during which the operation have to complete before timing out.
            </param>
            <remarks>
                This methods does not always send message a single fragment. For example, when compression extensions are used,
                message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Send(System.String)">
            <summary>
                Sends a text message with a specified string as a payload within a specified interval of time.
            </summary>
            <param name="text">The text payload of the message.</param>
            <remarks>
                This methods does not always send message a single fragment. For example, when compression extensions are used,
                message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Send(System.String,System.TimeSpan)">
            <summary>
                Sends a text message with a specified string as a payload.
            </summary>
            <param name="text">
                The string being sent as a payload.
            </param>
            <param name="timeout">
                The interval of time during which the operation have to complete before timing out.
            </param>
            <remarks>
                This methods does not always send message a single fragment. For example, when compression extensions are used,
                message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage">
            <summary>
                Streams the binary message to the remote side.
            </summary>
            <returns>
                The input to write the outbound message payload into.
            </returns>
            <remarks>
                <para>
                    This method is part of the streaming API, it allows to input messages of arbitrary size to
                    remote side and avoid buffering entire message in the memory.
                </para>
                <para>
                    The input returned by this methods, writes the message payload directly into WebSocket
                    connection.
                </para>
                <para>
                    Fragmentation and buffering are performed automatically. As soon as input buffer have
                    to be flushed, buffered bytes are sent as a message fragment and become available on
                    remote side.
                </para>
                <para>
                    If amount of bytes being written in single write operation is more than
                    the size of input buffer, then these bytes are getting combined with bytes
                    already buffered and sent as a single fragment.
                </para>
                <para>
                    You can force input to send buffered bytes by calling Flush() method.
                </para>
                <para>
                    You can input any amount of data as payload of the message until you decide to close it.
                    Closing the input concludes the outbound message and final fragment frame is
                    sent to remote side to indicate the end of the message.
                </para>
                <para>
                    The flow control is performed by TCP layer. The writing side is getting blocked
                    if remote side input buffers are full. As faster remote side reads data, as faster the local
                    side can continue sending.
                </para>
                <b>Note: WebSocket connection cannot input more than one message concurrently.</b>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(System.TimeSpan)">
            <summary>
                Streams the binary message to the remote side.
            </summary>
            <returns>
                The input to write the outbound message payload into.
            </returns>
            <remarks>
                <para>
                    This method is part of the streaming API, it allows to input messages of arbitrary size to
                    remote side and avoid buffering entire message in the memory.
                </para>
                <para>
                    The input returned by this methods, writes the message payload directly into WebSocket
                    connection.
                </para>
                <para>
                    Fragmentation and buffering are performed automatically. As soon as input buffer have
                    to be flushed, buffered bytes are sent as a message fragment and become available on
                    remote side.
                </para>
                <para>
                    If amount of bytes being written in single write operation is more than
                    the size of input buffer, then these bytes are getting combined with bytes
                    already buffered and sent as a single fragment.
                </para>
                <para>
                    You can force input to send buffered bytes by calling Flush() method.
                </para>
                <para>
                    You can input any amount of data as payload of the message until you decide to close it.
                    Closing the input concludes the outbound message and final fragment frame is
                    sent to remote side to indicate the end of the message.
                </para>
                <para>
                    The flow control is performed by TCP layer. The writing side is getting blocked
                    if remote side input buffers are full. As faster remote side reads data, as faster the local
                    side can continue sending.
                </para>
                <b>Note: WebSocket connection cannot input more than one message concurrently.</b>
            </remarks>
            <param name="timeout">
                The interval of time during which the operation have to complete before timing out.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendTextMessage(System.TimeSpan)">
            <summary>
                Streams the text message to the remote side.
            </summary>
            <returns>
                The text writer to write the outbound message payload into.
            </returns>
            <remarks>
                Streams fragmented text message to remote side using the input provided by
                <see cref="M:Noemax.WebSockets.WebSocketChannel.SendMessage"/>.
            </remarks>
            <param name="timeout">
                The interval of time during which the message is expected to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified interval of time.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendClose(System.Int16,System.String,System.TimeSpan)">
            <summary>
                Sends the CLOSE control frame with specified statusCode and reason string.
            </summary>
            <param name="statusCode">
                The status code in range of 1000-4999 that specifies the reason why connection is being
                closed.
            </param>
            <param name="reason">
                The string description of the status. Not required to be human readable but UTF-8 representation
                of the string should not exceed 125 bytes.
            </param>
            <param name="timeout">The amount of time to wait for CLOSE frame to be sent, prior TimeoutException is thrown.</param>
            <remarks>
                When CLOSE frame is sent to remote side, no more messages or fragments can be sent though the connection.
                Local side can continue receiving pending messages until connection is closed by remote side.
                SendClose() does not close the connection,  <see cref="M:Noemax.WebSockets.WebSocketChannel.Close(System.TimeSpan)"/> method need to be called to close
                connection and release all associated resources.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendAsync(Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
                Sends a message within a specified interval of time asynchronously.
            </summary>
            <param name="message">
                The message being sent.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendAsync(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
                Sends the message asynchronously.
            </summary>
            <param name="message">The outbound message to send.</param>
            <param name="timeout">
                The interval of time during which the operation have to complete before timing out.
            </param>
            <remarks>
                <para>
                    When message is sent asynchronously it is first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sends the message asynchronously.
            </summary>
            <param name="buffer">The buffer containing the message payload.</param>
            <param name="offset">The index in the buffer where message payload starts.</param>
            <param name="count">The length of the message payload in bytes.</param>
            <remarks>
                <para>
                    When message is sent asynchronously it is first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread-safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendAsync(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
                Sends the message asynchronously.
            </summary>
            <param name="buffer">The buffer containing the message payload.</param>
            <param name="offset">The index in the buffer where message payload starts.</param>
            <param name="count">The length of the message payload in bytes.</param>
            <param name="timeout">
                The amount of time during which to wait for message to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified period of the time.
            </param>
            <remarks>
                <para>
                    When message is sent asynchronously it is first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread-safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendAsync(System.String)">
            <summary>
                Sends the message asynchronously.
            </summary>
            <param name="text">The text payload of the message.</param>
            <remarks>
                <para>
                    When message is sent asynchronously it is first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread-safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendAsync(System.String,System.TimeSpan)">
            <summary>
                Sends the message asynchronously.
            </summary>
            <param name="text">The text payload of the message.</param>
            <param name="timeout">
                The amount of time during which to wait for message to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified period of the time.
            </param>
            <remarks>
                <para>
                    When message is sent asynchronously it is first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread-safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendPing">
            <summary>
                Sends the ping message.
            </summary>
            <remarks>
                The pong message is sent automatically when ping message is received.
                The <see cref="M:Noemax.WebSockets.IWebSockets.OnPong(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})"/> method of associated service will be called,
                upon receiving the pong reply to the ping message.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendPing(System.Byte[])">
            <summary>
                Sends the ping message with a specified binary payload.
            </summary>
            <param name="payload">
                The array of bytes being sent as payload of the ping message.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.WaitForOutboundQueue(System.Int64,System.TimeSpan)">
            <summary>
                Waits for outbound message queue size in bytes decrease below a specified limit within a
                specified interval of time.
            </summary>
            <param name="queueSize">
                The number of bytes below which the queue size is expected decrease within
                the specified interval of time.
            </param>
            <param name="timeout">
                The interval of time to wait for the queue size to decrease below the specified limit.
            </param>
            <returns>
                Returns <b>true</b> if the queue size had decreased below specified; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="E:Noemax.WebSockets.WebSocketChannel.Closed">
            <summary />
        </member>
        <member name="E:Noemax.WebSockets.WebSocketChannel.Error">
            <summary />
        </member>
        <member name="E:Noemax.WebSockets.WebSocketChannel.Ping">
            <summary />
        </member>
        <member name="E:Noemax.WebSockets.WebSocketChannel.Pong">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.State">
            <summary>
                Gets and sets the states of WebSocket connection.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.Context">
            <summary>
                The context object associated to the channel.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.AuthenticationContext">
            <summary>
                Gets authentication context assigned to the channel when it was authenticated by the server endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.Connected">
            <summary>
                Gets whether the channel connection is considered being alive.
            </summary>
            <remarks>
                <para>
                    This property reports the last operation state of the channel rather than performs the actual
                    TCP connectivity checks.
                </para>
                <para>
                    When this property value is <b>true</b>, it indicates that channel is not being closed and
                    last send/receive operations where completed successfully.
                </para>
                <para>
                    When this property value is <b>false</b>, it indicates that channel is either being closed
                    or closed. This does not exclude the possibility that channel is in transition state and
                    may still be able to send or receive messages.
                </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.RemoteEndpoint">
            <summary>
            Gets the IP address of remote TCP/IP endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.LocalEndpoint">
            <summary>
            Get the IP address of local TCP/IP endpoint
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.ID">
            <summary>
                Gets and sets the string identifier of the channel.
            </summary>
            <remarks>
                By default this property is set to a GUID assigned by <see cref="T:Noemax.WebSockets.WebSocketService"/>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize">
            <summary>
                Gets and sets the maximum number of bytes pending to be sent in outbound message queue.
            </summary>
            <remarks>
                When the number of bytes pending to be sent grows over the specified number,
                <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown
                upon attempt to send more messages. WebSocket can continue sending messages once <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
                number goes below
                the specified number.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize">
            <summary>
                Gets the number of bytes pending to be sent in outbound message queue.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.Origin">
            <summary>
                Gets origin string negotiated during the WebSocket handshake.
            </summary>
            <remarks>
                The Origin string may be required by WebSocket server to identify the script that
                runs on the client side when WebSocket is used by a browser client. This optional
                header is exchanged during the WebSocket handshake, both the server and the client
                may drop a connection if the value of the Origin string does not match their
                expectation.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.Protocol">
            <summary>
                Gets and sets the list of Sub-Protocols used by the channel.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.PayloadMasking">
            <summary> Gets and sets whether the payload of outbound messages is masked.</summary>
            <remarks>
                <para>
                    By default all messages from the client to the server are masked, while all messages from the server to
                    the client are not masked, as required by the WebSocket protocol specification.
                </para>
                <para>
                    You can disable or enable masking by setting this property, but strict WebSocket implementations
                    will drop the connection if masking requirements are not followed.
                </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.Via">
            <summary>
                Gets the URI to which this channel was established.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.ServiceInstance">
            <summary>The instance of the IWebSocket handling inbound messages.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.Serializer">
            <summary>
                Gets and sets the <see cref="T:Noemax.WebSockets.Messaging.IMessageSerializer"/> used by the channel to deserialize/serialize objects from/to
                binary or text messages.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.ClientDispatcher">
            <summary>
                Gets the <see cref="T:Noemax.WebSockets.Messaging.IClientDispatcher"/> being used for sending request and dispatching responses.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.DefaultSendTimeout">
            <summary>
                Gets and sets the default timeout interval, to be used when sending messages.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.DefaultReceiveTimeout">
            <summary>
                Gets and sets the default timeout interval, to be used when receiving messages.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.KeepaliveSendInterval">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.KeepaliveTimeout">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.KeepaliveMode">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.KeepaliveResponseThrottlingInterval">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.KeepaliveRoundtripRequired">
            <summary />
        </member>
        <member name="T:Noemax.WebSockets.WebSocketClient`1">
            <summary>
            Provides the WebSocket protocol client connection.
            </summary>
            <typeparam name="TService">
            The  <see cref="T:Noemax.WebSockets.IWebSockets">IWebSockets</see> implementation
            providing the application logic for handling connections and messages.
            </typeparam>
            <remarks>
            <para>
            The instance of TService class must implement IWebSockets interface to handle messages received from the server side.
            </para>
            <para>
            The TService instance will be created and initialized automatically unless already existing instance is 
            provided to WebSocketClient constructor. When already existing instance is shared between multiple 
            WebSocketClient objects, it can be used for broadcasting messages through multiple client connections.
            </para>
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketClient">
            <summary>
            Provides the WebSocket protocol client connection.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketConnectionChannel">
            <summary>
                Provides methods and properties for exchanging messages over WebSocket connection.
            </summary>
            <remarks>
                <para>
                    WebSocketChannel provides methods and properties for sending messages through
                    the WebSocket connection. The messages received through the channel are dispatched by
                    the <see cref="P:Noemax.WebSockets.WebSocketConnectionChannel.ServiceInstance"/> instance associated to the channel.
                </para>
                <para>
                    This class is used on both ends of WebSocket connection and provides truly duplex
                    communication between client and server.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.#ctor">
            <summary>
                Initializes a new instance of WebSocketChannel.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.Abort">
            <summary>
                Interrupt all ongoing operation and closes the network connection.
            </summary>
            <remarks>
                Works the same way as <see cref="M:Noemax.WebSockets.WebSocketConnectionChannel.Close(System.TimeSpan)"/> method but does not wait for
                ongoing operations to be completed.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.Abort(System.Int32,System.String)">
            <summary>
                Aborts the connection and also sent the close frame with the specified status code and text description.
            </summary>
            <param name="status">The status code to send to the remote endpoint.</param>
            <param name="description">The text description to send to the remote endpoint.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.Close(System.TimeSpan)">
            <summary>
                Wait for ongoing operation to be complete during specified interval of time and closes the network connection.
            </summary>
            <param name="timeout">
                The interval of time to wait for ongoing operations to be completed, prior closing the connection.
            </param>
            <remarks>
                Prior connection is closed, WebSocketChannel waits for ongoing inbound and outbound transfers
                to be completed for specified period of time. Once timeout expire or all ongoing transfers are complete,
                connection is getting closed and all associated resources are released.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.Send(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
                Sends a binary message with a specified array segment as a payload within a specified interval of time.
            </summary>
            <param name="buffer">The buffer containing the message payload.</param>
            <param name="offset">The index in the buffer when message payload starts.</param>
            <param name="count">The length of the message payload in bytes.</param>
            <param name="timeout">
                The interval of time during which to wait for message to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified interval of the time.
            </param>
            <remarks>
                Using this methods does not always guaranty that the message is going to be sent as a single fragment.
                For example, when compression extensions are used, message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.Send(System.String,System.TimeSpan)">
            <summary>
                Sends a text message with a specified string as a payload within a specified interval of time.
            </summary>
            <param name="text">The text payload of the message.</param>
            <param name="timeout">
                The interval of time during which to wait for message to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified interval of the time.
            </param>
            <remarks>
                Using this methods does not always guaranty that the message is going to be sent as a single fragment.
                For example, when compression extensions are used, message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.Send(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
                Sends a message within a specified interval of time.
            </summary>
            <param name="message">WebSocketOutboundMessage value containing the message.</param>
            <param name="timeout">
                The interval of time during which to wait for message to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified interval of time.
            </param>
            <remarks>
                Using this methods does not always guaranty that the message is going to be sent as a single fragment.
                For example, when compression extensions are used, message may have to be fragmented due to
                extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.SendMessage(System.TimeSpan)">
            <summary>
                Streams the binary message to the remote side.
            </summary>
            <returns>
                The input to write the outbound message payload into.
            </returns>
            <remarks>
                <para>
                    This method is part of the streaming API, it allows to input messages of arbitrary size to
                    remote side and avoid buffering entire message in the memory.
                </para>
                <para>
                    The input returned by this methods, writes the message payload directly into WebSocket
                    connection.
                </para>
                <para>
                    Fragmentation and buffering are performed automatically. As soon as input buffer have
                    to be flushed, buffered bytes are sent as a message fragment and become available on
                    remote side.
                </para>
                <para>
                    If amount of bytes being written in single write operation is more than
                    the size of input buffer, then these bytes are getting combined with bytes
                    already buffered and sent as a single fragment.
                </para>
                <para>
                    You can force input to send buffered bytes by calling Flush() method.
                </para>
                <para>
                    You can input any amount of data as payload of the message until you decide to close it.
                    Closing the input concludes the outbound message and final fragment frame is
                    sent to remote side to indicate the end of the message.
                </para>
                <para>
                    The flow control is performed by TCP layer. The writing side is getting blocked
                    if remote side input buffers are full. As faster remote side reads data, as faster the local
                    side can continue sending.
                </para>
                <b>Note: WebSocket connection cannot input more than one message concurrently.</b>
            </remarks>
            <param name="timeout">
                The interval of time during which the message is expected to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified interval of time.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.SendTextMessage">
            <summary>
                Streams the text message to the remote side.
            </summary>
            <returns>
                The text writer to write the outbound message payload into.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.SendTextMessage(System.TimeSpan)">
            <summary>
                Streams the text message to the remote side.
            </summary>
            <returns>
                The text writer to write the outbound message payload into.
            </returns>
            <param name="timeout">
                The interval of time during which the message is expected to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified interval of time.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.SendPing">
            <summary>
                Sends the ping message.
            </summary>
            <remarks>
                The PONG message is sent automatically when PING message is received. The <see cref="M:Noemax.WebSockets.IWebSockets.OnPong(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})"/> method
                of associated
                service will be called, upon receiving the PONG reply to the ping message.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.SendPing(System.Byte[])">
            <summary>
                Sends the ping message with a specified binary payload.
            </summary>
            <param name="payload">
                The array of bytes being sent as payload of the ping message.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.SendAsync(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
                Sends the message asynchronously.
            </summary>
            <param name="buffer">The buffer containing the message payload.</param>
            <param name="offset">The index in the buffer when message payload starts.</param>
            <param name="count">The length of the message payload in bytes.</param>
            <param name="timeout">
                The amount of time during which to wait for message to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified period of the time.
            </param>
            <remarks>
                <para>
                    When message is sent asynchronously it is first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread-safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketConnectionChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketConnectionChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.SendAsync(System.String,System.TimeSpan)">
            <summary>
                Sends the message asynchronously.
            </summary>
            <param name="text">The text payload of the message.</param>
            <param name="timeout">
                The amount of time during which to wait for message to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified period of the time.
            </param>
            <remarks>
                <para>
                    When message is sent asynchronously it is first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread-safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketConnectionChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketConnectionChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.SendAsync(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
                Sends the message asynchronously.
            </summary>
            <param name="message">WebSocketOutboundMessage value containing the message.</param>
            <param name="timeout">
                The amount of time during which to wait for message to be sent. TimeoutException
                will be thrown if message is not completely sent within the specified period of the time.
            </param>
            <remarks>
                <para>
                    When message is sent asynchronously it is first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread-safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketConnectionChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketConnectionChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[],System.TimeSpan)">
            <summary>
                Sends the batch of the messages asynchronously.
            </summary>
            <param name="messages">The batch of messages to be sent.</param>
            <param name="timeout">
                The amount of time during which to wait for messages to be sent. TimeoutException
                will be thrown if messages is not completely sent within the specified period of the time.
            </param>
            <remarks>
                <para>
                    When message is sent asynchronously it's first getting added into the outbound message queue.
                    If another asynchronous send operation is currently in progress, then the messages
                    in the outbound queue are sent once ongoing send operation is complete.
                </para>
                <para>
                    This method is thread safe and can be called by multiple working threads concurrently.
                </para>
                <para>
                    You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketConnectionChannel.OutboundQueueSize"/>
                    and <see cref="P:Noemax.WebSockets.WebSocketConnectionChannel.MaxOutboundQueueSize"/> properties.
                </para>
                <para>
                    If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
                    <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
                    limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
                </para>
                <para>
                    Warning: Application must not use synchronous and asynchronous send methods concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.SendClose(System.Int16,System.String,System.TimeSpan)">
            <summary>
                Sends the CLOSE control frame with specified statusCode and reason string.
            </summary>
            <param name="statusCode">
                The status code in range of 1000-4999 that specifies the reason why connection is being
                closed.
            </param>
            <param name="reason">
                The string description of the status. Not required to be human readable but UTF-8 representation
                of the string should not exceed 125 bytes.
            </param>
            <param name="timeout">The amount of time to wait for CLOSE frame to be sent, prior TimeoutException is thrown.</param>
            <remarks>
                When CLOSE frame is sent to remote side, no more messages or fragments can be sent though the connection.
                Local side can continue receiving pending messages until connection is closed by remote side.
                SendClose() does not close the connection,  <see cref="M:Noemax.WebSockets.WebSocketConnectionChannel.Close(System.TimeSpan)"/> method need to be called to close
                connection and release all associated resources.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.WaitForOutboundQueue(System.Int64,System.TimeSpan)">
            <summary>
                Waits until outbound queue decrease below specified limit.
            </summary>
            <param name="queueSize">The limit below which the queue size is expected to decrease.</param>
            <param name="timeout">The amount of time to wait for queue to decrease below specified limit.</param>
            <returns><b>true</b> if the queue decreased below specified limit; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.BeginSendMessage(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins an asynchronous operation to send a message to the remote endpoint.
            </summary>
            <param name="message">The string identifying the operation to which the message is getting sent.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
            <param name="callback">
                The AsyncCallback delegate that receives the notification of the completion of the asynchronous
                operation transmitting a request message.
            </param>
            <param name="state">The state associated to the asynchronous operation.</param>
            <returns>The IAsyncResult that references the asynchronous request operation.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketConnectionChannel.EndSendMessage(System.IAsyncResult)">
            <summary>
                Completes an asynchronous send operation.
            </summary>
            <param name="result">The IAsyncResult that references the asynchronous request operation.</param>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.State">
            <summary>
                Gets and sets the states of WebSocket connection.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.Context">
            <summary>
                The context object associated to the channel.
            </summary>
            <remarks>
                This property allows to associate any application specific object to the channel.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.ID">
            <summary>
                Gets and sets the string identifier of the channel.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.Via">
            <summary>
                Gets the URI via which the channel was established.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.Origin">
            <summary>
                Gets origin string negotiated during the WebSocket handshake.
            </summary>
            <remarks>
                The Origin string may be required by WebSocket server to identify the script that
                runs on the client side when WebSocket is used by a browser client. This optional
                header is exchanged during the WebSocket handshake, both the server and the client
                may drop a connection if the value of the Origin string does not match their
                expectation.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.Protocol">
            <summary>
                Gets the protocol negotiated during the WebSocket handshake.
            </summary>
            <remarks>
                Protocol string value is getting exchanged during the WebSocket handshake.
                Applications can use this value to negotiate the type of the protocol that is going to be used
                during communication e.g. 'chat', 'echo', 'atom' e.t.c.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.PayloadMasking">
            <summary>
                Gets and sets whether the payload of outbound messages is masked.
            </summary>
            >
            <remarks>
                <para>
                    By default all messages from the client to the server are masked, while all messages from the server to
                    the client are not masked, as required by the WebSocket protocol specification.
                </para>
                <para>
                    You can disable or enable masking my setting this property, but strict WebSocket implementations
                    may drop the connection if masking requirements are not followed.
                </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.ServiceInstance">
            <summary>
                Gets and sets the instance of <see cref="T:Noemax.WebSockets.IWebSockets"/> to perform dispatching of inbound messages.
            </summary>
            <remarks>
                <para>
                    Using this property a you can change the instance of IWebSockets that dispatches inbound message at any moment
                    during communication.
                </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.MaxOutboundQueueSize">
            <summary>
                Gets and sets the maximum size of the outbound message queue.
            </summary>
            <remarks>
                <para>
                    If asynchronous send operations would result in outbound queue size exceeding the specified limit,
                    it fails with <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> thrown.
                </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.MaxOutboundFrameSize">
            <summary>
                Gets and sets the maximum size limit for outbound data frame.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.OutboundQueueSize">
            <summary>
                Gets the current size of the outbound message queue in bytes.
            </summary>
            <remarks>
                <para>
                    The size of outbound queue does not indicate an amount of memory used by the queue, but it
                    represents the number of bytes that is pending to be sent.
                </para>
                <para>
                    When message is added to the queue, it's payload is not getting copied, but referenced
                    until the message is sent, so corresponding buffers should not be modified during asynchronous
                    send operation.
                </para>
                <para>
                    Only messages that are being sent asynchronously getting stored in the outbound queue.
                </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.Connected">
            <summary>
                Gets whether the channel connection is considered being alive.
            </summary>
            <remarks>
                <para>
                    This property reports the last operation state of the channel rather than performs the actually
                    TCP connectivity checks.
                </para>
                <para>
                    When this property value is <b>true</b>, it indicates that channel is not being closed and
                    last send/receive operations where completed successfully.
                </para>
                <para>
                    When this property value is <b>false</b>, it indicates that channel is either being closed
                    or closed. This does not exclude the possibility that channel is in transition state and
                    may still be able to send or receive messages.
                </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.RemoteEndpoint">
            <summary>
            Gets the IP address of remote TCP/IP endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.LocalEndpoint">
            <summary>
            Get the IP address of local TCP/IP endpoint
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.AutoPingInterval">
            <summary>
            
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketConnectionChannel.AuthenticationContext">
            <summary>
             Gets the instance of the object that is associated to the connection during authentication.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create``1(System.Uri)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The URI of the target WebSocket server.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create``1(System.String)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The URI of the target WebSocket server.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create``1(System.Uri,System.String,System.String)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The URI of the target WebSocket server.
            </param>
            <param name="origin">
            The string identifying the origin of the client.
            </param>
            <param name="protocol">
            The string specifying the sub-protocol used by the client.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create``1(System.String,System.String,System.String)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The URI of the target WebSocket server.
            </param>
            <param name="origin">
            The string identifying the origin of the client.
            </param>
            <param name="protocol">
            The string specifying the sub-protocol used by the client.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create(System.Uri,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="uri">The URI of the target WebSocket server.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create(System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="uri">The URI of the target WebSocket server.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create(System.Uri,System.String,System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">The URI of the target WebSocket server.</param>
            <param name="origin">The string identifying the origin of the client.</param>
            <param name="protocol">The string specifying the sub-protocol used by the client.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create(System.String,System.String,System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">The URI of the target WebSocket server.</param>
            <param name="origin">The string identifying the origin of the client.</param>
            <param name="protocol">The string specifying the sub-protocol used by the client.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.#ctor(System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="uri">The JRI of the target WebSocket server.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.#ctor(System.Uri,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="uri">The URI of the target WebSocket server.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.#ctor(System.Uri,System.String,System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">The URI of the target WebSocket server.</param>
            <param name="origin">The string identifying the origin of the client.</param>
            <param name="protocol">The string specifying the sub-protocol used by the client.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Open">
            <summary>
            Opens the client connection to the server endpoint.
            </summary>
            <remarks>
            Once client connection to the server endpoint is established, <see cref="M:Noemax.WebSockets.IWebSockets.OnOpen(Noemax.WebSockets.WebSocketChannel)"/> of associated
            TService instance is called and client is ready to receive messages from server side.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Open(System.TimeSpan)">
            <summary>
            Opens the client connection to the server endpoint.
            </summary>
            <param name="timeout">The period of time during which client is expected to connect to the server.</param>
            <remarks>
            <para>
            If connection cannot be established within specified <b>timeout</b>, TimeoutException is thrown.
            </para>
            <para>
            Once client connection to the server endpoint is established, <see cref="M:Noemax.WebSockets.IWebSockets.OnOpen(Noemax.WebSockets.WebSocketChannel)"/> of associated
            TService instance is called and client is ready to receive messages from server side.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.OpenAsync(System.TimeSpan)">
            <summary>
            Opens the client connection to the server endpoint asynchronously.
            </summary>
            <param name="timeout">The period of time during which client is expected to connect to the server.</param>
            <returns>
            The Task instance representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.OpenAsync">
            <summary>
            Opens the client connection to the server endpoint asynchronously.
            </summary>
            <returns>
            The Task instance representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Close(System.TimeSpan)">
            <summary>
            Closes the to the client connection and releases associated resources.
            </summary>
            <param name="timeout">
            The timeout to wait for ongoing transfer to be complete prior connection is terminated.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[],System.TimeSpan)">
            <summary>
            Sends the batch of outbound messages to the remote endpoint asynchronously.
            </summary>
            <param name="messages">The messages to send to the remote endpoint.</param>
            <param name="timeout">The period of time during which operation must complete or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.SendClose(System.Int16,System.String,System.TimeSpan)">
            <summary>
            Sends the close frame to the remote endpoint to initiate the closure of connection.
            </summary>
            <param name="statusCode">The status code identifying the reason for closing the connection.</param>
            <param name="reason">The string describing the reason for closing the connection.</param>
            <param name="timeout">The period of time during which the close frame must be sent or operation would timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Send(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Sends a binary message to the remote endpoint.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to send.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="count">The number of bytes to send. </param>
            <param name="timeout">The timeout for the send operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Send(System.String,System.TimeSpan)">
            <summary>
            Sends a text message to the remote endpoint.
            </summary>
            <param name="text">The text to send.</param>
            <param name="timeout">The timeout for the send opeation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Send(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
            Sends the message to the remote endpoint.
            </summary>
            <param name="message">The message to send to the remote endpoint.</param>
            <param name="timeout">The timeout for send operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.SendAsync(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Sends the binary message to the remote endpoint.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to send.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="count">The number of bytes to send. </param>
            <param name="timeout">The timeout for the send operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.SendAsync(System.String,System.TimeSpan)">
            <summary>
            Sends the text message to the remote endpoint.
            </summary>
            <param name="text">The text message to send.</param>
            <param name="timeout">The timeout for the send operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.SendAsync(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
            Send the message to the remote endpoint.
            </summary>
            <param name="message">The message to send to the remote endpoint.</param>
            <param name="timeout">The timeout for the send operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.SendPing">
            <summary>
            Sends Ping to the remote endpoint.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.SendPing(System.Byte[])">
            <summary>
            Sends Ping with specified payload to the remote endpoint.
            </summary>
            <param name="payload">The payload to be sent.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.SendTextMessage(System.TimeSpan)">
            <summary>
            Initiate the outbound streamed text message.
            </summary>
            <param name="timeout">The timeout for the send operation.</param>
            <returns>The TextWriter to write the outbound text message.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.SendMessage(System.TimeSpan)">
            <summary>
            Initiates a streamed message to the remote endpoint.
            </summary>
            <param name="timeout">The timeout for the send operation.</param>
            <returns>The stream to write the outbound message.</returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Compression">
            <summary>
            Gets and sets the transport compression scheme to be used by the client.
            </summary>
            <remarks>
            The transport compression scheme will apply only in case if the server supports specified compression
            extension, otherwise the value of this property will not have any impact on communication.
            </remarks>
        </member>
        <member name="E:Noemax.WebSockets.WebSocketClient.Handshake">
            <summary>
            Event triggered when the WebSocket handshake is performed.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.OutboundHandshakeHeaders">
            <summary>
            Gets the collection of custom handshake headers to be sent to remote endpoint during WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.InboundHandshakeHeaders">
            <summary>
            Gets the collection of HTTP headers returned by the remote endpoint during WebSocket handshake. 
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.MaxRedirects">
            <summary>
            Gets and sets the maximum number of time WebSocket client can get redirected while performing WebSocket handshake with destination endpoint. Default value is 0.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Extensions">
            <summary>
            Gets and sets the list of extensions for be negotiated by WebSocket connection.
            </summary>
            <remarks>
            <para>
            <see cref="T:Noemax.WebSockets.WebSocketClient"/> automatically negotiates supported extensions during the WebSocketHandshake, buy using this
            property you can override the extension configuration and extension parameters that would be used by the <b>WebSocketClient</b>. When this property is set,
            <b>WebSocketClient</b> will be using the value of this property rather than automatically generated Sec-WebSocket-Extension header. 
            </para>
            <para>
            You don't need to use this property unless you have to provide custom extension configuration.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Origin">
            <summary>
            Gets and sets the Origin string that identifies the origin of the script
            running on the client side. 
            </summary>
            <remarks>
            The Origin string might be required by the WebSocket server that also handle connections from
            the scripts running on the brower clients.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Protocol">
            <summary>
            Gets and sets the Sec-WebSocket-Protocol header value being negotiated by the client during WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.CookieContainer">
            <summary>
            Gets and sets the CookieContainer to manage cookies set by the server side. By default
            this property is set to Nothing and WebSocket client ignores all cookies.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Cookies">
            <summary>
            Gets the collection of cookies associated to the URI of the client in the CookieContainer. 
            If CookieContainer property is not set, the this property returns nothing.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.PayloadMasking">
            <summary>
            Gets and sets whether the payload of outbound messages is masked.
            </summary>>
            <remarks>
            <para>
            By default all messages from the client to the server are masked, while all messages from the server to
            the client are not masked, as required by the WebSocket protocol specification.
            </para>
            <para>
            You can disable or enable masking by setting this property, but strict WebSocket implementations
            will drop the connection if masking requirements are not followed.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.TraceSource">
            <summary>
            Gets and sets TraceSource for tracing events.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Security">
            <summary>
            Provides properties for the WebSocket connection security.
            </summary>        
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.UseDefaultWebProxy">
            <summary>
            Gets and sets whether WebSocketClient is to use default HTTP proxy when establishing client connection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient`1.#ctor(System.Uri)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The URI of the target WebSocket server.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient`1.#ctor(System.String)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The URI of the target WebSocket server.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient`1.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The URI of the target WebSocket server.
            </param>
            <param name="origin">
            The string identifying the origin of the client.
            </param>
            <param name="protocol">
            The string specifying the sub-protocol used by the client.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient`1.GetServiceInstance">
            <summary>
            Returns an new instance of IWebSocket to handle messages received by the channel.
            </summary>
            <returns>An instance of IWebSocket.</returns>
        </member>
        <member name="T:Noemax.WebSockets.Core.WebSocketClientSecurity">
            <summary>
            Provides properties that apply when SSL/TLS transport security is enabled.
            </summary>
            <remarks>
            <para>
            If the URI of the target WebSocket server includes 'wss' or 'https' schema, SSL/TLS transport
            security is enabled automatically and server is expected to perform SSL/TLS handshake
            and provide server certificate. Communication would fail with AuthenticationException in
            cases when the target server does not support SSL/TLS transport security.
            </para>
            <para>
            Note this class and all associated properties are not included into cryptography free
            versions of assemblies.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketClientSecurity.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketClientSecurity.SetClientCertificate(System.Byte[],System.Char[])">
            <summary>
            Sets the certificate loaded from the specified PKCS12 storage to be used by the client for TLS authentication.
            </summary>
            <param name="pkcs12">The array of bytes containing the PKCS#12 storage.</param>
            <param name="password">The password for PKCS#12 storage.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketClientSecurity.SetClientCertificate(System.Byte[],System.String)">
            <summary>
            Sets the certificate loaded from the specified PKCS12 storage to be used by the client for TLS authentication.
            </summary>
            <param name="pkcs12">The array of bytes containing the PKCS#12 storage.</param>
            <param name="password">The password for PKCS#12 storage.</param>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketClientSecurity.UsernameForServer">
            <summary>
            Gets and sets a credentials to be used to authenticate with WebSocket server if it requires
            HTTP authentication.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketClientSecurity.UsernameForProxy">
            <summary>
            Gets and sets a credentials to be used to authenticated with HTTP proxy.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketClientSecurity.ServerCertificate">
            <summary>
            Gets and sets the certificate that the target server is expected to provide during server authentication. 
            </summary>
            <remarks>
            <para>
            Default value is Null. If this property is not Null, the certificate specified by this property is getting 
            compared to the server certificate provided by remote side during the SSL/TLS authentication. If they do 
            not match each other, than server authentication fails and AuthenticationException is thrown.
            </para>
            <para>
            If <value>ServerCertificate</value> does match the certificate provided by remote side, then the remote
            side certificate is accepted as valid. This type of authentication is useful when remote side is using self
            signed certificate and cannot be validated by certification authority.
            </para>
            </remarks>
        </member>
        <member name="E:Noemax.WebSockets.Core.WebSocketClientSecurity.OnValidateCertificate">
            <summary>
            Event occurs during server certificate validation. Provide an event handler to perform an
            additional custom certificate validation.
            </summary>
            <remarks>
            <para>
            The event handler is expected to throw an exception if a remote certificate is not valid; otherwise
            the it is considered being valid.
            </para>
            <para>
            Note prior this event occurs, WebSocketClient performs internal certificate validation according to
            its security settings. 
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketClientSecurity.TargetHost">
            <summary>
            Gets and sets the string identifying the host the remote server certificate expected to specify in the
            the Subject field of certificate e.g. 'CN=www.myhost.com'.
            </summary>
            <remarks>
            Set this property to the common name of the X09Certificate used by the destination endpoint. 
            If the common name of the certificate does not match neither the TargetHost property value nor
            the host specified in the URI of destination endpoint, the server certificate validation fails.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketClientSecurity.CheckCertificateRevocation">
            <summary>
            Gets and sets whether the client should check the server certificate chain for revocation.
            </summary>
            <remarks>
            Note: the self-signed certificates will fail the revocation check, so set this property to <b>false</b>. 
            When using self-signed certificate.
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketClientSecurity.ClientCertificate">
            <summary>
            Gets and sets the client certificate to be used when client authentication is required by remote side.
            </summary>
            <remarks>
            Client certificate is used for client authentication and presented to the server side during SSL/TLS handshake.
            In order to use client certificate for client authentication, application should have
            an access the private key associated to the client certificate.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.Core.WebSocketCloseEventArgs">
            <summary>
            Provides methods and properties for the close event arguments.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketCloseEventArgs.#ctor(Noemax.WebSockets.Core.WebSocket,System.Int16,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Noemax.WebSockets.Core.WebSocketCloseEventArgs"/>.
            </summary>
            <param name="socket">The WebSocket instance.</param>
            <param name="statusCode">The close status code.</param>
            <param name="description">The description of the close event status.</param>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketCloseEventArgs.StatusCode">
            <summary>
            The status code with which the connection is being closed.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketCloseEventArgs.Description">
            <summary>
            The description of the status with which the connection is being closed.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Core.WebSocketMessageInputStream">
            <summary>
            Expose a WebSocket message as a input and provides methods and properties for streaming 
            WebSocket messages.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketMessageInputStream.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WebSockets.Core.WebSocketMessageInputStream"/>
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketMessageInputStream.ReadToFrameEnd">
            <summary>
            Reads an entire frame or remaining bytes of the frame, depending on current input position.
            </summary>
            <returns>
            The bytes of the frame payload.
            </returns>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketMessageInputStream.DrainWhenMessageClosed">
            <summary>
            Gets and sets whether this stream should be drained when message is closed. Default value is True.
            </summary>
            <remarks>
            <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/> automatically reads the stream to the end when message is being closed after 
            it was processed by application. This needed to insure message is completely read from network connection, so that 
            next message can be received. Sometimes application needs defer processing of the stream later. In this case it can 
            set the DrainWhenMessageClosed to False. However, no new messages will be received until the message stream is 
            completely consumed. 
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketMessageInputStream.IsFrameFinal">
            <summary>
            Gets whether the current message frame is final.
            </summary>
            <remarks>
            When message is not fragmented its first and only frame is final.
            </remarks>
            <value> Returns <b>true</b> if current frame is final; otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketMessageInputStream.FrameBytesRemaining">
            <summary>
            Gets the number of bytes remaining to be read until the end of the current frame.
            </summary>
            <remark>
            When input is positioned on the start of the frame payload, this property returns the
            total number of bytes in the frame. As frame is being consumed this property returns the
            number of bytes remaining to be read until the end of the current frame.
            </remark>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketMessageInputStream.BytesBuffered">
            <summary>
            Gets the number of bytes buffered in the input buffer.
            </summary>
            <remarks>
            WebSocketMessageInputStream does not buffer entire frame, its internal buffer is fixed, 
            so it may contain a part of the frame or multiple frames depending on the frame size.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketEndpoint">
            <summary>
            Provides methods and properties of WebSocket endpoint.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketEndpoint.Open">
            <summary>
            Opens WebSocket endpoint and starts accepting client connections.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketEndpoint.Close">
            <summary>
            Close WebSocket endpoint and stops accepting client connections.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketEndpoint.Listener">
            <summary>
            Returns the WebSocketListener instance that accepts client connections.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Core.WebSocketErrorEventArgs">
            <summary>
            Provides methods and properties for error event arguments.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.WebSockets.Core.WebSocketErrorEventArgs"/>.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketErrorEventArgs.Error">
            <summary>
            The error encountered by the WebSocket instance of the service that handles the connection.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketException">
            <summary>
                Provides the exception raised during WebSocket communications.
            </summary>    
        </member>
        <member name="M:Noemax.WebSockets.WebSocketException.#ctor(System.String)">
            <summary>
                Initializes a new instance of WebSocketException.
            </summary>
            <param name="message">The text message of exception.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketException.#ctor(System.Int32,System.String)">
            <summary>
                Initializes a new instance of WebSocketException.
            </summary>
            <param name="status">The integer status code associated with exception.</param>
            <param name="message">The text message of exception.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of WebSocketException.
            </summary>
            <param name="message">The text message of exception.</param>
            <param name="inner">The inner exception related to this exception.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
                Initializes a new instance of WebSocketException.
            </summary>
            <param name="status">The integer status code associated with exception.</param>
            <param name="message">The text message of exception.</param>
            <param name="inner">The inner exception related to this exception.</param>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketException.StatusCode">
            <summary>
                Gets and sets the corresponding close frame status code, if any.
            </summary>
            <remarks>
                Is sent to remote side prior connection is closed and provides description
                of the problem that resulted in connection being closed.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketClosedException">
            <summary>
                Provides the exception raised during WebSocket communications.
            </summary>    
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClosedException.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of WebSocketException.
            </summary>
            <param name="status">The status code with which connection was closed.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClosedException.#ctor(System.Int32,System.String)">
            <summary>
                Initializes a new instance of WebSocketException.
            </summary>
            <param name="status">The status code with which connection was closed.</param>
            <param name="description">The text describing the status with which connection was closed.</param>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClosedException.StatusCode">
            <summary>
                Gets and sets the corresponding close frame status code, if any.
            </summary>
            <remarks>
                Is sent to remote side prior connection is closed and provides description
                of the problem that resulted in connection being closed.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketProtocolException">
            <summary>
                Provides the exception thrown when connection is being closed due to violation
                of WebSocket protocol by remote side.
            </summary>    
        </member>
        <member name="M:Noemax.WebSockets.WebSocketProtocolException.#ctor">
            <summary>
                Initializes a new instance of WebSocketProtocol.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketProtocolException.#ctor(System.Exception)">
            <summary>
                Initializes a new instance of WebSocketProtocol.
            </summary>
            <param name="inner">The inner exception that caused this exception to be raised.</param>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketQueueSizeException">
            <summary>
                Provides the exception thrown when the size of outbound message queue, exceeds
                the maximum size.
            </summary>    
        </member>
        <member name="M:Noemax.WebSockets.WebSocketQueueSizeException.#ctor(System.Int64,System.Int64)">
            <summary>
                Initializes a new instance of WebSocketQueueSizeException.
            </summary>
            <param name="maxOutboundQueueSize">The queue size limit in bytes that was exceeded and caused exception.</param>
            <param name="outboundQueueSizeWouldHave">
                The size of message queue that would be reached if exception would not be
                thrown.
            </param>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketQueueSizeException.MaxOutboundQueueSize">
            <summary>
                The queue size limit in bytes that was exceeded and caused exception.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketQueueSizeException.OutboundQueueSizeWouldHave">
            <summary>
                Gets the size of message queue that would be reached if exception would not be thrown.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Core.WebSocketFactory">
            <summary>Creates and manages client WebSocket connections.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketFactory.#ctor">
            <summary>Initialize a new instance of %WebSocketFactory%.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketFactory.Connect(System.String)">
            <summary>Creates a new WebSocket connection to the specified destination URI string.</summary>
            <param name="uri">The URI to the WebSocket endpoint.</param> 
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketFactory.Connect(System.String,System.TimeSpan)">
            <summary>Creates a new WebSocket connection to the specified destination URI string.</summary>
            <param name="uri">The URI to the WebSocket endpoint.</param> 
            <param name="timeout">The period of time during which operation is to be complete or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketFactory.Connect(System.Uri)">
            <summary>Create a new WebSocket connection to the specified destination URI.</summary>
            <param name="uri">The URI to the WebSocket endpoint.</param> 
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketFactory.Connect(System.Uri,System.TimeSpan)">
            <summary>Create a new WebSocket connection to the specified destination URI.</summary>
            <param name="uri">The URI to the WebSocket endpoint.</param> 
            <param name="timeout">The period of time during which operation is to be complete or timeout.</param>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.Security">
            <summary>
            Provides properties that apply when the SSL/TLS transport security is enabled.
            </summary>
            <remarks>
            <para>
            SSL/TLS transport security is getting enabled automatically when the target server URI
            has the "wss" schema e.g "wss://myservice.com".
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.CookieContainer">
            <summary>
            Gets and sets CookieContainer used by the WebSocketFactory instance.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.OutboundHandshakeHeaders">
            <summary>
            Gets the collection of handshake headers to be sent to remote endpoint during the WebSocket handshake;
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.Protocol">
            <summary>
            Gets and sets the string identifying the sub-protocol used WebSocket client.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.Origin">
            <summary>
            Gets and sets the string identifying the origin of WebSocket client.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.Extensions">
            <summary>
            Gets and sets the string specifying extensions supported by the WebSocket client.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.TraceSource">
            <summary>
            Gets and sets the trace source to be used for tracing WebSocket activities.
            </summary>
            
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.BypassProxyOnLocal">
            <summary>Gets and sets whether the factory should bypass local proxies when establishing a client connection.</summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.UseDefaultWebProxy">
            <summary>Gets and sets whether the factory should use default web proxy when establishing a client connection.</summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.ProxyAddress">
            <summary>Gets and sets the address of the web proxy to be used by the factory when establishing connection.</summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.Compression">
            <summary>Gets and set whether the transport compression should be applied and what compression method to use 
            for compressing the traffic.</summary>
        </member>
        <member name="E:Noemax.WebSockets.Core.WebSocketFactory.Handshake">
            <summary>
            Event triggered during WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.PayloadMasking">
            <summary>
            Gets and sets whether the WebSocket instances created by this factory should mask payload sent to the server.
            </summary>
            <remarks>
            <para>
            By default all messages from the client to the server are masked, while all messages from the server to
            the client are not masked, as required by the WebSocket protocol specification.
            </para>
            <para>
            You can disable or enable masking by setting this property, but strict WebSocket implementations
            will drop the connection if masking requirements are not followed.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.MaxRedirects">
            <summary>
            Gets and sets the maximum number of times the remote endpoints can redirect the client connection during WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.KeepaliveSendInterval">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.KeepaliveTimeout">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.KeepaliveMode">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.KeepaliveResponseThrottlingInterval">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketFactory.KeepaliveRoundtripRequired">
            <summary />
        </member>
        <member name="T:Noemax.WebSockets.Core.X509CertificateValidationCallback">
            <summary>
            The callback delegate providing the remote X509 certificate validation.
            </summary>
            <param name="certificate">The X509Certificate to validate.</param>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketHandshakeEventHandler">
            <summary>
            Represents a method handing the WebSocket handshake event.
            </summary>
            <param name="sender">The sender of event.</param>
            <param name="args"><see cref="T:Noemax.WebSockets.WebSocketHandshake"/> representing event data.</param>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketHandshakeAction">
            <summary>
            Defines the action to take as outcome of WebSocketHandshake.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketHandshakeAction.Accept">
            <summary>
            Accept WebSocket handshake and proceed with WebSocket communication.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketHandshakeAction.Drop">
            <summary>
            Refuse WebSocket handshake by dropping the Network connection.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketHandshakeAction.HttpRedirect">
            <summary>
            Redirect client connection to alternative address using HTTP status code 301 "Moved Permanently". Applicable only on the server side.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketHandshakeAction.HttpTemporaryRedirect">
            <summary>
            Redirect inbound connection to alternative address using HTTP status code 302 "Found". Applicable only on the server side.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketHandshakeAction.HttpBadRequest">
            <summary>
            Refuse the handshake by sending the HTTP status code 400 "Bad Request". Applicable only on the server side.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketHandshakeAction.HttpForbidden">
            <summary>
            Refuse the handshake by sending the HTTP status code 403 "Forbidden". Applicable only on the server side.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketHandshakeAction.HttpNotFound">
            <summary>
            Refuse the handshake by sending the HTTP status code 404 "Not Found". Applicable only on the server side.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketHandshakeAction.HttpGone">
            <summary>
            Refuse the handshake by sending the HTTP status code 410 Gone. Applicable only on the server side.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketHandshakeAction.HttpServiceUnavailable">
            <summary>
            Refuse the handshake by sending the HTTP status code 503 "Service Unavailable". Applicable only on the server side.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketHandshake">
            <summary>
            Provides method and properties for evaluating the WebSocket handshake prior it is accepted
            by the local side.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshake.#ctor(System.Uri,Noemax.WebSockets.WebSocketHandshakeHeaderCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the WebSocketHandshake class.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshake.SetCookie(System.Net.Cookie)">
            <summary>
            Sets the HTTP cookie to be sent to the client during WebSocket handshake. 
            </summary>
            <param name="cookie">
            The HTTP cookie to be sent to the client.
            </param>
            <remarks>
            This method can be used only the server side during WebSocket handshake to send client a cookie. 
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Via">
            <summary>
            The _uri of the WebSocket endpoint which performs the WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Protocol">
            <summary>
            Gets and sets the sub-protocol header exchanged during WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Origin">
            <summary>
            Gets and sets the Origin value exchanged during WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Extensions">
            <summary>
            Gets and sets extensions exchanged during the WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Context">
            <summary>
            Gets and sets the context object that should be assigned to the channel at the end 
            of the handshake. This value will be saved into the WebSocketChannel.Context property
            when channel is created.
            </summary>
            <remarks>
            Context property can be used to store any information associated to the channel during the
            handshake or later on in channel lifetime, e.g. it can store the reference on client credentials 
            or session ids assigned to the channel by the application e.c.t.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Cookies">
            <summary>
            Gets the list of cookies exchanged between client and server during the WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.ResultAction">
            <summary>
            Gets and sets whether the WebSocket handshake is accepted by the local side.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.IsServerSide">
            <summary>
            Gets whether this handshake is being performed by a server endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.RedirectLocation">
            <summary>
            Gets and sets the location to which client is getting redirected when HandshakeAction is set to HttpRedirect or HttpTemporaryRedirect.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.HasExtension">
            <summary>
            Gets whether the WebSocket handshake includes Sec-WebSocket-Extension header.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.InboundHeaders">
            <summary>
            The collection of the headers received during the WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.OutboundHeaders">
            <summary>
            The collection of the headers to be sent during the WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.HasProtocol">
            <summary>
            Gets whether the WebSocket handshake includes Sec-WebSocket-Protocol header.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketHandshakeHeader">
            <summary>
            Represents a handshake header to be exchanged among with standard WebSocket headers during the handshake.
            </summary>    
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.WebSockets.WebSocketHandshakeHeader"/> from the strings representing its name and value.
            </summary>
            <param name="name">The name of the header.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshakeHeader.Name">
            <summary>
            The name of the header.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshakeHeader.Value">
            <summary>
            The value of the header.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketHandshakeHeaderCollection">
            <summary>
            Provides the methods and property for managing collection of <see cref="T:Noemax.WebSockets.WebSocketHandshakeHeader"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WebSockets.WebSocketHandshakeHeaderCollection"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WebSockets.WebSocketHandshakeHeaderCollection"/> from the collection of key value pairs.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.#ctor(System.Collections.Generic.IEnumerable{Noemax.WebSockets.WebSocketHandshakeHeader})">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WebSockets.WebSocketHandshakeHeaderCollection"/> from the collection of <see cref="T:Noemax.WebSockets.WebSocketHandshakeHeader"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Add(System.String,System.String)">
            <summary>
            Adds a new header to the collection.
            </summary>
            <param name="name">The name of the header.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Add(Noemax.WebSockets.WebSocketHandshakeHeader)">
            <summary>
            Adds a header to the collection.
            </summary>        
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Add(System.Collections.Generic.IEnumerable{Noemax.WebSockets.WebSocketHandshakeHeader})">
            <summary>
            Adds the enumeration of WebSocketHandshakeHeader to the collection.
            </summary>
            <param name="headers">The enumeration of WebSocket handshake headers.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.GetValue(System.String)">
            <summary>
            Returns the value of the specified header if found in the collection.
            </summary>
            <param name="name">The name of the header.</param>
            <returns>The string value of the header.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Get(System.String)">
            <summary>
            Gets the header with the specified name.
            </summary>
            <param name="name">The name of the header to get.</param>
            <returns>The header with the specified name; Null if header with the specified name was not found.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Clear">
            <summary>
            Removes all contained headers from the collection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.CopyTo(Noemax.WebSockets.WebSocketHandshakeHeader[],System.Int32)">
            <summary>
            Copies all headers into the specified possion in array.
            </summary>
            <param name="array">The array of WebSocketHandshakeHeader where to copy all contained headers.</param>
            <param name="arrayIndex">The index in the array where to copy all contained headers.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Remove(Noemax.WebSockets.WebSocketHandshakeHeader)">
            <summary>
            Removes the header from the collection.
            </summary>
            <param name="item">The header to be removed from the collection.</param>
            <returns>True if header was found in the collection and removed; False otherwise.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Remove(System.String)">
            <summary>
            Removes the header with specified name from the collection.
            </summary>
            <param name="name">The name of the header to be removed </param>
            <returns>True if the header was found in the collection and removed; False otherwise.</returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Item(System.String)">
            <summary>
            Gets and sets the value of the header specified by its name.
            </summary>
            <param name="name">The name of the header to get or set.</param>
            <returns>The value of the header.</returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Count">
            <summary>
            Gets the number of the headers in the collection.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.IsReadOnly">
            <summary>
            Gets whether this collection is read-only.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Protocol">
            <summary>
            Gets and sets the Sec-WebSocket-Protocol header value being negotiated by the client during WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.Origin">
            <summary>
            Gets and sets the Origin string that identifies the origin of the script
            running on the client side. 
            </summary>
            <remarks>
            The Origin string might be required by the WebSocket server that also handle connections from
            the scripts running on the brower clients.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshakeHeaderCollection.WcfContentType">
            <summary>
            Gets and set the content type header that is exchanged during the handshake. This header is required to be provided by the WCF WebSocket endpoints.
            </summary>
            <remarks>
            WCF endpoint requires the client side to specify the content type of the message content during the WebSocket handshake. Set this property 
            in order to insure that the WCF WebSocket endpoint accepts client connection. 
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.Core.MessageEndCallback">
            <summary> Delegate defining a callback that is called when WebSocket had processed message to the end. </summary>
            <remarks>
            Used internally by implementation.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.Core.WebSocketImpl">
            <summary>Provides methods and properties for using WebSocket transport protocol.</summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketInboundMessageImpl">
            <summary>
            Provides the methods and properties for processing WebSocket message.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketInboundMessage">
            <summary>
            Represents the inbound message received through WebSocket connection. Provides methods and properties for processing inbound message.
            </summary>
            <remarks>
            This is the abstract base class that is extended by internal WebSocketInboundMessage implementations.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.BeginBuffering(System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronously buffering the message until the final frame of the message is buffered.
            </summary>
            <param name="maxMessageSize">The maximum number of bytes to buffer. If message exceeds the specified size the exception is thrown.</param>
            <param name="callback">The callback to call when message is fully buffered.</param>
            <param name="state">The object to associated with asynchronous operation.</param>
            <returns></returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.EndBuffering(System.IAsyncResult)">
            <summary>
            Completed asynchronously buffering message, waiting by the final frame to be buffered.
            </summary>
            <param name="result">IAsyncResult object associated to the operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsString(System.Int64)">
            <summary>
            Buffers entire message in memory and decode it as UTF-8 encoded string.
            </summary>
            <param name="maxReceivedMessageSize">The maximum number to buffer while receiving the message.</param>
            <returns>The string decoded from the message content.</returns>
            <remarks>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsString(System.Text.Encoding,System.Int64)">
            <summary>
            Buffers entire message in memory and decode it as a string using specified encoding.
            </summary>
            <param name="maxReceivedMessageSize">The maximum number to buffer while receiving the message.</param>
            <param name="encoding">The encoding to be used to decode the payload as a string.</param> 
            <returns>The string decoded from the message content.</returns>
            <remarks>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsText">
            <summary>
            Returns the text reader for reading message as text without ever buffering entire message 
            in memory.
            </summary>
            <returns>Returns the TextReader for decoding the content of the message.</returns>
            <remarks>
            <para>
            This method is part of the streaming API. Using the reader returned by this method you can consume
            large messages without ever loading entire message into memory. Only the part of the message is 
            initially buffered. 
            </para>
            
            <para>
            As the application consumes data using the input the underlying channel will continue 
            reading directly from TCP connection employing native flow control provided by TCP. This means that
            remote side blocks when local side input buffer is full and it resumes as soon as 
            local side reads the data from the input buffers. As faster you read  from the input as
            faster remote side will be able to send more data.
            </para>
            
            <para>
            In case if message is fragmented, subsequent frames will be received and handled automatically as
            application reads from the input, until the final frame consumed. Once end of the message is
            reached the read operation will return 0 bytes.
            </para>
            
            <para>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsText(System.Text.Encoding)">
            <summary>
            Returns the text reader for reading message as text without ever buffering entire message 
            in memory.
            </summary>
            <returns>Returns the TextReader for decoding the content of the message.</returns>
            <remarks>
            <para>
            This method is part of the streaming API. Using the reader returned by this method you can consume
            large messages without ever loading entire message into memory. Only the part of the message is 
            initially buffered. 
            </para>
            <para>
            As the application consumes data using the input the underlying channel will continue 
            reading directly from TCP connection employing native flow control provided by TCP. This means that
            remote side blocks when local side input buffer is full and it resumes as soon as 
            local side reads the data from the input buffers. As faster you read  from the input as
            faster remote side will be able to send more data.
            </para>
            <para>
            In case if message is fragmented, subsequent frames will be received and handled automatically as
            application reads from the input, until the final frame consumed. Once end of the message is
            reached the read operation will return 0 bytes.
            </para>
            <para>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </para>
            </remarks>
            <param name="encoding">The instance of Encoding to be used for converting the payload to the text.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsStream">
            <summary>
            Returns the content of the message as input of bytes, which allows to read the message
            as it's getting received without buffering entire content in the memory.
            </summary>
            <returns>The input to read the message content.</returns>
            <remarks>
            <para>
            This method is part of the streaming API. Using the input returned by this method you can consume
            large messages without ever loading entire message into memory. Only the part of the message is 
            initially buffered. 
            </para>
            <para>
            As the application consumes data using the input the underlying channel will continue 
            reading directly from TCP connection employing native flow control provided by TCP. This means that
            remote side  blocks when local side input buffer is full and it resumes as soon as 
            local side reads the data from the input buffers. As faster you read  from the input as
            faster remote side is allowed to send data.
            </para>
            <para>
            In case if message is fragmented, subsequent frames will be received and handled automatically as
            application reads from the input, until the final frame consumed. Once end of the message is
            reached the read operation will return 0 bytes.
            </para>
            <para>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsBytes(System.Int64)">
            <summary>
            Buffers the entire message and returns it as an array of bytes.
            </summary>
            <param name="maxSize">The maximum size of the buffer to allocated.</param>
            <returns>Returns the array of bytes representing the content of entire message.</returns>
            <remarks>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.Close">
            <summary>
            Closes the message and releases all associated resources. 
            </summary>
            <remarks>
            If message is fragmented and  there are more frames of the same message to be read from 
            the WebSocket connection, the call to this method would block reading all remaining frames 
            from the channel until they are read or channel is closed.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsOutbound(System.Int32)">
            <summary>
            Buffers entire message payload in the buffer and represents it as outbound message that can be sent
            through the same or another connection."/&gt;.
            </summary>
            <param name="maxSize">The maximum number of bytes to buffer.</param>
            <returns>The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> value.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.op_Implicit(Noemax.WebSockets.WebSocketInboundMessage)~System.IO.Stream">
            <summary>
            Provides implicit conversion that represents an inbound message as Stream object.
            </summary>
            <param name="message">The message to represent as the input.</param>
            <returns>The input object to read the message.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.op_Implicit(Noemax.WebSockets.WebSocketInboundMessage)~System.IO.TextReader">
            <summary>
            Provides implicit conversion that represents an inbound message as TextReader.
            </summary>
            <param name="message">The message to represent as TextReader.</param>
            <returns>The TextReader to read the message.</returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessage.Type">
            <summary>
            Gets the WebSocketMessageType associated to the message content.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessage.State">
            <summary>
            Gets the state of the WebSocketMessage object.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessage.Fragmented">
            <summary>
            Gets the value which indicates whether the message was received fragmented.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessage.Context">
            <summary>
            Gets and set the object associated with a message.
            </summary>
            <remarks>
            Application code dispatching the message can set this property to any value that need to be associated with the message 
            while it is being processed.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessage.IsBuffered">
            <summary>
            Gets whether the the inbound message is buffered.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessageImpl.ReadAsString(System.Text.Encoding,System.Int64)">
            <summary>
            Buffers entire message in memory and decode it as a string using specified encoding.
            </summary>
            <param name="maxReceivedMessageSize">The maximum number to buffer while receiving the message.</param>
            <param name="encoding">The encoding to be used to decode the payload as a string.</param> 
            <returns>The string decoded from the message content.</returns>
            <remarks>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessageImpl.ReadAsText(System.Text.Encoding)">
            <summary>
            Returns the text reader for reading message as text without ever buffering entire message 
            in memory.
            </summary>
            <returns>Returns the TextReader for decoding the content of the message.</returns>
            <remarks>
            <para>
            This method is part of the streaming API. Using the reader returned by this method you can consume
            large messages without ever loading entire message into memory. Only the part of the message is 
            initially buffered.  
            </para>
            <para>
            As the application consumes data using the input the underlying channel will continue 
            reading directly from TCP connection employing native flow control provided by TCP. This means that
            remote side blocks when local side input buffer is full and it resumes as soon as 
            local side reads the data from the input buffers. As faster you read  from the input as
            faster remote side will be able to send more data.
            </para>
            <para>
            In case if message is fragmented, subsequent frames will be received and handled automatically as
            application reads from the input, until the final frame consumed. Once end of the message is
            reached the read operation will return 0 bytes.
            </para>
            <para>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </para>
            </remarks>
            <param name="encoding">The instance of Encoding to be used for converting the payload to the text.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessageImpl.ReadAsStream">
            <summary>
            Returns the content of the message as input of bytes, which allows to read the message
            as it's getting received without buffering entire content in the memory.
            </summary>
            <returns>The input to read the message content.</returns>
            <remarks>
            <para>
            This method is part of the streaming API. Using the input returned by this method you can consume
            large messages without ever loading entire message into memory. Only the part of the message is 
            initially buffered. 
            </para>
            <para>
            As the application consumes data using the input the underlying channel will continue 
            reading directly from TCP connection employing native flow control provided by TCP. This means that
            remote side  blocks when local side input buffer is full and it resumes as soon as 
            local side reads the data from the input buffers. As faster you read  from the input as
            faster remote side is allowed to send data.
            </para>
            <para>
            In case if message is fragmented, subsequent frames will be received and handled automatically as
            application reads from the input, until the final frame consumed. Once end of the message is
            reached the read operation will return 0 bytes.
            </para>
            <para>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessageImpl.ReadAsBytes(System.Int64)">
            <summary>
            Buffers the entire message and returns it as an array of bytes.
            </summary>
            <param name="maxSize">The maximum size of the buffer to allocated.</param>
            <returns>Returns the array of bytes representing the content of entire message.</returns>
            <remarks>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessageImpl.Close">
            <summary>
            Closes the message and releases all associated resources. 
            </summary>
            <remarks>
            If message is fragmented and  there are more frames of the same message to be read from 
            the WebSocket connection, the call to this method would block reading all remaining frames 
            from the channel until they are read or channel is closed.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessageImpl.ReadAsOutbound(System.Int32)">
            <summary>
            Buffers entire message payload in the buffer and represents it as outbound message that can be sent
            through the same or another connection."/&gt;.
            </summary>
            <param name="maxSize">The maximum number of bytes to buffer.</param>
            <returns>The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> value.</returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessageImpl.Type">
            <summary>
            Gets the WebSocketMessageType associated to the message content.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessageImpl.State">
            <summary>
            Gets the state of the WebSocketMessage object.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessageImpl.OpCode">
            <summary>
            Gets the OpCode associated to the message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessageImpl.Fragmented">
            <summary>
            Gets the value which indicates whether the message was received fragmented.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Core.WebSocketListener">
            <summary>Listens on WebSockets endpoints, accepts and manages WebSocket connections.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketListener.#ctor(System.Uri)">
            <summary>Initializes a new WebSocketListener instance with specified endpoint URI.</summary>
            <param name="listenUri">The URI of the endpoint to listen for client connections.</param> 
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketListener.Open">
            <summary>Opens the WebSocket endpoint and starts waiting for client connection to accept.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketListener.Close">
            <summary>Stops accepting the client connections and closes the associated WebSocket endpoint.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketListener.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>Begin asynchronous operation to accept client connection.</summary>
            <param name="callback">The AsyncCallback delegate that receives the notification of the asynchronous operation completion.</param>
            <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketListener.EndAccept(System.IAsyncResult)">
            <summary>Concludes asynchronous operation to accept client connection.</summary>
            <param name="result">The IAsyncResult returned by a call to the BeginAccept method.</param> 
            <returns>An accepted client connection.</returns> 
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketListener.Accept">
            <summary>Accepts client connection from associated endpoint.</summary>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketListener.DispatchChannel(Noemax.WebSockets.Core.WebSocket)">
            <summary>
            Dispatches accepted WebSocket instance to the pending Accept operation or puts it into queue to be accepted later.
            </summary>
            <param name="socket">The socket to be accepted.</param>
            <returns>True if socket was accepted; False if listener refused the socket.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Core.WebSocketListener.ReadCookies(System.String)">
            <summary>
            Reads cookies from the HTTP header value.
            </summary>
            <param name="cookie">The value of HTTP header.</param>
            <returns>A collection of cookies read from the header.</returns>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.Compression">
            <summary>
            Gets the compression settings to be used for the payload compression.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.IsOpen">
            <summary>
            Gets the value the specify whether the listener is open.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.TraceSource">
            <summary>
            Gets and sets TraceSource used for tracing the WebSocket events.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.Uri">
            <summary>Gets the URI WebSocket endpoint associated to the listener.</summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.Protocol">
            <summary>Gets and sets the string identifying the sub-protocol used WebSocketListener.</summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.KeepaliveSendInterval">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.KeepaliveTimeout">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.KeepaliveMode">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.KeepaliveResponseThrottlingInterval">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.KeepaliveRoundtripRequired">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.PortSharing">
            <summary>
            Gets and sets whether the port sharing infrastructure should be used in order to share the IP endpoint 
            across processes exposing WebSocket endpoints on the same computer.
            </summary>
        </member>
        <member name="E:Noemax.WebSockets.Core.WebSocketListener.Handshake">
            <summary>
            Event triggered when the WebSocket handshake is performed.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Core.WebSocketListener.Security">
            <summary>
            Gets the server security settings that are applied when SSL/TLS security is enabled.
            </summary>
            <remarks>
            <para>
            SSL/TLS security is enabled WebSocketServerSecurity.Required property is set to <b>true</b> or when the service endpoint
            URI includes 'wss' or 'https' schema. It's recommended to use WebSocketServerSecurity. Required property rather than relly
            on the URI, to make sure that security is forced on all endpoints.
            </para>
            <para>
            If SSL/TLS security is enabled the WebSocketServerSecurity.ServerCertificate must be set to the valid X509 certificate, 
            otherwise server with fail to start and <see cref="T:System.InvalidOperationException"/> will be thrown.
            </para>
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketMessageType">
            <summary>
            Specifies the type of the WebSocket message content.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageType.Text">
            <summary>
            The content of the message is UTF-8 encoded text.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageType.Binary">
            <summary>
            The content of the message is binary octets.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketMessageState">
            <summary>
            Specifies the state of the WebSocket message.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageState.Created">
            <summary>
            Message was created but not yet sent.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageState.Read">
            <summary>
            Message was read but not yet closed.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageState.Closed">
            <summary>
            Message is closed and should not be used anymore.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketOutboundMessage">
            <summary>
            Represents the buffered message to be sent though WebSocket connection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.#ctor(Noemax.WebSockets.WebSocketInboundMessage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> from the instance of <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/>.
            </summary>
            <param name="inboundMessage">The inbound message.</param>
            <param name="maxReceivedMessageSize">The maximum number of inbound byte to receive when producing outbound message.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> struck.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> struck.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.#ctor(System.ArraySegment{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> struck.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> struck.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.#ctor(Noemax.WebSockets.WebSocketMessageType,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> either with binary or with text message opCode.
            </summary>
            <param name="type">The <see cref="T:Noemax.WebSockets.WebSocketMessageType"/> indicating the binary or text message.</param>
            <param name="buffer">The array containing bytes of the message payload.</param>
            <param name="offset">The offset in array where message payload starts.</param>
            <param name="count">The number of bytes that represent a message payload.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.op_Implicit(System.String)~Noemax.WebSockets.WebSocketOutboundMessage">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/>.
            </summary>
            <param name="text">The text to use as the payload of the message.</param>
            <returns>
            The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> with text payload.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.op_Implicit(System.Byte[])~Noemax.WebSockets.WebSocketOutboundMessage">
            <summary>
            Performs an implicit conversion from array of bytes to <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/>.
            </summary>
            <param name="binary">The binary data to use as the payload of the message.</param>
            <returns>
            The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> with binary payload.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.op_Implicit(System.ArraySegment{System.Byte})~Noemax.WebSockets.WebSocketOutboundMessage">
            <summary>
            Performs an implicit conversion from array of bytes to <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/>.
            </summary>
            <param name="segment">The binary data to use as the payload of the message.</param>
            <returns>
            The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> with binary payload.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.op_Implicit(Noemax.WebSockets.WebSocketInboundMessage)~Noemax.WebSockets.WebSocketOutboundMessage">
            <summary>
            Performs an implicit conversion from <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/> to <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/>.
            </summary>
            <param name="inboundMessage">The binary data to use as the payload of the message.</param>
            <returns>
            The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> with binary payload.
            </returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketOutboundMessage.Buffer">
            <summary>
            Gets the buffer representing the payload of the message.
            </summary>
            <value>
            The array of bytes containing the payload of the message.
            </value>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketOutboundMessage.Offset">
            <summary>
             Gets the index on the first byte of the message payload in the buffer.
            </summary>
            <value>
            The index of the first byte of the message payload in the buffer.
            </value>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketOutboundMessage.Count">
            <summary>
            Gets or sets the size of the message payload in bytes.
            </summary>
            <value>
            The size of the message payload in bytes.
            </value>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketOutboundMessage.Type">
            <summary>
            Gets and sets the <see cref="T:Noemax.WebSockets.WebSocketMessageType"/> of the message.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Core.WebSocketPingOrPongEventArgs">
            <summary>
            Provides methods and properties for Pong event handler arguments.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketServer`1">
            <summary>
            Provides the WebSocket protocol server.
            </summary>
            <typeparam name="TService">
            The  <see cref="T:Noemax.WebSockets.IWebSockets">IWebSockets</see> implementation
            providing the logic for handling connections and incoming messages.
            </typeparam>
            <remarks>
            <para>
            The WebSocketServer class provides methods and properties for hosting on one or more WebSocket 
            service endpoints. TService class must implement the <see cref="T:Noemax.WebSockets.IWebSockets"/> interface to provide 
            the application specific functionality.
            </para>
            <para>
            AddEndpoint(_uri) method can be used to create the endpoint with a specified URI. If TService instance 
            is not provided, it is created automatically once the first client connection is accepted. You can use 
            AddEndpoint(_uri,TService) overload to create a endpoint for already created instance of TService.
            </para>
            <para>
            <see cref="M:Noemax.WebSockets.WebSocketServer.Open"/> starts listening on all endpoints.
            </para> 
            <para>
            <see cref="M:Noemax.WebSockets.WebSocketServer.Close"/> closes all endpoints and release all associated resources.
            </para>
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketServer">
            <summary>
            Provides the WebSocket protocol server.
            </summary>   
            <remarks>
            <para>
            The WebSocketServer class provides methods and properties for hosting on one or more WebSocket 
            service endpoints. 
            </para>
            <para>
            Use <see cref="M:Noemax.WebSockets.WebSocketServer.AddEndpoint``1(System.Uri)"/> and <see cref="M:Noemax.WebSockets.WebSocketServer.AddEndpoint(System.Uri,Noemax.WebSockets.IWebSockets)"/>  to add
            endpoints to the server.
            </para>
            <para>
            <see cref="M:Noemax.WebSockets.WebSocketServer.Open"/> starts listening on all endpoints.
            </para> 
            <para>
            <see cref="M:Noemax.WebSockets.WebSocketServer.Close"/> closes all endpoints and release all associated resources.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.AddEndpoint``1(System.Uri)">
            <summary>
            Adds a new endpoint with specified URI and specified IWebSockets implementation. 
            </summary>
            <typeparam name="TService">The type that must implement the IWebSockets interface.</typeparam> 
            <param name="uri">The URI of the new endpoint.</param>    
            <remarks>
            An new instance of TService is initialized automatically once the first client connection is  accepted. 
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.AddEndpoint``1(System.String)">
            <summary>
            Adds a new endpoint with specified URI and specified IWebSockets implementation. 
            </summary>
            <typeparam name="TService">The type that must implement the IWebSockets interface.</typeparam> 
            <param name="uri">The URI of the new endpoint.</param>    
            <remarks>
            An new instance of TService is initialized automatically once the first client connection is  accepted. 
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.AddEndpoint(System.Uri,Noemax.WebSockets.IWebSockets)">
            <summary>
            Adds a new endpoint with specified URI and specified IWebSockets instance. 
            </summary>
            <param name="uri">The URI of the new endpoint.</param>
            <param name="instance">The instance of IWebSockets for the endpoint.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.AddEndpoint(System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Adds a new endpoint with specified URI and specified IWebSockets instance. 
            </summary>
            <param name="uri">The URI of the new endpoint.</param>
            <param name="instance">The instance of IWebSockets for the endpoint.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.Open">
            <summary>
            Opens the server and start listening for client connections on all endpoints.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.Close">
            <summary>
            Closes all the server endpoints and releases all associated resources.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.Compression">
            <summary>
            Gets and sets the compression scheme being used for compressing the payload sent through the WebSocket connection.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.PortSharing">
            <summary>
            Gets and sets whether the port sharing infrastructure should be used in order to share the IP endpoint 
            across processes exposing WebSocket endpoints on the same computer.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.KeepaliveSendInterval">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.KeepaliveTimeout">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.KeepaliveMode">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.KeepaliveResponseThrottlingInterval">
            <summary />
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.KeepaliveRoundtripRequired">
            <summary />
        </member>
        <member name="E:Noemax.WebSockets.WebSocketServer.Handshake">
            <summary>
            Event triggered when the WebSocket handshake is performed.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.Security">
            <summary>
            Gets the server security settings.
            </summary>        
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.TraceSource">
            <summary>
            Gets and sets TraceSource for tracing events.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer`1.AddEndpoint(System.Uri)">
            <summary>
            Adds a new endpoint with specified URI and specified TService instance. 
            </summary>
            <param name="uri">The URI of the new endpoint.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer`1.AddEndpoint(System.String)">
            <summary>
            Adds a new endpoint with specified URI and specified TService instance. 
            </summary>
            <param name="uri">The URI of the new endpoint.</param>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketServerSecurity">
            <summary>
            Provides the WebSocket server security settings that are applied when SSL/TLS transport security is enabled.
            </summary>
            <remarks>
            SSL/TLS security is enabled <b>Required</b> property is set to <b>true</b> or when the service endpoint
            URI includes 'wss' or 'https' schema. It's recommended to use <b>Required</b> property rather than relly on the URI, to make sure that security
            is forced on all endpoints.
            If SSL/TLS security is enabled the <b>ServerCertificate</b> must be set to the valid X509 certificate, 
            otherwise server with fail to start and <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServerSecurity.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="owner">The object owning the security settings.</param>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServerSecurity.AuthenticationScheme">
            <summary>
            Gets or sets the authentication scheme to be used by the server endpoints.
            </summary>        
        </member>
        <member name="E:Noemax.WebSockets.WebSocketServerSecurity.UsernamePasswordAuthenticate">
            <summary>
            Event trigger when basic HTTP authentication is performed.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServerSecurity.Required">
            <summary>
            Gets and sets whether the SSL/TLS security is enabled for all endpoints.
            </summary>
            <remarks>
            Setting this property to true ensures that security is getting enabled for all 
            endpoints defined for the server.
            
            If this property is set to false then only endpoints that have "wss" schema e.g.
            'wss://www.myserver.com' will have transport security enabled.
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServerSecurity.RequireClientCertificate">
            <summary>
            Gets and sets whether the server should require clients to provide the their certificate
            for authentication.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServerSecurity.CheckCertificateRevocation">
            <summary>
            Gets and sets whether the server should check the client certificate chain for revocation.
            </summary>
            <remarks>
            Note: the self-signed certificates will fail the revocation check. 
            When using self-signed certificates, set this property to <b>false</b>, 
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServerSecurity.ServerCertificate">
            <summary>
            Gets and sets the certificate to be used by the server.
            </summary>
            <remarks>
            This property MUST be set to the valid X509Certificate when SSL/TLS security is enabled, 
            otherwise InvalidOperationException exception will be thrown.
            </remarks>
        </member>
        <member name="E:Noemax.WebSockets.WebSocketServerSecurity.ValidateCertificate">
            <summary>
            Occurs when a client certificate validation is being validated by the server. Provide an the event
            handler to perform an additional custom certificate validation.
            </summary>
            <remarks>
            <para>
            The event handler is expected to throw an exception if client certificate is not valid; otherwise
            the it is considered being valid.
            </para>
            <para>
            Note prior this event occurs, WebSocketServer validates certificate according to
            its security settings. Please check the <see cref="P:Noemax.WebSockets.Core.WebSocketClientSecurity.CheckCertificateRevocation">
            CheckCertificateRevocation</see> properties for more details.
            </para>
            </remarks> 
        </member>
        <member name="T:Noemax.WebSockets.IWebSockets">
            <summary>
                Defines the contract that a service must implement in order to receive message and manage connections.
            </summary>
            <remarks>
                <para>
                    It preferable to use <see cref="T:Noemax.WebSockets.WebSocketService"/> as the base class for service implementation, rather
                    than implementing the IWebSockets interface, WebSocketService implements most of the methods
                    defined by IWebSockets and provides most of required functionality. You need to implemented IWebSockets
                    interface only if have to provide completely custom message processing, dispatching and connection
                    management.
                </para>
                <para>
                    Methods of IWebSocket are being called by working threads that handle inbound messages and
                    connections. It should be expected that multiple threads can call a same instance of IWebSockets
                    concurrently.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnHandshake(System.Object,Noemax.WebSockets.WebSocketHandshake)">
            <summary>
                The method is called during the WebSocket handshake.
            </summary>
            <param name="sender">The initiator of event that performs WebSocket handshake on local endpoint.</param>
            <param name="handshake">The WebSocketHandshake instance.</param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnMessage(Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.WebSocketInboundMessage)">
            <summary>
                This method is called when an inbound message is being received.
            </summary>
            <param name="channel">The channel through which the inbound message is being received.</param>
            <param name="message">The inbound message being received.</param>
            <remarks>
                WebSocket working thread does not buffer entire message prior calling this method,
                <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/> provides the methods to either buffer the message
                prior consuming it or to consume it as a input.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnPing(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})">
            <summary>
            This method is called when an inbound PING frame is received.
            </summary>
            <param name="channel">The channel through which the inbound PING frame was received.</param>
            <param name="payload">The payload of the PING frame.</param>
            <remarks>
            PONG reply is sent automatically unless connection is closed during the call 
            to the OnPing method.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnPong(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})">
            <summary>
            This method is called when an inbound PONG frame is received.
            </summary>
            <param name="channel">The channel through which the inbound PONG frame was received.</param>
            <param name="payload">The payload of the PONG frame.</param>        
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnOpen(Noemax.WebSockets.WebSocketChannel)">
            <summary>
                This method is called when a new channel being open.
            </summary>
            <param name="channel">The channel being open.</param>
            <remarks>
                Both on the server and on the client side this method is called when connection from the
                client to the server is established and WebSocket handshake is complete.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnError(Noemax.WebSockets.WebSocketChannel,System.Exception)">
            <summary>
                This method is called when a channel encounters an error.
            </summary>
            <param name="channel">The channel that encounters the error.</param>
            <param name="e">The exception related to the error.</param>
            <remarks>
                All errors encountered by the channel during sending/receiving/dispatching messages
                are reported through this method. The channel that encountered the error is not necessary
                disconnected or closed, use the <see cref="P:Noemax.WebSockets.WebSocketChannel.Connected"/> property to determine
                the status of the channel.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnClose(Noemax.WebSockets.WebSocketChannel,System.Int16,System.String)">
            <summary>
            This method is called when a channel is being closed.
            </summary>
            <param name="channel">The channel being closed.</param>
            <param name="statusCode">The status code provided by the remote side to identify the reason 
            for closing the connection.</param>
            <param name="reason">The text description of the status code.</param>
            <remarks>
            <para>
            If the connection is being closed due to receiving a CLOSE control frame from the remote side, 
            the <i>statusCode</i> and <i>reason</i> parameters may contain information 
            provided by the remote side to identify the reason for closing the connection.
            </para>
            <para>
            When this method is called, messages might still be sent successfully to the remote side 
            for a short period of time. However, no more messages are expected to be received from 
            the remote side.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.GetProperty``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketService">
            <summary>
            Provides the base class implementation for <see cref="T:Noemax.WebSockets.IWebSockets"/> interface. 
            </summary>
            <remarks>
            <para>
            WebSocketService is recommended to use as the base class for the <see cref="T:Noemax.WebSockets.IWebSockets"/> service 
            implementations. It provides methods and properties for managing the list of associated 
            <see cref="T:Noemax.WebSockets.WebSocketChannel"/>, sending and receiving messages through all connected channels
            and message broadcasting. 
            </para>
            <para>
            This class should be extended to provide application specific logic. 
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.WebSockets.WebSocketService"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnHandshake(System.Object,Noemax.WebSockets.WebSocketHandshake)">
            <summary>
            The method is called during the WebSocket handshake, override this method to accept 
            or to decline it.
            </summary>
            <param name="sender">The initiator of event that performs WebSocket handshake on local endpoint.</param> 
            <param name="handshake">The WebSocketHandshake instance.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnOpen(Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Handles the event triggered when a new channel is being open and associated 
            to the service instance.
            </summary>
            <param name="channel">The channel being open and associated to the service instance.</param>
            <remarks>
            <para>
            The base implementation adds the channel to the list of associated channels and
            sets <see cref="P:Noemax.WebSockets.WebSocketChannel.ID"/> to a random literal GUID string.
            </para>
            <para>
            When overriding this method you can provide additional application specific logic.
            For example, you can instantiate a new instance of the service and  pass the channel 
            to this instance by calling its OnOpen method, instead of OnOpen of the base class. 
            This way you can control the number of channels handled by each instance of the 
            service or group channels and service instances by any other criteria.
            </para>
            <para>
            Adding the channel to more than one service instances is also possible, if channel is associated 
            to more than one instance of WebSocketService, all service instances will be broadcasting 
            messages to the channel. But only one instance specified by <see cref="P:Noemax.WebSockets.WebSocketChannel.ServiceInstance"/> 
            will be handling inbound messages.
            </para>
            <para>
            Channel can be removed from the list of associated channels 
            using the <see cref="M:Noemax.WebSockets.WebSocketService.RemoveChannel(Noemax.WebSockets.WebSocketChannel)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.WebSocketInboundMessage)">
            <summary>
                Handles the inbound message based on the payload type.
                Override this method if you need to provide alternative functionality or use the streaming API.
            </summary>
            <param name="channel">The channel through which the message is being received.</param>
            <param name="message">The message being received.</param>
            <remarks>
                <para>
                    The base implementation of this method evaluates the type of the data being received
                    in the message payload by reading the opcode in the first frame. If message is fragmented
                    it's getting buffered and interpreted as text or the binary byte array depending
                    on whether this message is text or binary.
                    Then the message is dispatched to <see cref="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.String)"/> or
                    <see cref="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})"/> depending on the type of the message.
                </para>
                <para>
                    Overriding this method allows the use of alternative message processing using
                    the streaming API exposed by the <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/>
                    class.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.String)">
            <summary>
            Handles a text message received from a specified channel.
            </summary>
            <param name="channel">The channel through which the message was received.</param>
            <param name="text">The text payload of the message.</param>
            <remarks>This method does nothing and should to be override to provide application
            specific functionality.</remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})">
            <summary>
            Handles a binary message received from a specified channel.
            </summary>
            <param name="channel">The channel through which the message was received.</param>
            <param name="buffer">The binary payload of the message.</param>
            <remarks>This method does nothing and should to be override to provide application
            specific functionality.</remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnPing(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})">
            <summary>
            This method is called when a PING frame received from a specified channel.
            </summary>
            <param name="channel">The channel through which the PING frame was received.</param>
            <param name="payload">The payload of the PING frame.</param>
            <remarks>
            <para>
            The PONG response to the PING message is sent automatically, unless the channel is 
            closed within OnPing method implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnPong(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})">
            <summary>
            This method is called when  a PONG frame received from a specified channel.
            </summary>
            <param name="channel">The channel through which PONG frame was received.</param>
            <param name="payload">The payload of the PONG frame.</param>
            <remarks>
            This method can be overrides if alternative functionality is needed.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnError(Noemax.WebSockets.WebSocketChannel,System.Exception)">
            <summary>
            Handles a error occurred in a specified channel.
            </summary>
            <param name="channel">The channel that encounters the error..</param>
            <param name="e">The exception related to the error. </param>
            <remarks>
            <para>
            All errors encountered by the channel during sending/receiving/dispatching messages
            are reported through this method. The channel that encountered the error is not necessary 
            disconnected or closed, use the <see cref="P:Noemax.WebSockets.WebSocketChannel.Connected"/> property to determine
            the status of the channel.
            </para>
            <para>
            The base implementation calls <see cref="M:Noemax.WebSockets.WebSocketChannel.Abort"/> which
            drops the channel connection and then removes the channel from
            the list of associated channels using 
            <see cref="M:Noemax.WebSockets.WebSocketService.RemoveChannel(Noemax.WebSockets.WebSocketChannel)"/>. 
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnClose(Noemax.WebSockets.WebSocketChannel,System.Int16,System.String)">
            <summary>
            This method is called when a channel is being closed.
            </summary>
            <param name="channel">The channel being closed.</param>
            <param name="statusCode">The status code provided by the remote side to identify the reason 
            for closing the connection.</param>
            <param name="reason">The text description of the status code.</param>
            <remarks>
            <para>
            If the connection is being closed due to receiving a CLOSE control frame from the remote side, 
            the <i>statusCode</i> and <i>reason</i> parameters may contain information 
            provided by the remote side to identify the reason for closing the connection.
            </para>
            <para>
            When this method is called, messages might still be sent successfully to the remote side 
            for a short period of time. However, no more messages are expected to be received from 
            the remote side.
            </para>
            <para>
            When this method is called the base implementation is removes the channel from the list of 
            associated channels. 
            </para>
            <para>
            You can override this method to provide alternative functionallity.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.GetChannels">
            <summary>
            Returns the list of the channels associated to the service instance.
            </summary>
            <returns>An array of WebSocketChannel objects.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendPing">
            <summary>
            Sends the PING message to all channels associated to the service instance.
            </summary>
            <remarks>
            <para>
             Once PING messages are sent, OnPong method will be called for each PONG reply received.
             </para>
             <para>
             This method does not block while PING frame is sent, all PING frames are sent asynchronously.
             </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendPing(System.Collections.Generic.IEnumerable{Noemax.WebSockets.WebSocketChannel})">
            <summary>
            Sends the PING message to the specified list of channels.
            </summary>
            <remarks>
            <para>
            Once PING messages are sent, OnPong method will be called for each PONG reply received.
            </para>
            <para>
            This method does not block while PING frame is sent, all PING frames are sent asynchronously.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendToAll(System.String)">
            <summary>
            Sends the text message to all channels associated to the service instance.
            </summary>
            <param name="text">The text message to send.</param>
            <remarks>
            <para>
            The message is sent synchronously by iterating the list of associated channels sequentially.
            </para>
            <para>
            This method is not effective for broadcasting messages to large number of channels, where slow channels
            will delay the broadcasting.
            </para>
            <para>
            Use this method in order to send message synchronously in cases when service instance handles a single 
            channel or very few channels.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendToAll(System.ArraySegment{System.Byte})">
            <summary>
            Sends the binary message to all channels associated to the service instance.
            </summary>
            <param name="message">The segment of array of bytes referencing the bytes to be sent.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendToAll(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the binary message to all channels associated to the service instance.
            </summary>
            <param name="buffer">The array containing message to be sent.</param>
            <param name="offset">The offset in the array where the binary message starts.</param>
            <param name="count">The number of bytes in the binary message.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendToAll(Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
            Sends the message to all channels associated to the service instance.
            </summary>
            <param name="message">The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage">WebSocketOutboundMessage</see> object representing the message.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendTo(System.Collections.Generic.IEnumerable{Noemax.WebSockets.WebSocketChannel},Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
            Sends the message to the list of specified channels associated to the service instance.
            </summary>
            <param name="channels">The list of channels to send message too.</param>
            <param name="message">The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage">WebSocketOutboundMessage</see> object representing the message.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendBatchAsync(Noemax.WebSockets.WebSocketChannel[],Noemax.WebSockets.WebSocketOutboundMessage[])">
            <summary>
            Sends the batch of messages to the list of channels asynchronously. 
            </summary>
            <param name="channels">The list of channels to send messages too.</param>
            <param name="messages">The batch of messages to be send.</param>
            <remarks>
            <para>
            The batch of messages is getting enqueued into each channel outbound message queue and does not block the 
            calling thread until the batch is sent. Once channel is ready to send next batch of messages entire 
            outbound queue is treated as single batch and sent asynchronously.
            </para>
            <para>
            Application can control the size of outbound queues by reading the WebSocketChannel.OutboundQueueSize property or 
            setting the WebSocketChannel.MaxOutboundQueueSize property. This method is thread safe and can be called by multiple 
            threads concurrently. 
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[])">
            <summary>
            Sends the batch of messages to all associated channels asynchronously. 
            </summary>
            <param name="messages">The batch of messages to be send.</param>
            <remarks>
            The batch of messages is getting enqueued into each channel outbound message queue and does not block the 
            calling thread until the batch is sent. Once channel is ready to send next batch of messages entire 
            outbound queue is treated as single batch and sent asynchronously.
            
            Application can control the size of outbound queues by reading the WebSocketChannel.OutboundQueueSize 
            property or setting the WebSocketChannel.MaxOutboundQueueSize property.
            
            This method is thread safe and can be called by multiple threads concurrently. 
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.Broadcast(Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
            Broadcasts the message to all channels associated to the service instance.
            </summary>
            <param name="message">The message to broadcast.</param>
            <remarks>
            Broadcast() performs message broadcasting to all connected channels in most efficient manner.
            
            Instead of sending message into each channel sequentially as SendMessage(), Broadcast() broadcasts
            messages asynchronously to all channels and also preforms grouping of messages into batches 
            whenever possible.
            
            This method is thread safe and can be called by multiple working threads concurrently. Calling this method
            from multiple threads concurrently does not block those threads until current batch is sent, but helps to 
            group messages into batches and improves the throughput.
            
            No artificial delay is used to group messages into batches, in high throughput environment 
            they are formed while previous batch is being broadcasted without delaying transfer.
            
            Read <see cref="M:Noemax.WebSockets.WebSocketService.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[])">SendBatchAsync</see> for more details.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.Broadcast(Noemax.WebSockets.WebSocketOutboundMessage,System.Collections.Generic.IEnumerable{Noemax.WebSockets.WebSocketChannel})">
            <summary>
            Broadcasts the message to all channels associated to the service instance.
            </summary>
            <param name="message">The message to broadcast.</param>
            <param name="channels">The channels to which the message will be sent.</param>
            <remarks>
            Broadcast() performs message broadcasting to all connected channels in most efficient manner.
            
            Instead of sending message into each channel sequentially as SendMessage(), Broadcast() broadcasts
            messages asynchronously to all channels and also preforms grouping of messages into batches 
            whenever possible.
            
            This method is thread safe and can be called by multiple working threads concurrently. Calling this method
            from multiple threads concurrently does not block those threads until current batch is sent, but helps to 
            group messages into batches and improves the throughput.
            
            No artificial delay is used to group messages into batches, in high throughput environment 
            they are formed while previous batch is being broadcasted without delaying transfer.
            
            Read <see cref="M:Noemax.WebSockets.WebSocketService.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[])">SendBatchAsync</see> for more details.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.AddChannel(Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Adds the channel to the list of channels associated to the service instance.
            </summary>
            <param name="channel">The channel to associate with the service instance.</param>
            <remarks>
            <para>
            All channels accepted by the service instance through are transparently added to the list 
            of associated channels . 
            </para>
            <para>
            AddChannel can be used to associated the channel to a different service instances. For example chat
            client channel can be moved from one chat root into another. In order to implement this you can call 
            RemoveChannel on the instance representing the current chat room and call AddChannel of 
            another instance.
            </para>
            <para>
            The same applies to the client side, you can add multiple client channels to the already exiting
            service instance and use it for broadcasting messages to multiple servers.
            </para>
            <para>
            Note if channel is added to more than one instance of WebSocketService, all instances will be 
            broadcasting messages to the channel. But only the instance specified by 
            <see cref="P:Noemax.WebSockets.WebSocketChannel.ServiceInstance"/> will be handling inbound messages. Channel can be removed
            from the list by using <see cref="M:Noemax.WebSockets.WebSocketService.RemoveChannel(Noemax.WebSockets.WebSocketChannel)"/>.
            </para>
            </remarks>  
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.RemoveChannel(Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Removes the channel from the list of channels associated to the service instance.
            </summary>
            <param name="channel">The channel to associate with the service instance.</param>
            <remarks>
            <para>
            All channels accepted by the service instance through the call to OnOpen method are getting added to the
            list of associated channels automatically. 
            </para>
            <para>
            RemoveChannel can be used to transfer accepted channels between different service instances. 
            </para>
            <para>
            For example:
            </para>
            <para>
            Chat client channel can be moved from one chat root into another. In order to implement this you can call 
            RemoveChannel on the instance representing one chat room and call AddChannel of the instance representing
            another chat room.
            </para>
            <para>
            The same applies to the client side, you can add established client channels to the already exiting
            service instance, in order to use it for broadcasting messages to multiple servers.
            </para>
            </remarks>  
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.CreateClient(System.Uri)">
            <summary>
            Creates a client channel associated to the service.
            </summary>
            <param name="uri">The URI of the target server endpoint.</param>
            <returns>Returns a channel connecting the service instance to remote endpoint.</returns>        
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.CreateClient(System.Uri,System.String,System.String)">
            <summary>
            Creates a client channel associated to the service.
            </summary>
            <param name="uri">The URI of the target server endpoint.</param>
            <param name="origin">The origin header to be used during WebSocket handshake.</param>
            <param name="protocol">The protocol header to be used during WebSocket handshake</param>
            <returns>The new instance of WebSocketClient.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.CloseChannels">
            <summary>
            Closes all channels associated to the service instance.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.CloseChannels(System.TimeSpan)">
            <summary>
            Closes all channels associated to the service instance within specification interval of time.
            </summary>
            <param name="timeout">The maximum amount of time to wait for graceful disconnection.</param>
            <remarks>
            If service fails to disconnect all channels gracefully in specified interval of time, it will
            close remaining channels without performing final close handshake, or waiting for ongoing 
            operations to complete.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.CalcTotalOutboundQueueSize">
            <summary>
            Gets the total sizes of all outbound message queues associated to the service instance.
            </summary>
            <remarks>
            <para>
            Calling this method calculate the sum of all outbound queue sizes, this involves thread synchronization
            and can be processing intensive.
            </para>
            <para>
            The size of outbound message queue does not indicate the size of memory being used by message in the queue, 
            but amount of data to be sent.
            </para>
            <para>
            The outbound queue size equal 0, doesn't indicate all messages have been delivered to remote side, 
            last asynchronous send operation can still be in progress and last batch of messages being sent.
            </para>
            <para>
            This method is intended to be used for reporting the status of the service instance rather
            than flow control.
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.WaitForOutboundQueue(System.TimeSpan)">
            <summary>
            Blocks the current thread until outbound queues of all associated channels are empty, 
            or timeout expires.
            </summary>
            <param name="timeout">The amount of time to wait for outbound queues to decrease.</param>
            <returns>
            True if outbound queues met the specified size limit within specified period of time.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.WaitForOutboundQueue(System.Int64,System.TimeSpan)">
            <summary>
            Blocks the current thread until outbound queues of each associated channel to decrease 
            bellow specified size limit, or timeout expires.
            </summary>
            <param name="queueSize">The size the queue is expected to have at the end of the wait operation.</param>
            <param name="timeout">The amount of time to way for outbound queues to decrease.</param>
            <returns>
            True if outbound queues met the specified size limit within specified period of time.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.GetProperty``1">
            <summary>
            Gets the the object of the specified type associated to the service instance.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <returns>The object of the specified type or null if object of the specified type was not found.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.AddProperty``1(``0)">
            <summary>
            Adds or replaces the the object of the specified type from the properties of the service instance.
            </summary>
            <typeparam name="T">The type of the object to add.</typeparam>
            <returns>The object of the specified type that was associated to the service instance prior the call if any..</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.RemoveProperty``1(``0)">
            <summary>
            Removes the object of specified type from the properties of the service instance.
            </summary>
            <typeparam name="T">The type of the object to remove.</typeparam>
            <param name="obj">The object to remove.</param>
            <returns>The object removed from the service properties.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.AddChannelGroup``1(System.String,``0)">
            <summary>
            Adds the channel group which is represented by TService class that must be inherited from WebSocketService.
            </summary>
            <typeparam name="TService">A class that must be inherited from WebSocketService.</typeparam>
            <param name="id">The string identifying the channel group.</param>
            <param name="service">The instance of TService class.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.AddChannelGroup``1(System.String)">
            <summary>
            Adds the channel group which is represented by TService class that must be inherited from WebSocketService and automatically 
            creates the instance of TService using default constructor.
            </summary>
            <typeparam name="TService">A class that must be inherited from WebSocketService.</typeparam>
            <param name="id">The string identifying the channel group.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.AddChannelToGroup(System.String,Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Add channel to the channel group.
            </summary>
            <param name="id">The string ID of the channel group.</param>
            <param name="channel">The channel to add to the group.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Noemax.WebSockets.WebSocketService.ProcessMessage(Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.WebSocketInboundMessage)" -->
        <member name="P:Noemax.WebSockets.WebSocketService.ChannelCount">
            <summary>
            Gets the number of channels associated to the service instance.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketService.MaxReceivedMessageSize">
            <summary>
            Gets and sets the maximum message size limit for inbound messages.
            </summary>
            <remarks>
            <para>
            This value applies to inbound messages when <see cref="T:Noemax.WebSockets.WebSocketService"/> has to buffer message 
            prior processing it, e.g. when messages is dispatched to <see cref="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.String)"/>
            or <see cref="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})"/> methods.
            </para>
            <para>
            If message size exceeds the specified limit the error is reported through 
            <see cref="M:Noemax.WebSockets.WebSocketService.OnError(Noemax.WebSockets.WebSocketChannel,System.Exception)"/> while connection is closed.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketService.Encoding">
            <summary>
            Gets and sets the Encoding instance that is used for decoding text messages.
            </summary>
            <remarks>
            You can set this property your own Encoding if you want to change default UTF-8 decoding 
            settings. By default this property is set to the static Encoding.UTF8 property value.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketService.TraceSource">
            <summary>
            Gets and sets TraceSource for tracing events.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketState">
            <summary>
            Defines the states of WebSocket connection.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketState.Initial">
            <summary>
            WebSocket is created but not connected to any endpoint yet.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketState.Connected">
            <summary>
            WebSocket is connected and can send and receive message.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketState.OutputClosed">
            <summary>
            WebSocket is connected but cannot send messages because close frame was already sent to remote endpoint.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketState.InputClosed">
            <summary>
            WebSocket is connected but does not receive messages because it received the close frame from remote endpoint.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketState.Error">
            <summary>
            WebSocket connection closed due to error. 
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketUsernamePasswordCredentials">
            <summary>
            Credentials used for basic client authentication using user-name and password.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketUsernamePasswordCredentials.Username">
            <summary>The user name.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketUsernamePasswordCredentials.Password">
            <summary>The password associated to the user name.</summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ActionInvoker`1">
            <summary>
            The invoker providing one way operations.
            </summary>
            <typeparam name="T">The type of the input parameter accepted by Invoker.</typeparam>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ActionInvoker">
            <summary>
            The invoker for operations that does not return any result.
            </summary>    
        </member>
        <member name="T:Noemax.WebSockets.Messaging.RequestInvoker">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.Invoker">
            <summary>
                Abstract based class for invoker that process inbound message by invoking the method of the service and passing
                deserialized message as parameter.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Invoker.Invoke(Noemax.WebSockets.Messaging.EnvelopedMessage,Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.IMessageSerializer)">
            <summary>
                Invoke the method using the specified message.
            </summary>
            <param name="message">The message that is dispatched to target method.</param>
            <param name="channel">The channel through which the message was received, optionally provided as the second parameter.</param>
            <param name="serializer">The serializer used to deserialize the message.</param>
            <remarks>
                <para>
                    The <see cref="T:Noemax.WebSockets.Messaging.IMessageSerializer"/> provided as <b>serializer</b> parameter, is used to serialize response
                    when necessary. This overload of Invoke method
                    takes <see cref="T:Noemax.WebSockets.Messaging.EnvelopedMessage"/> as a parameter, so that additional metadata provided by the message can
                    be accessed.
                </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.Invoker.InputTypes">
            <summary>
                Gets the list of the types accepted by Invoker as parameters for calling the target method.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.Invoker.KnownTypes">
            <summary>
                Gets a list of known types that must be registered with <see cref="T:Noemax.WebSockets.Messaging.IMessageSerializer"/>.
            </summary>
            <remarks>
                This list includes types that should be known to deserializer in order to successfully deserialize inbound message.
                Usually this includes all <see cref="P:Noemax.WebSockets.Messaging.Invoker.InputTypes"/> plus
                extra types that can be encountered within a message.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.RequestInvoker.Invoke(Noemax.WebSockets.Messaging.EnvelopedMessage,Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.IMessageSerializer)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.RequestInvoker.OnInvoke(Noemax.WebSockets.Messaging.ConversationMessage,Noemax.WebSockets.WebSocketChannel)">
            <summary>
            When override invokes the associated operation using the parameters recieved with the message.
            </summary>
            <param name="message">The message containing the parameters for invocation.</param>
            <param name="channel">The channel through which the message was received.</param>
            <returns></returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionInvoker.OnInvoke(Noemax.WebSockets.Messaging.ConversationMessage,Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionInvoker.OnInvokeAction(System.Object,Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Invokes the local message operation handler.
            </summary>
            <param name="parameter">The parameter. </param>
            <param name="channel">The channel through which the inbound message was received.</param>
            
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ActionInvoker.InputTypes">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ActionInvoker`1.InputTypes">
            <summary>
            Gets the type list of types accepted by invoker.
            </summary>
            <value> Returns the type of [T].</value> 
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ActionInvoker`1.KnownTypes">
            <summary>
            Gets the list of types that must be known by the serializer.
            </summary>
            <value> Returns the type of [T]. </value>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ActionInvokerFactory">
            <summary>
            The factory creating <see cref="T:Noemax.WebSockets.Messaging.ActionInvoker`1"/> instances.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.InvokerFactory">
            <summary>
            The factory producing <see cref="T:Noemax.WebSockets.Messaging.Invoker"/> instances.
            </summary>
            <remarks>
            <para>
            The factory is used in combination with MessageDispatcher to create runtime model for dispatching inbound messages to
            the methods exposed by the service.
            </para>
            <para> <see cref="M:Noemax.WebSockets.Messaging.InvokerFactory.CanCreateInvoker(System.Reflection.MethodInfo)"/> determines if the methods have compatible signatures and can be called by invoker produced 
            by the factory. </para> 
            <para>The Invoker instances produced by the factory can be either predefine generic classes that take suitable number 
            of parameters similar to Action[T,T1,...] delegate or dynamically generated during runtime. Invoker produced by the factory
            is responsible to perform a call to the target method using the data deserialized from inbound message. It can perform 
            any parameter transformation required and also process result produced by the method.</para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.InvokerFactory.CanCreateInvoker(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the factory can create an Invoker for specified method.
            </summary>
            <param name="methodInfo">The to check for compatibility with Invoker factory.</param>
            <returns>True if factory can create invoker for the method; otherwise False.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.InvokerFactory.CreateInvoker(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates <see cref="T:Noemax.WebSockets.Messaging.Invoker"/> for the specified method.
            </summary>
            <param name="info">The description of the method.</param>
            <param name="instance">The instance of the class providing the method.</param>
            <returns>The Invoker that dispatches the messages to the specified method.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.InvokerFactory.CreateActionInvoker(System.Type,System.Type,System.Type,System.Reflection.MethodInfo,System.Object)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.InvokerFactory.CreateFuncInvoker(System.Type,System.Type,System.Type,System.Reflection.MethodInfo,System.Object)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.InvokerFactory.CreateVoidInputInvoker(System.Type,System.Type,System.Reflection.MethodInfo,System.Object)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionInvokerFactory.CanCreateInvoker(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the factory can create an Invoker for specified method.
            </summary>
            <param name="methodInfo">The to check for compatibility with Invoker factory.</param>
            <returns>True if factory can create invoker for the method; otherwise False.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionInvokerFactory.CreateInvoker(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates <see cref="T:Noemax.WebSockets.Messaging.Invoker"/> for the specified method.
            </summary>
            <param name="info">The description of the method.</param>
            <param name="instance">The instance of the class providing the method.</param>
            <returns>The Invoker that dispatches the messages to the specified method.</returns>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ActionOperation1`1">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ActionOperation1">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ActionOperation1Invoker">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionOperation1Invoker.#ctor(Noemax.WebSockets.Messaging.ActionOperation1)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionOperation1Invoker.OnInvokeAction(System.Object,Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ActionOperation1Invoker.InputTypes">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ActionOperation1Invoker`1">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionOperation1Invoker`1.#ctor(Noemax.WebSockets.Messaging.ActionOperation1{`0})">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionOperation1Invoker`1.OnInvokeAction(System.Object,Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ActionOperation">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ActionOperationInvoker">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionOperationInvoker.#ctor(Noemax.WebSockets.Messaging.ActionOperation)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionOperationInvoker.OnInvokeAction(System.Object,Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ActionOperationInvoker.InputTypes">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ActionOperationInvoker`1">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionOperationInvoker`1.#ctor(System.Action{`0})">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ActionOperationInvoker`1.OnInvokeAction(System.Object,Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.CompressedMessageFormat">
            <summary>
            The compression format to use for compressing the outbound messages.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Messaging.CompressedMessageFormat.Lzf4">
            <summary>
            LZF4 
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Messaging.CompressedMessageFormat.Deflate">
            <summary>
            DEFLATE
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.Messaging.CompressedMessageFormat.GZip">
            <summary>
            GZIP
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.CompressedMessageSerializer">
            <summary>
            Provides a serializer which transparently compress outbound messages and decompress inbound messages.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.IMessageSerializer">
            <summary>
            Defines the interface for implementation that provides serialization of the objects through the WebSocket channels.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IMessageSerializer.EnsureKnownTypes(System.Type[])">
            <summary>
            Registers that the specified type with the serializer.
            </summary>
            <param name="types">The types to register with the serializer.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IMessageSerializer.Serialize(System.Object)">
            <summary>
            Serializes an object into the WebSocket message.
            </summary>
            <param name="obj">The object to serialize into the message.</param>
            <returns>The instance of WebSocketOutboundMessage containing a serialized object.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IMessageSerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Initiates the outbound message with the streamed attachment.
            </summary>
            <param name="output">The output stream through which to send the message.</param>
            <param name="obj">The object to serialize into the method body.</param>
            <returns></returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IMessageSerializer.Deserialize(Noemax.WebSockets.WebSocketInboundMessage,Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageDispatcher)">
            <summary>
            Deserializes object from <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/> content.
            </summary>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="message">The inbound message to deserialize.</param>
            <param name="messageDispatcher">The message dispatcher involved in dispatching the message.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.CompressedMessageSerializer.#ctor(Noemax.WebSockets.Messaging.IMessageSerializer)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.CompressedMessageSerializer.EnsureKnownTypes(System.Type[])">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.CompressedMessageSerializer.Serialize(System.Object)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.CompressedMessageSerializer.Serialize(System.IO.Stream,System.Object)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.CompressedMessageSerializer.Deserialize(Noemax.WebSockets.WebSocketInboundMessage,Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageDispatcher)">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.CompressedMessageSerializer.CompressedMessageFormat">
            <summary>
            Gets and sets the compression format to use for compressing the outbound messages.
            </summary>        
        </member>
        <member name="P:Noemax.WebSockets.Messaging.CompressedMessageSerializer.CompressionLevel">
            <summary>
            The compression level to be applied when messages are compressed.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.CompressedMessageSerializer.CompressionThreshold">
            <summary>
            Gets and sets the minimum size the message to be compressed. 
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ConversationMessage">
            <summary>
            Represents an envelope providing additional metadata for dispatching the message.
            </summary>     
        </member>
        <member name="T:Noemax.WebSockets.Messaging.EnvelopedMessage">
            <summary>
            The base class for all messages sent by PowerWebSockets RPC.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.EnvelopedMessage.GetBody``1">
            <summary>
            Gets the body of the message and convert it to the specified type.
            </summary>
            <typeparam name="T">The type to which to convert the body of the message.</typeparam>
            <returns>The body of the message converted to the specified type.</returns>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.EnvelopedMessage.Body">
            <summary>
            The body of the enveloped message.
            </summary>        
        </member>
        <member name="P:Noemax.WebSockets.Messaging.EnvelopedMessage.Attachment">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ConversationMessage.#ctor">
            <summary>
            Create a new instance of <see cref="T:Noemax.WebSockets.Messaging.ConversationMessage"/>
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ConversationMessage.Id">
            <summary>
            Gets the number identifying the request to the service.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ConversationMessage.IsResponse">
            <summary>
            Gets the value that indicates that message is response to previously sent request message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ConversationMessage.IsFault">
            <summary>
            Gets the value that indicate that the message is fault message.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.DefaultMessageDispatcher">
            <summary>
            Dispatches the messages based on the action string or the data type deserialized from the message payload.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.MessageDispatcher">
            <summary>
                Provides methods and properties for dispatching WebSocket messages to message operations.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageDispatcher.Dispatch(Noemax.WebSockets.WebSocketInboundMessage,Noemax.WebSockets.WebSocketChannel)">
            <summary>
                Dispatches the message to the method that matches inbound message action or accepts the object deserialized form
                the message as parameter.
            </summary>
            <param name="message">The message to dispatch.</param>
            <param name="channel">The channel through which message is received.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageDispatcher.AddOperation(Noemax.WebSockets.Messaging.ICriteria,Noemax.WebSockets.Messaging.Invoker)">
            <summary>
                Creates and adds the messaging operation to the dispatcher.
            </summary>
            <param name="criteria">The criteria based on which a message is dispatched to the operation.</param>
            <param name="invoker">The invoker being used for invoking the operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageDispatcher.AddOperation(Noemax.WebSockets.Messaging.MessageOperationDescription)">
            <summary>
                Adds the message operation to the dispatcher.
            </summary>
            <param name="operation">The operation to add.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageDispatcher.GetOperation(System.Object,Noemax.WebSockets.WebSocketChannel)">
            <summary>
                Resolves the message to the <see cref="T:Noemax.WebSockets.Messaging.MessageOperationDescription"/> that can process the message.
            </summary>
            <param name="message">The message being dispatched.</param>
            <param name="channel">The channel through which the message is being received.</param>
            <returns></returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageDispatcher.TryGetOperation(System.Object,Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageOperationDescription@)">
            <summary>
                Finds the operation with a specified <see cref="P:Noemax.WebSockets.Messaging.MessageOperationDescription.Action"/> value.
            </summary>
            <param name="graph">
                The object representing partially or fully deserialized inbound message as produced by
                <see cref="T:Noemax.WebSockets.Messaging.IMessageSerializer"/>.
            </param>
            <param name="operation">The variable to store the operation if found.</param>
            <param name="channel">The channel through which inbound message was received.</param>
            <returns><b>True</b> if operation was found; <b>False</b> otherwise.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageDispatcher.CreateClientDispatcher(Noemax.WebSockets.WebSocketChannel)">
            <summary>
                Creates the instance of the <see cref="T:Noemax.WebSockets.Messaging.IClientDispatcher"/> facilitating send request and dispatching responses by
                WebSocketClient.
            </summary>
            <param name="channel">The channel for which the client dispatcher is getting created.</param>
            <returns>The client dispatcher created for the specified channel.</returns>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.MessageDispatcher.KnownTypes">
            <summary>
                Gets the list of data types expected to be exchanged by underlying service.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.MessageDispatcher.DefaultSerializer">
            <summary>
                Gets the default <see cref="T:Noemax.WebSockets.Messaging.IMessageSerializer"/> instance used by the underlying service.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.MessageDispatcher.Operations">
            <summary>
                Gets the list of operations being dispatched by the dispatcher.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.DefaultMessageDispatcher.#ctor(System.Object)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WebSockets.Messaging.MessageDispatcher"/>.
            </summary>
            <param name="instance">The instance providing operations to which messages are dispatched.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.DefaultMessageDispatcher.CreateClientDispatcher(Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Create an instance of <see cref="T:Noemax.WebSockets.Messaging.IClientDispatcher"/> associated to the specified channel.
            </summary>
            <param name="channel">The channel to which created client dispatcher is being associated.</param>
            <returns>The new instance of the <see cref="T:Noemax.WebSockets.Messaging.IClientDispatcher"/>. </returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.DefaultMessageDispatcher.RegisterInvokerFactory(Noemax.WebSockets.Messaging.InvokerFactory)">
            <summary>
            Registers <see cref="T:Noemax.WebSockets.Messaging.InvokerFactory"/> to be used when constructing <see cref="T:Noemax.WebSockets.Messaging.Invoker"/> for messaging operation.
            </summary>
            <param name="factory">The InvokerFactory to be registered.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.DefaultMessageDispatcher.ExportKnownTypes(System.Type,System.Type[]@,System.String[]@)">
            <summary>
            Exports the known-types and actions used by the dispatcher for dispatching messages.
            </summary>
            <param name="handlerType">The type of the service providing the messaging operations.</param>
            <param name="knownTypes">The list of types known to the dispatcher.</param>
            <param name="actions">The actions used by the dispatcher.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.DefaultMessageDispatcher.TryGetOperation(System.Object,Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageOperationDescription@)">
            <summary>
            Tries to resolve the operation to which the message is to be dispatched.
            </summary>
            <param name="message">The message to be dispatched.</param>
            <param name="channel">The channel through which the message was received.</param>
            <param name="operation">The operation to which message is to be dispatched.</param>
            <returns>True if operation was resolved; False otherwise.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.DefaultMessageDispatcher.GenerateOperationsFromType(System.Type,System.Object,System.Collections.Generic.ICollection{Noemax.WebSockets.Messaging.InvokerFactory},System.Collections.Generic.ICollection{Noemax.WebSockets.Messaging.MessageOperationDescription})">
            <summary>
            Generates the collection of <see cref="T:Noemax.WebSockets.Messaging.MessageOperationDescription"/> from the methods provided by the specified type.
            </summary>
            <param name="handlerType">The type to scan for message operations.</param>
            <param name="instance">The instance to handle the message operations.</param>
            <param name="invokerFactories">A collection of InvokerFactories to used for allocating an Invoker.</param>
            <param name="operations">The collection to populate with generated MessageOperation objects.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.DefaultMessageDispatcher.TryCreateInvoker(System.Reflection.MethodInfo,System.Object,System.Collections.Generic.ICollection{Noemax.WebSockets.Messaging.InvokerFactory},Noemax.WebSockets.Messaging.Invoker@)">
            <summary>
            Attempts to allocate invoker for the specified method using the collection of <see cref="T:Noemax.WebSockets.Messaging.InvokerFactory"/>.
            </summary>
            <param name="method">The method to allocate Invoker for.</param>
            <param name="instance">The instance of the object implementing the method.</param>
            <param name="invokerFactories">The collection of InvokerFactory.</param>
            <param name="invoker">The invoker allocated for the method.</param>
            <returns>True if Invoker was allocated; False otherwise.</returns>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.DefaultMessageDispatcher.DefaultSerializer">
            <summary>
            Gets and sets the <see cref="T:Noemax.WebSockets.Messaging.IMessageSerializer"/> used by the dispatcher.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.DefaultMessageDispatcher.KnownTypes">
            <summary>
            The list of the types known to dispatcher.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ICriteria">
            <summary>
                Represents the criteria based on which <see cref="T:Noemax.WebSockets.Messaging.MessageDispatcher"/> dispatches messages.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ICriteria.Match(System.Object,Noemax.WebSockets.WebSocketChannel)">
            <summary>
                Determines whether inbound message does match the operation represented by the <see cref="T:Noemax.WebSockets.Messaging.ICriteria"/>.
            </summary>
            <param name="graph">The message to check against the criteria.</param>
            <param name="channel">The channel through which message was received.</param>
            <returns>True if message can be dispatched to the operation represented by this instance; False otherwise.</returns>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.FaultInfo">
            <summary>
            Provides information on the fault returned by remote side as response to request message.
            </summary>    
        </member>
        <member name="P:Noemax.WebSockets.Messaging.FaultInfo.Code">
            <summary>
            The string identifying the type of the fault.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.FaultInfo.Message">
            <summary>
            The string containing the message/description of the fault.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.FaultInfo.Data">
            <summary>
            The list of the strings provided additional details about the fault.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.FaultMessage">
            <summary>Represents a fault message sent as response to the request to the remote endpoint.</summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.FaultMessage.FaultInfo">
            <summary>
            The description of the fault sent by the remote endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.FaultMessage.IsResponse">
            <summary>
            Always return true.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.FaultMessage.IsFault">
            <summary>
            Always return true.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.FaultMessage.Body">
            <summary>Gets the body of the message.</summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.FuncInvoker`2">
            <summary>
            The invoker providing request/response operations.
            </summary>
            <typeparam name="TResult">The type returned by the target method.</typeparam>
            <typeparam name="TRequest">The type used by the target method as parameter.</typeparam>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.FuncInvoker`2.#ctor">
            <summary>
            Initialize as new instance of <see cref="T:Noemax.WebSockets.Messaging.FuncInvoker`2"/>
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.FuncInvoker`2.OnInvoke(Noemax.WebSockets.Messaging.ConversationMessage,Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Invokes the target method and sends returned object of [TResult] type as response through the same channel.
            </summary>
            <param name="requestMessage">The inbound message.</param>
            <param name="channel">The channel through which message was received.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.FuncInvoker`2.OnInvoke(`1,Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Invokes the target method and returns object of [TResult] type.
            </summary>
            <param name="po">The object of type of [T].</param>
            <param name="channel">The channel through which message was received.</param>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.FuncInvoker`2.InputTypes">
            <summary>
            Gets the list of the types accepted by Invoker as parameters for calling the target method.
            </summary>
            <value>
            Returns type of [T].
            </value>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.FuncInvoker`2.KnownTypes">
            <summary>
            Gets a list of known types that must be registered with <see cref="T:Noemax.WebSockets.Messaging.IMessageSerializer"/>.
            </summary>
            <value>
            Returns the list containing the type of [T] and the type of [TResult].
            </value>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.FuncInvokerFactory">
            <summary>
            The factory producing <see cref="T:Noemax.WebSockets.Messaging.FuncInvoker`2"/> instances.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.FuncInvokerFactory.CanCreateInvoker(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the factory can create an Invoker for specified method.
            </summary>
            <param name="methodInfo">The to check for compatibility with Invoker factory.</param>
            <returns>True if factory can create invoker for the method; otherwise False.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.FuncInvokerFactory.CreateInvoker(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates <see cref="T:Noemax.WebSockets.Messaging.Invoker"/> for the specified method.
            </summary>
            <param name="info">The description of the method.</param>
            <param name="instance">The instance of the class providing the method.</param>
            <returns>The Invoker that dispatches the messages to the specified method.</returns>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.FuncOperation1Invoker`2">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.FuncOperation1Invoker`2.#ctor(Noemax.WebSockets.Messaging.FuncOperation1{`0,`1})">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.FuncOperation1Invoker`2.OnInvoke(`1,Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.FuncOperation`2">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.FuncOperation1`2">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.FuncOperationInvoker`2">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.FuncOperationInvoker`2.#ctor(Noemax.WebSockets.Messaging.FuncOperation{`0,`1})">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.FuncOperationInvoker`2.OnInvoke(`1,Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.JsonClientProxyProvider">
            <summary>
                Provides <see cref="T:Noemax.WebSockets.Messaging.WebSocketMessagingService"/> with a JavaScript client proxy file based on defined messanging
                operations.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.JsonClientProxyProvider.#ctor(Noemax.WebSockets.Messaging.WebSocketMessagingService)">
            <summary>
                Create a new instance of <see cref="T:Noemax.WebSockets.Messaging.JsonClientProxyProvider"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.JsonClientProxyProvider.Publish">
            <summary>
                Publishes the Non-WebSocket HTTP handler that provides the JavaScript client proxy on the associated service
                endpoint.
            </summary>
            <remarks>
                Once handler is published in will start providing the JavaScript file with name specified by the
                <see cref="P:Noemax.WebSockets.Messaging.JsonClientProxyProvider.ClientProxyFileName"/> property
                on the associated service endpoints. This file can be reference from the HTTP page e.g. &lt;script
                src="http://hostname:9998/echo/PowerWSM.js"&gt;.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.JsonClientProxyProvider.Unpublish">
            <summary>
                Unpublished the Non-WebSocket HTTP handler.
            </summary>
            <remark>
                This methods reverts the effect of <see cref="M:Noemax.WebSockets.Messaging.JsonClientProxyProvider.Publish"/> method and removes the JavaScript client proxy request
                handler
                from the service endpoints.
            </remark>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.JsonClientProxyProvider.ClientProxyFileName">
            <summary>
                Gets and sets the name of the client proxy file to be generated by the <see cref="T:Noemax.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <remarks>
                Browser clients can request the JavaScript proxy file that simplify access to the messaging service
                by referencing the file from the HTML page e.g. &lt;script src="http://hostname:9998/echo/PowerWSM.js"&gt;.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.JsonClientProxyProvider.JavaScript">
            <summary>
                Gets and sets JavaScript generated by the <see cref="T:Noemax.WebSockets.Messaging.JsonClientProxyProvider"/>.
            </summary>
            <remarks>
                You can provide your own JavaScript client proxy code by assigned this property.
                If this property is not assigned then proxy is generated automatically when
                <see cref="M:Noemax.WebSockets.Messaging.JsonClientProxyProvider.CreateHandler(Noemax.WebSockets.Messaging.WebSocketMessagingService)"/>
                is called.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.JsonMessageSerializer">
            <summary>
                Provides serialization of data into WebSocket text messages using JSON format.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.MessageSerializerBase">
            <summary>
            Provides the base class for serializing objects into WebSocket messages.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageSerializerBase.EnsureKnownTypes(System.Type[])">
            <summary>
            When override ensures that specified collection of types are supported by the serializer.
            </summary>
            <param name="type">The collection of types to be supported by the serializer.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageSerializerBase.Serialize(System.Object)">
            <summary>
            Serializes the object into WebSocketOutboundMessage.
            </summary>
            <param name="obj">The object being serialized.</param>
            <returns>The outbound message containing the serialized object.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageSerializerBase.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the object into stream and returns the stream to write attachment to the message.
            </summary>
            <param name="output">The stream to write the outbound message.</param>
            <param name="obj">The object to serialize into the stream.</param>
            <returns>The stream to which attachment data being written.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageSerializerBase.Deserialize(Noemax.WebSockets.WebSocketInboundMessage,Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageDispatcher)">
            <summary>
            Deserializes the content of inbound message.
            </summary>
            <param name="message">The message to deserialize.</param>
            <param name="channel">The channel through which the message was received.</param>
            <param name="dispatcher">The dispatcher being used for dispatching the message.</param>
            <returns>The object deserialized from the content of the message.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageSerializerBase.Deserialize(System.String,Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageDispatcher)">
            <summary>
            Deserializes the content of inbound message.
            </summary>
            <param name="textContent">The text content to deserialize.</param>
            <param name="channel">The channel through which the message was received.</param>
            <param name="dispatcher">The dispatcher being used for dispatching the message.</param>
            <returns>The object deserialized from the content of the message.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageSerializerBase.Deserialize(System.ArraySegment{System.Byte},Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageDispatcher)">
            <summary>
            Deserializes the content of inbound message.
            </summary>
            <param name="binaryContent">The binary content to deserialize.</param>
            <param name="channel">The channel through which the message was received.</param>
            <param name="dispatcher">The dispatcher being used for dispatching the message.</param>
            <returns>The object deserialized from the content of the message.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.JsonMessageSerializer.#ctor">
            <summary>
                Initialize a new instance of <see cref="T:Noemax.WebSockets.Messaging.JsonMessageSerializer"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.JsonMessageSerializer.Deserialize(System.String,Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageDispatcher)">
            <summary>
                Deserializes the data contained in the specified text message content.
            </summary>
            <param name="text">The text content to deserialize the data from.</param>
            <param name="channel">The channel through which the message was received.</param>
            <param name="dispatcher">The dispatcher being used to dispatch the message.</param>
            <returns>The object deserialized from the message content.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.JsonMessageSerializer.Deserialize(System.ArraySegment{System.Byte},Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageDispatcher)">
            <summary>
                Deserializes the data contained in the specified binary message content.
            </summary>
            <param name="binary">The binary content to deserialize the date from.</param>
            <param name="channel">The channel through which the message was received.</param>
            <param name="dispatcher">The dispatcher being used to dispatch the message.</param>
            <returns>The object deserialized from the message content.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.JsonMessageSerializer.EnsureKnownTypes(System.Type[])">
            <summary>
                Registers a type with the serializer.
            </summary>
            <param name="types">The types to register with the serializer.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.JsonMessageSerializer.Serialize(System.Object)">
            <summary>
                Serializes an object into the WebSocket message.
            </summary>
            <param name="obj">The object to serialize into the message.</param>
            <returns>The instance of WebSocketOutboundMessage containing a serialized object.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.JsonMessageSerializer.GenerateClientProxy(Noemax.WebSockets.Messaging.MessageDispatcher)">
            <summary>
                Generates a JavaScript client proxy for sending messages to the specified dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher for which proxy is too be generated.</param>
            <returns>The string containing the proxy code.</returns>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.JsonMessageSerializer.IncludeTypeName">
            <summary>
                Gets and sets whether the serializer should include .NET type name when serializing objects. Set this property to
                <b>True</b> to support the object polymorphism.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ResponseMessage">
            <summary>
            Represent the message sent as response to the request from the remote endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ResponseMessage.Result">
            <summary>
            Serialize property containing the response value for remote operation.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ResponseMessage.IsResponse">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ResponseMessage.IsFault">
            <summary>
            Always returns false;
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ResponseMessage.Body">
            <summary>Gets the body of the message.</summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.MessageOperationAttribute">
            <summary>
            Indicates that a method defines an operation that is part of a service contract.
            </summary>
            <remarks>
            <para>
            MessageOperationAttribute is used to specify a method to which inbound messages is dispatched. Criteria
            for dispatching the message can depend on the type of the service providing the method. 
            </para>       
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageOperationAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WebSockets.Messaging.MessageOperationAttribute"/> from the specified action string.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageOperationAttribute.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WebSockets.Messaging.MessageOperationAttribute"/>.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.MessageOperationAttribute.Action">
            <summary>
            Gets and sets the action string that identifies the operation.
            </summary>
            <remarks>
            Action strings are used by a dispatcher to dispatch messages to appropriate method.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.MessageOperationDescription">
            <summary>
            Defines the properties of message dispatching operation. 
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MessageOperationDescription.#ctor(Noemax.WebSockets.Messaging.ICriteria,Noemax.WebSockets.Messaging.Invoker)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WebSockets.Messaging.MessageOperationDescription"/>.
            </summary>
            <param name="criteria">The criteria for dispatching messages to the Invoker.</param>
            <param name="invoker">Invoker that calls the method to which a message is dispatched.</param>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.MessageOperationDescription.Invoker">
            <summary>
            Gets Invoker that calls the method to which a message is dispatched.
            </summary>
            <remarks>
            Performs invocation of the method when an inbound message is dispatched to this operation and conforms to its <see cref="P:Noemax.WebSockets.Messaging.MessageOperationDescription.Action"/> and <see cref="P:Noemax.WebSockets.Messaging.MessageOperationDescription.Criteria"/>.
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.Messaging.MessageOperationDescription.Criteria">
            <summary>
            Gets Criteria for dispatching a message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.MessageOperationDescription.Action">
            <summary>
            Gets and sets the action string for matching a message.
            </summary>
            <remarks>
            Action is compared with an Action specified by the inbound message, if equal than the <see cref="P:Noemax.WebSockets.Messaging.MessageOperationDescription.Criteria"/> is used to validate whether the 
            inbound message matches operation criteria. If Criteria.Match returns true, than message is getting dispatched to the <see cref="P:Noemax.WebSockets.Messaging.MessageOperationDescription.Invoker"/> 
            specified by this operation.
            </remarks> 
        </member>
        <member name="T:Noemax.WebSockets.Messaging.WebSocketMessagingService">
            <summary>
            The base class for the service that performs dispatching of the inbound messages based of the type of the object deserialized from the the message content and the
            action string provided by inbound message.
            </summary>
            <remarks>
            The content of an inbound message is deserialized using the <see cref="P:Noemax.WebSockets.Messaging.WebSocketMessagingService.Serializer">DefaultSerializer</see>, then the deserialized object is
            dispatched to the method based on its Type and/or Action. The method that receives the object must be marked with <see cref="T:Noemax.WebSockets.Messaging.MessageOperationAttribute"/> and must
            be exposed by either the class inherited from the MessagingService or the instance of the class provided as parameter to the <see cref="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.#ctor(System.Object)">
            MessageService constructor</see>. The last parameters of the method indicates the type of objects it receives, while first optional parameters can be 
            <see cref="T:Noemax.WebSockets.WebSocketChannel"/> type. If method takes <b>WebSocketChannel</b> as a first parameter  then it will be 
            assigned to the channel that received the message.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.WebSockets.Messaging.WebSocketMessagingService"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.WebSockets.Messaging.WebSocketMessagingService"/> from specified object providing the methods to which the messages will be dispatch.
            </summary>
            <param name="instance">The instance of the class that providing methods that receive inbound messages.</param>
            <remarks>
            The specified object should define methods marked by <see cref="T:Noemax.WebSockets.Messaging.MessageOperationAttribute"/> attribute or implement interfaces that
            define such methods.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.OnMessage(Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.WebSocketInboundMessage)">
            <summary>
            Overrides WebSocketService.OnMessage to perform dispatching of inbound messages based on the type of the object deserialized from the message content and action.
            </summary>
            <param name="channel">The channel through which the message is being received.</param>
            <param name="message">The inbound message.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.OnCreateDispatcher(System.Object)">
            <summary>
            Initializes a new instance of <see cref="P:Noemax.WebSockets.Messaging.WebSocketMessagingService.MessageDispatcher"/> to be used by the <see cref="T:Noemax.WebSockets.Messaging.WebSocketMessagingService"/>.
            </summary>
            <param name="instance">The instance of the class that is going to dispatch message operation.</param>
            <returns>The instance of <see cref="P:Noemax.WebSockets.Messaging.WebSocketMessagingService.MessageDispatcher"/>.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.OnOpen(Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Overrides WebSocketService.OnOpen, initializes the DefaultSerializer and associates it with accepted WebSocketChannel.
            </summary>
            <param name="channel">The channel accepted by the service.</param>
            <remarks>
            <para>
            Once <see cref="P:Noemax.WebSockets.Messaging.WebSocketMessagingService.Serializer"/> is associated to the channels, all object being sent through the channel are serialized using specified DefaultSerializer and the 
            content of all message received from the channel is deserialized using specified DefaultSerializer.
            </para>
            <para>
            DefaultSerializer can be retrieved from the channel context by using <see cref="M:Noemax.WebSockets.WebSocketChannel.GetProperty``1"/> method.
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.Broadcast``1(System.String,System.Collections.Generic.IEnumerable{Noemax.WebSockets.WebSocketChannel},``0)">
            <summary>
            Broadcasts the message containing the object of specified type to all channels associated to the service.
            </summary>
            <typeparam name="T">The type of the object to broadcast.</typeparam>
            <param name="obj">The object to broadcast.</param>
            <param name="action">The action string associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.Broadcast(System.String,System.Collections.Generic.IEnumerable{Noemax.WebSockets.WebSocketChannel},System.Object[])">
            <summary>
            Broadcasts the RPC message with specified action string and parameters to all channels associated to the service.
            </summary>
            <param name="parameters">The parameters for RPC call to broadcast.</param>
            <param name="action">The action string associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.Broadcast``1(``0,System.Collections.Generic.IEnumerable{Noemax.WebSockets.WebSocketChannel})">
            <summary>
            Broadcasts the message containing the object of specified type to all channels associated to the service.
            </summary>
            <typeparam name="T">The type of the object to broadcast.</typeparam>
            <param name="obj">The object to broadcast.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.Broadcast``1(System.String,``0)">
            <summary>
            Broadcasts the message containing the object of specified type to all channels associated to the service.
            </summary>
            <typeparam name="T">The type of the object to broadcast.</typeparam>
            <param name="obj">The object to broadcast.</param>
            <param name="action">The action string associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.Broadcast(System.String,System.Object[])">
            <summary>
            Broadcasts the RPC message with specified action string and parameters to all channels associated to the service.
            </summary>
            <param name="parameters">The parameters for RPC call to broadcast.</param>
            <param name="action">The action string associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.Broadcast``1(``0)">
            <summary>
            Broadcasts the message containing the object of specified type to all channels associated to the service.
            </summary>
            <typeparam name="T">The type of the object to broadcast.</typeparam>
            <param name="obj">The object to broadcast.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketMessagingService.GetProperty``1">
            <summary>
            Returns the object of type T associated to the channel.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <returns>The object of type T associated to the channel.</returns>
            <remarks>
            This method is used internally to request <see cref="P:Noemax.WebSockets.Messaging.WebSocketMessagingService.MessageDispatcher"/> or <see cref="T:Noemax.WebSockets.Messaging.IMessageSerializer"/> from the 
            instance of the service.
            </remarks>			
        </member>
        <member name="P:Noemax.WebSockets.Messaging.WebSocketMessagingService.MessageDispatcher">
            <summary>
            Gets dispatcher used by the service to dispatch inbound message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.WebSocketMessagingService.Serializer">
            <summary>
            Gets and sets the <see cref="T:Noemax.WebSockets.Messaging.IMessageSerializer"/> used by the service to deserialize the object from the content of inbound messages. The same 
            serializer is used by all associated channels for serializing objects into content of outbound messages.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.MessagingContractAttribute">
            <summary>
            Indicates that an interface or a class defines a service contract.
            </summary>
            <remarks>
            The class marked to the <see cref="T:Noemax.WebSockets.Messaging.MessagingContractAttribute"/> must include one or more methods marked with <see cref="T:Noemax.WebSockets.Messaging.MessageOperationAttribute"/>.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.MultiFormatMessagingService">
            <summary>
                The base class for the service that dispatches inbound messages based on the type of the objects deserialized
                from the message content. This service is capable to use different format per each associated channel.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MultiFormatMessagingService.#ctor">
            <summary>
                Initializes a new instance of <see cref="T:Noemax.WebSockets.Messaging.MultiFormatMessagingService"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MultiFormatMessagingService.#ctor(System.Object)">
            <summary>
                Initializes a new instance of <see cref="T:Noemax.WebSockets.Messaging.MultiFormatMessagingService"/>.
            </summary>
            <param name="instance">The instance of the class providing methods that receive inbound messages.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MultiFormatMessagingService.AddMessageSerializer(System.String,Noemax.WebSockets.Messaging.IMessageSerializer)">
            <summary>
                Associates the <see cref="T:Noemax.WebSockets.Messaging.IMessageSerializer"/> to the specified Sec-WebSocket-Protocol handshake header value and
                adds it to the list of supported serializers.
            </summary>
            <param name="protocolName">
                The value of the Sec-WebSocket-Protocol  handshake header that would indicate that the
                specified serializer will be used.
            </param>
            <param name="serializer">
                The specializer to be used when the specified Protocol handshake header is encountered during
                the handshake.
            </param>
            <remarks>
                Provided IMessageSerializer instance would be used for channels that provided the specified protocolName value in
                Sec-WebSocket-Protocol header in
                the handshake.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MultiFormatMessagingService.Broadcast``1(System.String,``0)">
            <summary>
                Broadcast specified object to the all associated channels.
            </summary>
            <typeparam name="T">The type of the object to broadcast.</typeparam>
            <param name="obj">The object to broadcast.</param>
            <param name="action">The action associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MultiFormatMessagingService.Broadcast(System.String,System.Object[])">
            <summary>
                Broadcasts the object of specified type to all channels associated to the service.
            </summary>
            <param name="parameters">The paramaters for RPC call to broadcast.</param>
            <param name="action">The action string associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MultiFormatMessagingService.OnOpen(Noemax.WebSockets.WebSocketChannel)">
            <summary>
                Overrides <see cref="M:Noemax.WebSockets.WebSocketService.OnOpen(Noemax.WebSockets.WebSocketChannel)"/>. Determins the serializer required by the specified channel and
                the channel to the list of assocaited channels.
            </summary>
            <param name="channel">The channel being associated to the service.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.MultiFormatMessagingService.OnHandshake(System.Object,Noemax.WebSockets.WebSocketHandshake)">
            <summary>
                Provides handshake handling during which the service validate whether the protocol request by connection is one fo
                the protocols supported by the service.
            </summary>
            <param name="sender">The sender associated to the event.</param>
            <param name="handshake">
                The <see cref="T:Noemax.WebSockets.WebSocketHandshake"/> providing methods and properties for handling the
                WebSocket handshake.
            </param>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.PlainMessage">
            <summary>
            Represents a simple message without any message envelope that contains a message body and can have a streamed attachment.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.PlainMessage.#ctor(System.Object)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WebSockets.Messaging.PlainMessage"/>.
            </summary>
            <param name="body">The object to be set as body of the message.</param>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.PlainMessage.Body">
            <summary>
            The object serialized into body of the message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.PlainMessage.Msg">
            <summary>
            Serialize property to store the body of the message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.PlainMessage.IsResponse">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.PlainMessage.IsFault">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.ReflectionInvoker">
            <summary>
            Provides invoker for calling the message operation that multiple parameters.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ReflectionInvoker.#ctor(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.WebSockets.Messaging.ReflectionInvoker"/>.
            </summary>
            <param name="info">The description of the target method.</param>
            <param name="instance">The instance of the object providing the target method.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.ReflectionInvoker.OnInvoke(Noemax.WebSockets.Messaging.ConversationMessage,Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Invokes the target method.
            </summary>
            <param name="requestMessage">The message containing the parameters to invoke the target message.</param>
            <param name="channel">The channel through which the mesasge was received.</param>        
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ReflectionInvoker.InputTypes">
            <summary>
            Gets types of parameters accepted by the target method.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.ReflectionInvoker.KnownTypes">
            <summary>
            Returns the total list of the types that DefaultSerializer should be able to serialize/deserialize in order to 
            handle the message to the operation.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.IClientDispatcher">
            <summary>
                Defines the interface that provides methods and properties for dispatching messages on the client side.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.Request``1(System.String,System.Object[],System.TimeSpan)">
            <summary>
                Sends the request to the remote endpoint through the specified channel and returns the response provided for the
                request.
            </summary>
            <param name="action">The string identifying the operation to which the message is getting sent.</param>
            <param name="parameters">The parameters to be sent with a request.</param>
            <param name="timeout">The period of time during which request must complete or timeout.</param>
            <returns>The response provided by remote endpoint or the null if remote operation does not return any data.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.Request``1(System.String,System.Object[],System.IO.Stream,System.TimeSpan)">
            <summary>
                Sends the request to the remote endpoint through the specified channel and returns the response provided for the
                request.
            </summary>
            <param name="action">The string identifying the operation to which the message is getting sent.</param>
            <param name="parameters">The parameters to be sent with a request.</param>
            <param name="timeout">The period of time during which request must complete or timeout.</param>
            <param name="attachment">The stream to be sent as an attachment to outbound message.</param>
            <returns>The response provided by remote endpoint or the null if remote operation does not return any data.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.Request(System.String,System.Object[],System.IO.Stream,System.TimeSpan)">
            <summary>
                Sends the request to the remote endpoint through the specified channel and returns the response provided for the
                request.
            </summary>
            <param name="action">The string identifying the operation to which the message is getting sent.</param>
            <param name="parameters">The parameters to be sent with a request.</param>
            <param name="attachment">The stream to be sent as an attachment to a message.</param>
            <param name="timeout">The period of time during which request must complete or timeout.</param>
            <returns>The response provided by remote endpoint or the null if remote operation does not return any data.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.BeginRequest(System.String,System.Object[],System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins an asynchronous request to the remote endpoint through the specified channel and returns the response
                provided for the request.
            </summary>
            <param name="action">The string identifying the operation to which the message is getting sent.</param>
            <param name="parameters">The parameters to be sent with a request.</param>
            <param name="timeout">The period of time during which request must complete or timeout.</param>
            <param name="callback">
                The AsyncCallback delegate that receives the notification of the completion of the asynchronous
                operation transmitting a request message.
            </param>
            <param name="state">The state associated to asynchronous operation.</param>
            <returns>The IAsyncResult that references the asynchronous request operation.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.EndRequest(System.IAsyncResult)">
            <summary>
                Completes an asynchronous request to the remote endpoint and returns the response provided for request.
            </summary>
            <param name="result">The IAsyncResult that references the asynchronous request operation.</param>
            <returns>The response provided for request.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.EndRequest``1(System.IAsyncResult)">
            <summary>
                Completes an asynchronous request to the remote endpoint and returns the response provided for request.
            </summary>
            <param name="result">The IAsyncResult that references the asynchronous request operation.</param>
            <returns>The response provided for request.</returns>
            <typeparam name="TResult">The type of the object to return as response. </typeparam>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.Send(System.String,System.Object[],System.TimeSpan)">
            <summary>
                Sends an one-way message to the remote endpoint.
            </summary>
            <param name="action">The string identifying the operation to which the message is getting sent.</param>
            <param name="parameters">The parameters to be sent with a request.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.Send(System.String,System.Object[],System.IO.Stream,System.TimeSpan)">
            <summary>
                Sends an one-way message to the remote endpoint.
            </summary>
            <param name="action">The string identifying the operation to which the message is getting sent.</param>
            <param name="parameters">The parameters to be sent with a request.</param>
            <param name="attachment">The attachment stream to send along with message.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.SendAsync(System.String,System.Object[],System.TimeSpan)">
            <summary>
                Sends a one-way message to the remote endpoint asynchronously.
            </summary>
            <param name="action">The string identifying the operation to which the message is getting sent.</param>
            <param name="parameters">The parameters to be sent with a request.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.BeginSend(System.String,System.Object[],System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins an asynchronous operation to send a message to the remote endpoint.
            </summary>
            <param name="action">The string identifying the operation to which the message is getting sent.</param>
            <param name="parameters">The parameters to be sent with a request.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
            <param name="callback">
                The AsyncCallback delegate that receives the notification of the completion of the asynchronous
                operation transmitting a request message.
            </param>
            <param name="state">The state associated to the asynchronous operation.</param>
            <returns>The IAsyncResult that references the asynchronous request operation.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.EndSend(System.IAsyncResult)">
            <summary>
                Completes an asynchronous send operation.
            </summary>
            <param name="result">The IAsyncResult that references the asynchronous request operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.CreateStreamedMessage(System.String,System.Object[],System.TimeSpan)">
            <summary>
                Initiates an outbound message with streamed attachment.
            </summary>
            <param name="action">The string identifying the operation to which the message is getting sent.</param>
            <param name="parameters">The parameters to be sent with a request.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
            <returns>The stream to write attachment to the message.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.Request``2(``0,System.TimeSpan)">
            <summary>
                Sends the request to the remote endpoint through the specified channel and returns the response provided for the
                request.
            </summary>
            <param name="request">The message to send to the remote endpoint.</param>
            <param name="timeout">The period of time during which request must complete or timeout.</param>
            <returns>The response provided by remote endpoint or the null if remote operation does not return any data.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.BeginRequest``1(``0,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins an asynchronous request to the remote endpoint through the specified channel and returns the response
                provided for the request.
            </summary>
            <param name="request">The message to send to the remote endpoint.</param>
            <param name="timeout">The period of time during which request must complete or timeout.</param>
            <param name="callback">
                The AsyncCallback delegate that receives the notification of the completion of the asynchronous
                operation transmitting a request message.
            </param>
            <param name="state">The state associated to asynchronous operation.</param>
            <returns>The IAsyncResult that references the asynchronous request operation.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.Send``1(``0,System.TimeSpan)">
            <summary>
                Sends an one-way message to the remote endpoint.
            </summary>
            <param name="message">The message to be send.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.Send``1(``0,System.IO.Stream,System.TimeSpan)">
            <summary>
                Sends an one-way message to the remote endpoint.
            </summary>
            <param name="message">The message to be send.</param>
            <param name="attachment">The attachment stream to send along with message.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.SendAsync``1(``0,System.TimeSpan)">
            <summary>
                Sends a one-way message to the remote endpoint asynchronously.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.BeginSend``1(``0,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
                Begins an asynchronous operation to send a message to the remote endpoint.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
            <param name="callback">
                The AsyncCallback delegate that receives the notification of the completion of the asynchronous
                operation transmitting a request message.
            </param>
            <param name="state">The state associated to the asynchronous operation.</param>
            <returns>The IAsyncResult that references the asynchronous request operation.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.CreateStreamedMessage``1(``0,System.TimeSpan)">
            <summary>
                Initiates a streamed message to remote endpoint.
            </summary>
            <typeparam name="TMessage">The type of the object to be serialized into the message to sent.</typeparam>
            <param name="message">The object to be serialized into the message.</param>
            <param name="timeout">The period of time for operation to complete or timeout.</param>
            <returns>The stream to write attachment to the message.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.Request``2(``0,System.IO.Stream,System.TimeSpan)">
            <summary>
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="request"></param>
            <param name="attachment"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.IClientDispatcher.Request``1(``0,System.IO.Stream,System.TimeSpan)">
            <summary>
            </summary>
            <typeparam name="TRequest"></typeparam>
            <param name="request"></param>
            <param name="attachment"></param>
            <param name="timeout"></param>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.DefaultClientDispatcher">
            <summary>
                Provides methods and properties for sending request messages and dispatching response messages on the
                <see cref="T:Noemax.WebSockets.WebSocketChannel"/> connection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.DefaultClientDispatcher.#ctor(Noemax.WebSockets.WebSocketChannel)">
            <summary>
                Initializes a new instance of <see cref="T:Noemax.WebSockets.Messaging.DefaultClientDispatcher"/>.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.DefaultClientDispatcher.Dispatch(Noemax.WebSockets.Messaging.ConversationMessage,Noemax.WebSockets.WebSocketChannel)">
            <summary>
                Dispatchers inbound messages to the local message operation.
            </summary>
            <param name="inboundMessage">The message received from remote endpoint.</param>
            <param name="channel">The channel through which message is received.</param>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.RequestMessage">
            <summary>
            The envelope data contract for serializing the request messages.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.RequestMessage.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Noemax.WebSockets.Messaging.RequestMessage"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.RequestMessage.#ctor(System.Object[],System.String)">
            <summary>
            Initialize a new instance of the  <see cref="T:Noemax.WebSockets.Messaging.RequestMessage"/> from specified object and action associated to the remote operation.
            </summary>
            <param name="body">The parameters to sent in the body of the message.</param>
            <param name="action">The action to associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.RequestMessage.GetBody``1">
            <summary>
            Returns the body of the message as the value of the specified type.
            </summary>
            <typeparam name="T">The type as which the body of the message should be represented.</typeparam>
            <returns>The message body as the value of the the specified type.</returns>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.RequestMessage.Method">
            <summary>
            The action to identify the target operation.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.RequestMessage.Parameters">
            <summary>
            Parameters to be sent to remote operation as part of the request message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.RequestMessage.IsResponse">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.RequestMessage.IsFault">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.RpcFaultException">
            <summary>
            The exception providing a <see cref="P:Noemax.WebSockets.Messaging.RpcFaultException.FaultInfo"/>.
            </summary>    
        </member>
        <member name="M:Noemax.WebSockets.Messaging.RpcFaultException.#ctor(System.Int32,System.Object,System.String)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.RpcFaultException.#ctor(Noemax.WebSockets.Messaging.FaultInfo)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WebSockets.Messaging.RpcFaultException"/> from the specified fault description.
            </summary>
            <param name="info">The fault description.</param>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.RpcFaultException.FaultInfo">
            <summary>
            Gets the information on the fault returned by remote side.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.VoidInputInvoker`1">
            <summary>
            Provides invoker for calling functions that does not take parameters.
            </summary>
            <typeparam name="TResult">The type of the data returned by the function.</typeparam>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.VoidInputInvoker`1.OnInvoke(Noemax.WebSockets.Messaging.ConversationMessage,Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.VoidInputInvoker`1.OnInvoke(Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.Messaging.VoidInputInvoker`1.InputTypes">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.VoidInputInvokerFactory">
            <summary>
            Provides <see cref="T:Noemax.WebSockets.Messaging.VoidInputInvoker`1"/> invokers./&gt;
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.VoidInputInvokerFactory.CanCreateInvoker(System.Reflection.MethodInfo)">
            <summary>
            Returns true if target method is suitable for <see cref="T:Noemax.WebSockets.Messaging.VoidInputInvoker`1"/>.
            </summary>
            <param name="methodInfo">The method to evaluated for suitability.</param>
            <returns><b>True</b> if target method is suitable for <see cref="T:Noemax.WebSockets.Messaging.VoidInputInvoker`1"/>; <b>False</b> otherwise.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.VoidInputInvokerFactory.CreateInvoker(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates an <see cref="T:Noemax.WebSockets.Messaging.VoidInputInvoker`1"/> for the specified method.
            </summary>
            <param name="info">The method for which invoker is to be created.</param>
            <param name="instance">The instance of the class providing the method.</param>
            <returns>The instance of invoker associated to the specified method.</returns>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.VoidInputOperation`1">
            <summary>
            Defines the signature of the message operation that does not take any input but returns data.
            </summary>
            <typeparam name="TResult">The type of the data returns by message operation.</typeparam>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.VoidInputOperationInvoker`1">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.VoidInputOperationInvoker`1.#ctor(Noemax.WebSockets.Messaging.VoidInputOperation{`0})">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.VoidInputOperationInvoker`1.OnInvoke(Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.VoidInputOperation1`1">
            <summary>
            Defines the signature of the message operation that does not take any input but returns data.
            </summary>
            <typeparam name="TResult">The type of the data returns by message operation.</typeparam>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.VoidInputOperationInvoker1`1">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.VoidInputOperationInvoker1`1.#ctor(Noemax.WebSockets.Messaging.VoidInputOperation1{`0})">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.VoidInputOperationInvoker1`1.OnInvoke(Noemax.WebSockets.WebSocketChannel)">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.WebSocketChannelExtensions">
            <summary>
            Provides extension methods for WebSocketChannel class.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.CreateStreamedMessage(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.Object[])">
            <summary>
            Initiates outbound one-way message to remote operation by sending parameters and a stream of arbitrary length as the continuation of the message.
            </summary>
            <param name="channel">The channel through which to send the message.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="timeout">The period of time during which the object should be sent or the operation would timeout.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <returns>The stream to continue writing the streamed part of the message.</returns>
            <remarks>
            <para>
            The stream sent using this method is received by the remote operation a the last parameter or the single parameter in the method signature. 
            </para>
            <para>
            The stream returned by this method writes the continuation of the message performing automating fragmentation of the data you write into
            the stream. Closing the stream, results in sending the final frame of the message. 
            </para>    
            <para>
            You can send a stream of arbitrary length without any maximum length limitation. However, while message is being streamed no other messages 
            can be sent through the same WebSocket channel.
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.CreateStreamedMessage(Noemax.WebSockets.WebSocketChannel,System.String,System.Object[])">
            <summary>
            Initiates outbound one-way messages with parameters and binary stream of arbitrary length as continuation of the message.
            </summary>
            <param name="action">The action associate with the remote operation to invoke.</param>
            <param name="channel">The channel through which to send the message.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <returns>The input to continue writing the streamed part of the message.</returns>
            <remarks>
            <para>
            The stream sent using this method is received by the remote operation a the last parameter or the single parameter in the method signature. 
            </para>
            <para>
            The stream returned by this method writes the continuation of the message performing automating fragmentation of the data you write into
            the stream. Closing the stream, results in sending the final frame of the message. 
            </para>    
            <para>
            You can send a stream of arbitrary length without any maximum length limitation. However, while message is being streamed no other messages 
            can be sent through the same WebSocket channel.
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendWithStream(Noemax.WebSockets.WebSocketChannel,System.String,System.IO.Stream,System.Object[])">
            <summary>
            Sends outbound message with parameters and binary stream of arbitrary length as continuation of the message.
            </summary>
            <param name="channel">The channel through which to send the message.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <returns>The input to continue writing the streamed part of the message.</returns>
            <param name="attachment">The stream to send as continuation of the message.</param>        
            <remarks>
            <para>
            This method sends the parameters followed by a stream of arbitrary length to remote message operation. The remote message operation
            is expected to take a stream as the last parameter in the method signature. As soon as initial part of the message containing parameters
            is received by the remote endpoint, the operation is getting invoked and the streamed part of the message that follows parameters is provided
            as the final parameter. 
            </para>
            <para>
            You can send/received stream of arbitrary length without any maximum length limitation. However, while message is being streamed no other messages 
            can be sent through the same WebSocket channel.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendWithStream(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.IO.Stream,System.Object[])">
            <summary>
            Sends outbound message with parameters and binary stream of arbitrary length as continuation of the message.
            </summary>
            <param name="channel">The channel through which to send the message.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <returns>The input to continue writing the streamed part of the message.</returns>
            <param name="attachment">The attachment stream.</param>        
            <param name="timeout">The timeout for the send operation.</param>
            <remarks>
            <para>
            This method sends the parameters followed by a stream of arbitrary length to remote message operation. The remote message operation
            is expected to take a stream as the last parameter in the method signature. As soon as initial part of the message containing parameters
            is received by the remote endpoint, the operation is getting invoked and the streamed part of the message that follows parameter is provided
            as the final parameter. The streamed part of the message is not getting buffered sent and received directly from the WebSocket connection.
            </para>
            <para>
            You can send/received stream of arbitrary length without any maximum length limitation. However, while message is being streamed no other messages 
            can be sent through the same WebSocket channel.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendOneWay(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.Object[])">
            <summary>
            Sends the message with the specified parameters to the remote operation.
            </summary>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="timeout">The period of time during which the object should be sent or the operation would timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendMessage(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.Object[])">
            <summary>
            Sends the message with the specified parameters to the remote operation.
            </summary>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="timeout">The period of time during which the object should be sent or the operation would timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendOneWay(Noemax.WebSockets.WebSocketChannel,System.String,System.Object[])">
            <summary>
            Sends the message with the specified parameters to the remote operation.
            </summary>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="action">The action associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendMessage(Noemax.WebSockets.WebSocketChannel,System.String,System.Object[])">
            <summary>
            Sends the message with the specified parameters to the remote operation.
            </summary>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="action">The action associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendOneWay``1(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,``0)">
            <summary>
            Sends the message with the specified parameters to the remote operation.
            </summary>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="timeout">The period of time during which the object should be sent or the operation would timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendMessage``1(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,``0)">
            <summary>
            Sends the message with the specified parameters to the remote operation.
            </summary>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="timeout">The period of time during which the object should be sent or the operation would timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendOneWay``1(Noemax.WebSockets.WebSocketChannel,System.String,``0)">
            <summary>
            Sends the message with the specified parameters to the remote operation.
            </summary>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="action">The action associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendMessage``1(Noemax.WebSockets.WebSocketChannel,System.String,``0)">
            <summary>
            Sends the message with the specified parameters to the remote operation.
            </summary>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="action">The action associated to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendOneWayAsync``1(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,``0)">
            <summary>
            Sends the message with the specified parameter to the remote operation asynchronously.
            </summary>
            <typeparam name="T">The type of the object to send.</typeparam>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameter">The object to send.</param> 
            <param name="timeout">The period of time during which the object should be sent or the operation would timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendMessageAsync``1(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,``0)">
            <summary>
            Sends the message with the specified parameter to the remote operation asynchronously.
            </summary>
            <typeparam name="T">The type of the object to send.</typeparam>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameter">The object to send.</param> 
            <param name="timeout">The period of time during which the object should be sent or the operation would timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendOneWayAsync(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.Object[])">
            <summary>
            Sends the message with the specified parameter to the remote operation asynchronously.
            </summary>        
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameters">The parameters to send.</param> 
            <param name="timeout">The period of time during which the object should be sent or the operation would timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendMessageAsync(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.Object[])">
            <summary>
            Sends the message with the specified parameter to the remote operation asynchronously.
            </summary>        
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameters">The parameters to send.</param> 
            <param name="timeout">The period of time during which the object should be sent or the operation would timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendOneWayAsync(Noemax.WebSockets.WebSocketChannel,System.String,System.Object[])">
            <summary>
            Sends the message with the specified parameter to the remote operation asynchronously.
            </summary>        
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameters">The object to send.</param>         
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendMessageAsync(Noemax.WebSockets.WebSocketChannel,System.String,System.Object[])">
            <summary>
            Sends the message with the specified parameter to the remote operation asynchronously.
            </summary>        
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameters">The object to send.</param>         
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendOneWayAsync``1(Noemax.WebSockets.WebSocketChannel,System.String,``0)">
            <summary>
            Sends the message with the specified parameter to the remote operation asynchronously.
            </summary>
            <typeparam name="T">The type of the object to send.</typeparam>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameter">The object to send.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.SendMessageAsync``1(Noemax.WebSockets.WebSocketChannel,System.String,``0)">
            <summary>
            Sends the message with the specified parameter to the remote operation asynchronously.
            </summary>
            <typeparam name="T">The type of the object to send.</typeparam>
            <param name="channel">The channel through which the object will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameter">The object to send.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.Request``1(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the result to receive from the remote operation.</typeparam>
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="timeout">The period of time during which operation should be complete or timeout.</param>
            <returns>The instance of TResult received as response.</returns>        
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.Request``1(Noemax.WebSockets.WebSocketChannel,System.String,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the result to receive from the remote operation.</typeparam>
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <returns>The instance of TResult received as response.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestWithStream``1(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.IO.Stream,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the result to receive from the remote operation.</typeparam>
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="attachment">The stream to send as attachment with request.</param>
            <param name="timeout">The period of time during which operation should be complete or timeout.</param>
            <returns>The instance of TResult received as response.</returns>
            <remarks>
            This methods sends request with specified parameters to remote operation along with the stream of arbitrary length.
            Remote operation is expected to accept the stream as final parameter.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestWithStream``1(Noemax.WebSockets.WebSocketChannel,System.String,System.IO.Stream,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the response message to receive from remote side.</typeparam>
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="attachment">The stream to send as attachment with request.</param>        
            <returns>The instance of TResult received as response.</returns>
            <remarks>
            This methods sends request with specified parameters to remote operation along with the stream of arbitrary length.
            Remote operation is expected to accept the stream as final parameter.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestWithStream(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.IO.Stream,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>        
            <param name="action">The action associated to the remote operation.</param>
            <param name="timeout">The period of time during which operation should be complete or timeout.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="attachment">The stream to send as attachment with request.</param>               
            <remarks>
            This methods sends request with specified parameters to remote operation along with the stream of arbitrary length.
            Remote operation is expected to accept the stream as final parameter.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestWithStream(Noemax.WebSockets.WebSocketChannel,System.String,System.IO.Stream,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>        
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="attachment">The stream to send as attachment with request.</param>                
            <remarks>
            This methods sends request with specified parameters to remote operation along with the stream of arbitrary length.
            Remote operation is expected to accept the stream as final parameter.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.Request(Noemax.WebSockets.WebSocketChannel,System.String,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>        
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>        
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.Request``1(Noemax.WebSockets.WebSocketChannel,System.String)">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the result message to receive from the remote operation.</typeparam>
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>        
            <returns>The instance of TResult received as response.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.Request``2(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,``1)">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the result to receive from the remote operation.</typeparam>
            <typeparam name="TRequest">The type of the request to send to the remote operation.</typeparam>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="request">The request object.</param> 
            <param name="timeout">The period of time during which operation should be complete or timeout.</param>
            <returns>The instance of TResult received as response.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.Request``2(Noemax.WebSockets.WebSocketChannel,System.String,``1)">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the result to receive from the remote operation.</typeparam>
            <typeparam name="TRequest">The type of the request to send to the remote operation.</typeparam>
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <returns>The instance of TResult received as response.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestAsync``1(Noemax.WebSockets.WebSocketChannel,System.String,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the result to receive from the remote operation.</typeparam>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <returns>The instance of TResult received as response.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestAsync``1(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the result to receive from the remote operation.</typeparam>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="timeout">The period of time during which operation should be complete or timeout.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <returns>The instance of TResult received as response.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestAsync``2(Noemax.WebSockets.WebSocketChannel,System.String,``1)">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the response to receive from remote side.</typeparam>
            <typeparam name="TRequest">The type of the request to send to remote side.</typeparam>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="request">The request object.</param> 
            <returns>The instance of TResult received as response.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestAsync``2(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,``1)">
            <summary>
            Sends the request and receives response from to the remote operation.
            </summary>
            <typeparam name="TResult">The type of the response to receive from remote side.</typeparam>
            <typeparam name="TRequest">The type of the request to send to remote side.</typeparam>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="action">The action associated to the remote operation.</param>
            <param name="timeout">The period of time during which operation should be complete or timeout.</param>
            <param name="request">The request object.</param> 
            <returns>The instance of TResult received as response.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestWithStreamAsync``1(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.IO.Stream,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation asynchronously.
            </summary>
            <typeparam name="TResult">The type of the result to receive from the remote operation.</typeparam>
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="attachment">The stream to send as attachment with request.</param>
            <param name="timeout">The period of time during which operation should be complete or timeout.</param>
            <returns>The instance of <see cref="T:System.Threading.Tasks.Task`1"/> that represents asynchronous operation.</returns>
            <remarks>
            This methods sends request with specified parameters to remote operation along with the stream of arbitrary length.
            Remote operation is expected to accept the stream as final parameter.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestWithStreamAsync(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.IO.Stream,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation asynchronously.
            </summary>
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="attachment">The stream to send as attachment with request.</param>
            <param name="timeout">The period of time during which operation should be complete or timeout.</param>
            <returns>The instance of <see cref="T:System.Threading.Tasks.Task"/> that represents asynchronous operation.</returns>
            <remarks>
            This methods sends request with specified parameters to remote operation along with the stream of arbitrary length.
            Remote operation is expected to accept the stream as final parameter.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestWithStreamAsync``1(Noemax.WebSockets.WebSocketChannel,System.String,System.IO.Stream,System.Object[])">
            <summary>
            Sends the request and receives response from to the remote operation asynchronously.
            </summary>
            <typeparam name="TResult">The type of the result to receive from the remote operation.</typeparam>
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
            <param name="attachment">The stream to send as attachment with request.</param>        
            <returns>The instance of <see cref="T:System.Threading.Tasks.Task`1"/> that represents asynchronous operation.</returns>
            <remarks>
            This methods sends request with specified parameters to remote operation along with the stream of arbitrary length.
            Remote operation is expected to accept the stream as final parameter.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestStream(Noemax.WebSockets.WebSocketChannel,System.String,System.Object[])">
            <summary>
            Sends the request message and receives a stream as response.
            </summary>        
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which request message will be sent.</param>
            <param name="parameters">The parameters to send to the remote operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.WebSocketChannelExtensions.RequestStream(Noemax.WebSockets.WebSocketChannel,System.String,System.TimeSpan,System.Object[])">
            <summary>
            Sends the request message and receives a stream as response.
            </summary>        
            <param name="action">The action associated to the remote operation.</param>
            <param name="channel">The channel through which the request message will be sent.</param>
            <param name="timeout">The period time for operation to complete or timeout.</param> 
            <param name="parameters">The parameters to send to the remote operation.</param>
            <returns>The instance of TResult received as response.</returns>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom">
            <summary>
            Provides <see cref="T:Noemax.WebSockets.WebSocketChannel"/> with extension methods for Plain Object Messaging.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.Request``2(Noemax.WebSockets.WebSocketChannel,``0,System.TimeSpan)">
            <summary>
            Sends the request to the remote endpoint through the specified channel and returns the response provided for the request.
            </summary>
            <typeparam name="TRequest">The type of request data to send to the remote operation.</typeparam>
            <typeparam name="TResult">The type of response expected to be received from the remote operation.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="request">The message to send to the remote endpoint.</param>
            <param name="timeout">The period of time during which request must complete or timeout.</param>
            <returns>The response provided by the remote endpoint.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.Request``2(Noemax.WebSockets.WebSocketChannel,``0)">
            <summary>
            Sends the request to the remote endpoint through the specified channel and returns the response provided for the request.
            </summary>
            <typeparam name="TRequest">The type of request data to send to the remote operation.</typeparam>
            <typeparam name="TResult">The type of response expected to be received from the remote operation.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="request">The message to send to the remote endpoint.</param>        
            <returns>The response provided by the remote endpoint.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.Request``2(Noemax.WebSockets.WebSocketChannel,``0,System.IO.Stream,System.TimeSpan)">
            <summary>
            Sends the request to the remote endpoint through the specified channel and returns the response provided for the request.
            </summary>
            <typeparam name="TRequest">The type of request data to send to the remote operation.</typeparam>
            <typeparam name="TResult">The type of response expected to be received from the remote operation.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="request">The message to send to the remote endpoint.</param>
            <param name="timeout">The period of time during which request must complete or timeout.</param>        
            <param name="attachment">The stream of bytes to send along with the request message as attachment.</param>         
            <returns>The response provided by the remote endpoint.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.Request``2(Noemax.WebSockets.WebSocketChannel,``0,System.IO.Stream)">
            <summary>
            Sends the request to the remote endpoint through the specified channel and returns the response provided for the request.
            </summary>
            <typeparam name="TRequest">The type of request data to send to the remote operation.</typeparam>
            <typeparam name="TResult">The type of response expected to be received from the remote operation.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="request">The message to send to the remote endpoint.</param>
            <param name="attachment">The stream of bytes to send along with the request message as attachment.</param>         
            <returns>The response provided by the remote endpoint.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.Request``1(Noemax.WebSockets.WebSocketChannel,``0,System.IO.Stream,System.TimeSpan)">
            <summary>
            Sends the request to the remote endpoint through the specified channel and returns the response provided for the request.
            </summary>
            <typeparam name="TRequest">The type of request data to send to the remote operation.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="request">The message to send to the remote endpoint.</param>
            <param name="timeout">The period of time during which request must complete or timeout.</param>        
            <param name="attachment">The stream of bytes to send along with the request message as attachment.</param>                 
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.Request``1(Noemax.WebSockets.WebSocketChannel,``0,System.IO.Stream)">
            <summary>
            Sends the request to the remote endpoint through the specified channel and returns the response provided for the request.
            </summary>
            <typeparam name="TRequest">The type of request data to send to the remote operation.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="request">The message to send to the remote endpoint.</param>        
            <param name="attachment">The stream of bytes to send along with the request message as attachment.</param>                 
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.Send``1(Noemax.WebSockets.WebSocketChannel,``0,System.TimeSpan)">
            <summary>
            Sends an one-way message to the remote endpoint.
            </summary>
            <typeparam name="TMessage">The type of the data to send to remote endpoint.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="message">The message being sent.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.Send``1(Noemax.WebSockets.WebSocketChannel,``0)">
            <summary>
            Sends an one-way message to the remote endpoint.
            </summary>
            <typeparam name="TMessage">The type of the data to send to remote endpoint.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="message">The message being sent.</param>        
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.Send``1(Noemax.WebSockets.WebSocketChannel,``0,System.IO.Stream,System.TimeSpan)">
            <summary>
            Sends an one-way message to the remote endpoint.
            </summary>
            <typeparam name="TMessage">The type of the data to send to remote endpoint.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="message">The message being sent.</param>
            <param name="attachment">The attachment stream to send along with message.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.Send``1(Noemax.WebSockets.WebSocketChannel,``0,System.IO.Stream)">
            <summary>
            Sends an one-way message to the remote endpoint.
            </summary>
            <typeparam name="TMessage">The type of the data to send to remote endpoint.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="message">The message being sent.</param>
            <param name="attachment">The attachment stream to send along with message.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.SendAsync``1(Noemax.WebSockets.WebSocketChannel,``0,System.TimeSpan)">
            <summary>
            Sends a one-way mesasge to the remote endpoint asycnhronously without blocking the sending thread.
            </summary>    
            <typeparam name="TMessage">The type of the data to send to remote endpoint.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="message">The message being sent.</param>
            <param name="timeout">The period of time during which operation must be completed or timeout.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.SendAsync``1(Noemax.WebSockets.WebSocketChannel,``0)">
            <summary>
            Sends a one-way mesasge to the remote endpoint asycnhronously without blocking the sending thread.
            </summary>            
            <typeparam name="TMessage">The type of the data to send to remote endpoint.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="message">The message being sent.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.Pom.WebSocketChannelExtensionsPom.CreateStreamedMessage``1(Noemax.WebSockets.WebSocketChannel,``0,System.TimeSpan)">
            <summary>
            Initiates and outbound message with streamed attachment.
            </summary>
            <typeparam name="TMessage">The type of the message to be sent to remote endpoint.</typeparam>
            <param name="channel">The <see cref="T:Noemax.WebSockets.WebSocketChannel"/> through which the message is being sent.</param>
            <param name="message">The message being sent.</param>
            <param name="timeout">The interval of time during whech operation is to be complete or fail due to timeout.</param>
            <returns>The stream to write message attachment.</returns>
        </member>
        <member name="T:Noemax.WebSockets.Messaging.XmlMessageSerializer">
            <summary>
            Provides XML serialization for WebSocket messaging services. 
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.XmlMessageSerializer.EnsureKnownTypes(System.Type[])">
            <summary>
            Ensures that the specified types are known to the XML serializer.
            </summary>
            <param name="types">The types to ensure as known.</param>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.XmlMessageSerializer.Serialize(System.Object)">
            <summary>
            Serialize the object into WebSocket outbound message/
            </summary>
            <param name="obj">The object to serialize into the outbound message.</param>
            <returns>The outbound message ready to be sent.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.XmlMessageSerializer.Deserialize(System.String,Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageDispatcher)">
            <summary>
            Deserializes the content of the message.
            </summary>
            <param name="textMessage">The text message to deserialize.</param>        
            <param name="channel">The channel from the message was received.</param>
            <param name="messageDispatcher">The message dispatcher to resolve the destination operation.</param>
            <returns>The object being deserialized.</returns>
        </member>
        <member name="M:Noemax.WebSockets.Messaging.XmlMessageSerializer.Deserialize(System.ArraySegment{System.Byte},Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.Messaging.MessageDispatcher)">
            <summary>
            Deserializes the content of the message.
            </summary>
            <param name="binaryMessage">The binary content of the message to deserialize.</param>
            <param name="channel">The channel from the message was received.</param>
            <param name="dispatcher">The message dispatcher to resolve the destination operation.</param>
            <returns>The object being deserialized.</returns>
        </member>
    </members>
</doc>
